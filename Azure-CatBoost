{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "2e6ffd68-3ae6-42d0-ba5d-bf37272d6da7",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting openpyxl\n  Obtaining dependency information for openpyxl from https://files.pythonhosted.org/packages/c0/da/977ded879c29cbd04de313843e76868e6e13408a94ed6b987245dc7c8506/openpyxl-3.1.5-py2.py3-none-any.whl.metadata\n  Downloading openpyxl-3.1.5-py2.py3-none-any.whl.metadata (2.5 kB)\nCollecting et-xmlfile (from openpyxl)\n  Obtaining dependency information for et-xmlfile from https://files.pythonhosted.org/packages/c1/8b/5fe2cc11fee489817272089c4203e679c63b570a5aaeb18d852ae3cbba6a/et_xmlfile-2.0.0-py3-none-any.whl.metadata\n  Downloading et_xmlfile-2.0.0-py3-none-any.whl.metadata (2.7 kB)\nDownloading openpyxl-3.1.5-py2.py3-none-any.whl (250 kB)\n\u001B[?25l   \u001B[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m \u001B[32m0.0/250.9 kB\u001B[0m \u001B[31m?\u001B[0m eta \u001B[36m-:--:--\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m\u001B[90m━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m \u001B[32m92.2/250.9 kB\u001B[0m \u001B[31m2.5 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m \u001B[32m250.9/250.9 kB\u001B[0m \u001B[31m3.6 MB/s\u001B[0m eta \u001B[36m0:00:00\u001B[0m\n\u001B[?25hDownloading et_xmlfile-2.0.0-py3-none-any.whl (18 kB)\nInstalling collected packages: et-xmlfile, openpyxl\nSuccessfully installed et-xmlfile-2.0.0 openpyxl-3.1.5\n\u001B[43mNote: you may need to restart the kernel using %restart_python or dbutils.library.restartPython() to use updated packages.\u001B[0m\n"
     ]
    }
   ],
   "source": [
    "pip install openpyxl"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "8e3f4201-1d1e-4bb6-b19f-640be9e40447",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "from pyspark.sql import SparkSession\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from pyspark.sql.functions import regexp_replace, col\n",
    "from pyspark.sql.types import DoubleType\n",
    "import re"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "4d6872ce-f208-4f51-8738-badb5a5181a3",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------------+--------------------+--------------+------------+---------+-------------+-----+------+--------------------+------+-----------+----------------+--------+-----------+-----+-----------------+---------------+----------+----------------------+--------------------+--------------+---------------+--------------------+\n|        ListingTitle|            District|          City|  Price(TRY)|ListingID|  ListingDate|Brand|Series|               Model|  Year|Mileage(km)|TransmissionType|FuelType|   BodyType|Color|   EngineSize(cc)|EnginePower(HP)|DriveTrain|PaintAndPartsCondition|    TradeInAvailable|    SellerType|VehicleTax(TRY)|     AccidentHistory|\n+--------------------+--------------------+--------------+------------+---------+-------------+-----+------+--------------------+------+-----------+----------------+--------+-----------+-----+-----------------+---------------+----------+----------------------+--------------------+--------------+---------------+--------------------+\n|2016 AUDİ A3 SPOR...|Aşağısoku Mh. Merkez|          Bolu|1.169.000 TL| 27812680|07 April 2025| Audi|    A3|A3 Sportback 1.0 ...|2016.0| 120.000 km|       Automatic|Gasoline|Hatchback/5|White|1200 cm3' e kadar|   101 - 125 HP|       FWD|  Original  Right R...|   Trade-In Accepted|          NULL|           NULL|                NULL|\n|2018 AUDİ A6 2.0 ...|Güneşevler Mh. Al...|        Ankara|2.450.000 TL| 28816234|07 April 2025| Audi|    A6|A6 Sedan 2.0 TDI ...|2018.0| 136.000 km|  Semi-Automatic|  Diesel|      Sedan|Black|          1968 cc|         190 hp|       AWD|  Original  Trunk L...|Trade-In Not Acce...|        Dealer|           NULL|Amount not specified|\n|Sahibinden Audi A...|  Burmalı Mh. Merkez|Afyonkarahisar|  750.000 TL| 28781662|08 April 2025| Audi|    A4|   A4 Sedan 1.8 TFSI|2011.0| 285.000 km|       Automatic|Gasoline|      Sedan|White|          1798 cc|         160 hp|       FWD|  Original  Roof  L...|Trade-In Not Acce...|Private Seller|          2.013|              75.000|\n|2016 AUDI A3 AMBİ...|  Ilıca Mh. Manavgat|       Antalya|1.195.000 TL| 28731117|03 April 2025| Audi|    A3|A3 Sportback 1.6 ...|2016.0| 101.000 km|  Semi-Automatic|  Diesel|Hatchback/5|Black|          1598 cc|         110 hp|       FWD|  Original  Right R...|   Trade-In Accepted|        Dealer|          1.606|      No tram amount|\n|Sahibinden Audi A...|Uğur Mumcu Mh. Ye...|        Ankara|  822.000 TL| 28393351|02 April 2025| Audi|    A3|A3 Sportback 1.6 ...|2012.0| 212.000 km|  Semi-Automatic|  Diesel|Hatchback/5|White|          1598 cc|         105 hp|       FWD|  Original  Right R...|                NULL|          NULL|           NULL|Amount not specified|\n+--------------------+--------------------+--------------+------------+---------+-------------+-----+------+--------------------+------+-----------+----------------+--------+-----------+-----+-----------------+---------------+----------+----------------------+--------------------+--------------+---------------+--------------------+\nonly showing top 5 rows\n\n"
     ]
    }
   ],
   "source": [
    "spark = SparkSession.builder.appName(\"Read Delta Table\").getOrCreate()\n",
    "df = (\n",
    "    spark.read.format(\"csv\")\n",
    "    .option(\"header\", \"true\")\n",
    "    .option(\"inferSchema\", \"true\")\n",
    "    .load(\"dbfs:/FileStore/cars_en.csv\")\n",
    ")\n",
    "df.show(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "1d24fba0-e214-4576-8638-a1d1ac899ad0",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ListingTitle</th>\n",
       "      <th>District</th>\n",
       "      <th>City</th>\n",
       "      <th>Price(TRY)</th>\n",
       "      <th>ListingID</th>\n",
       "      <th>ListingDate</th>\n",
       "      <th>Brand</th>\n",
       "      <th>Series</th>\n",
       "      <th>Model</th>\n",
       "      <th>Year</th>\n",
       "      <th>Mileage(km)</th>\n",
       "      <th>TransmissionType</th>\n",
       "      <th>FuelType</th>\n",
       "      <th>BodyType</th>\n",
       "      <th>Color</th>\n",
       "      <th>EngineSize(cc)</th>\n",
       "      <th>EnginePower(HP)</th>\n",
       "      <th>DriveTrain</th>\n",
       "      <th>PaintAndPartsCondition</th>\n",
       "      <th>TradeInAvailable</th>\n",
       "      <th>SellerType</th>\n",
       "      <th>VehicleTax(TRY)</th>\n",
       "      <th>AccidentHistory</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2016 AUDİ A3 SPORTBACK 1.0 TFSI BOYASIZ/DEĞİŞE...</td>\n",
       "      <td>Aşağısoku Mh. Merkez</td>\n",
       "      <td>Bolu</td>\n",
       "      <td>1.169.000 TL</td>\n",
       "      <td>27812680</td>\n",
       "      <td>07 April 2025</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A3</td>\n",
       "      <td>A3 Sportback 1.0 TFSI Dynamic</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>120.000 km</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>Hatchback/5</td>\n",
       "      <td>White</td>\n",
       "      <td>1200 cm3' e kadar</td>\n",
       "      <td>101 - 125 HP</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  Right Rear Fender  Trunk Lid  Left R...</td>\n",
       "      <td>Trade-In Accepted</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2018 AUDİ A6 2.0 TDI QUATTRO SUNROOF MATRİX VA...</td>\n",
       "      <td>Güneşevler Mh. Altındağ</td>\n",
       "      <td>Ankara</td>\n",
       "      <td>2.450.000 TL</td>\n",
       "      <td>28816234</td>\n",
       "      <td>07 April 2025</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A6</td>\n",
       "      <td>A6 Sedan 2.0 TDI Quattro</td>\n",
       "      <td>2018.0</td>\n",
       "      <td>136.000 km</td>\n",
       "      <td>Semi-Automatic</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>Black</td>\n",
       "      <td>1968 cc</td>\n",
       "      <td>190 hp</td>\n",
       "      <td>AWD</td>\n",
       "      <td>Original  Trunk Lid  Right Rear Door  Right Fr...</td>\n",
       "      <td>Trade-In Not Accepted</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>None</td>\n",
       "      <td>Amount not specified</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Sahibinden Audi A4 Sedan 1.8 TFSI 2011 Model</td>\n",
       "      <td>Burmalı Mh. Merkez</td>\n",
       "      <td>Afyonkarahisar</td>\n",
       "      <td>750.000 TL</td>\n",
       "      <td>28781662</td>\n",
       "      <td>08 April 2025</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A4</td>\n",
       "      <td>A4 Sedan 1.8 TFSI</td>\n",
       "      <td>2011.0</td>\n",
       "      <td>285.000 km</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>White</td>\n",
       "      <td>1798 cc</td>\n",
       "      <td>160 hp</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  Roof  Left Front Door  Hood  Front B...</td>\n",
       "      <td>Trade-In Not Accepted</td>\n",
       "      <td>Private Seller</td>\n",
       "      <td>2.013</td>\n",
       "      <td>75.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2016 AUDI A3 AMBİENTE *CAM TAVAN LED XENON HIZ...</td>\n",
       "      <td>Ilıca Mh. Manavgat</td>\n",
       "      <td>Antalya</td>\n",
       "      <td>1.195.000 TL</td>\n",
       "      <td>28731117</td>\n",
       "      <td>03 April 2025</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A3</td>\n",
       "      <td>A3 Sportback 1.6 TDI Ambiente</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>101.000 km</td>\n",
       "      <td>Semi-Automatic</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Hatchback/5</td>\n",
       "      <td>Black</td>\n",
       "      <td>1598 cc</td>\n",
       "      <td>110 hp</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  Right Rear Fender  Trunk Lid  Right ...</td>\n",
       "      <td>Trade-In Accepted</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>1.606</td>\n",
       "      <td>No tram amount</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Sahibinden Audi A3 Sportback 1.6 TDI S-Line 20...</td>\n",
       "      <td>Uğur Mumcu Mh. Yenimahalle</td>\n",
       "      <td>Ankara</td>\n",
       "      <td>822.000 TL</td>\n",
       "      <td>28393351</td>\n",
       "      <td>02 April 2025</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A3</td>\n",
       "      <td>A3 Sportback 1.6 TDI Attraction</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>212.000 km</td>\n",
       "      <td>Semi-Automatic</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Hatchback/5</td>\n",
       "      <td>White</td>\n",
       "      <td>1598 cc</td>\n",
       "      <td>105 hp</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  Right Rear Fender  Trunk Lid  Left R...</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>Amount not specified</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6670</th>\n",
       "      <td>Sahibinden Opel Corsa 1.3 CDTI Enjoy 111 2010 ...</td>\n",
       "      <td>Karapürçek Mh. Altındağ</td>\n",
       "      <td>Ankara</td>\n",
       "      <td>450.000 TL</td>\n",
       "      <td>29019564</td>\n",
       "      <td>16 April 2025</td>\n",
       "      <td>Opel</td>\n",
       "      <td>Corsa</td>\n",
       "      <td>1.3 CDTI Enjoy 111</td>\n",
       "      <td>2010.0</td>\n",
       "      <td>257.000 km</td>\n",
       "      <td>Manual</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Hatchback/5</td>\n",
       "      <td>None</td>\n",
       "      <td>1248 cc</td>\n",
       "      <td>90 hp</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  Right Rear Fender  Trunk Lid  Left R...</td>\n",
       "      <td>None</td>\n",
       "      <td>Private Seller</td>\n",
       "      <td>None</td>\n",
       "      <td>No tram amount</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6671</th>\n",
       "      <td>ÇORUM MERKEZ 1999 HONDA CİVİC 1.4is TAVAN BOYASIZ</td>\n",
       "      <td>Ak Kent Mh. Merkez</td>\n",
       "      <td>Çorum</td>\n",
       "      <td>355.000 TL</td>\n",
       "      <td>29019753</td>\n",
       "      <td>16 April 2025</td>\n",
       "      <td>Honda</td>\n",
       "      <td>Civic</td>\n",
       "      <td>1.4 i S</td>\n",
       "      <td>1999.0</td>\n",
       "      <td>304.000 km</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>LPG &amp; Gasoline</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>None</td>\n",
       "      <td>1396 cc</td>\n",
       "      <td>90 hp</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  Roof  Locally Painted  -  Painted  R...</td>\n",
       "      <td>Trade-In Accepted</td>\n",
       "      <td>None</td>\n",
       "      <td>Yıllık MTV  436 TL</td>\n",
       "      <td>No tram amount</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6672</th>\n",
       "      <td>Sahibinden Peugeot 206 1.4 X-Design 2005 Model</td>\n",
       "      <td>Cumhuriyet Mh. Lüleburgaz</td>\n",
       "      <td>Kırklareli</td>\n",
       "      <td>375.000 TL</td>\n",
       "      <td>29018858</td>\n",
       "      <td>16 April 2025</td>\n",
       "      <td>Peugeot</td>\n",
       "      <td>206</td>\n",
       "      <td>1.4 X-Design</td>\n",
       "      <td>2005.0</td>\n",
       "      <td>208.000 km</td>\n",
       "      <td>Manual</td>\n",
       "      <td>LPG &amp; Gasoline</td>\n",
       "      <td>Hatchback/3</td>\n",
       "      <td>None</td>\n",
       "      <td>1360 cc</td>\n",
       "      <td>76 hp</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  -  Locally Painted  -  Painted  Righ...</td>\n",
       "      <td>None</td>\n",
       "      <td>Private Seller</td>\n",
       "      <td>None</td>\n",
       "      <td>Tramer  3.000 TL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6673</th>\n",
       "      <td>Sahibinden Peugeot 206 1.6 XT 2001 Model</td>\n",
       "      <td>Batıkent Mh. Şehitkamil</td>\n",
       "      <td>Gaziantep</td>\n",
       "      <td>220.000 TL</td>\n",
       "      <td>29019438</td>\n",
       "      <td>16 April 2025</td>\n",
       "      <td>Peugeot</td>\n",
       "      <td>206</td>\n",
       "      <td>1.6 XT</td>\n",
       "      <td>2001.0</td>\n",
       "      <td>138.000 km</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>LPG &amp; Gasoline</td>\n",
       "      <td>Hatchback/5</td>\n",
       "      <td>None</td>\n",
       "      <td>1587 cc</td>\n",
       "      <td>109 hp</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  Right Rear Fender  Trunk Lid  Left R...</td>\n",
       "      <td>None</td>\n",
       "      <td>Private Seller</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6674</th>\n",
       "      <td>Galeriden Renault Megane 1.5 dCi Touch Plus 20...</td>\n",
       "      <td>Yukarı Dudullu Mh. Ümraniye</td>\n",
       "      <td>İstanbul</td>\n",
       "      <td>770.000 TL</td>\n",
       "      <td>29022036</td>\n",
       "      <td>16 April 2025</td>\n",
       "      <td>Renault</td>\n",
       "      <td>Megane</td>\n",
       "      <td>1.5 dCi Touch Plus</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>260.000 km</td>\n",
       "      <td>Semi-Automatic</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>None</td>\n",
       "      <td>1461 cc</td>\n",
       "      <td>110 hp</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  -  Locally Painted  -  Painted  -  R...</td>\n",
       "      <td>Trade-In Accepted</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>6675 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                           ListingTitle  ...       AccidentHistory\n",
       "0     2016 AUDİ A3 SPORTBACK 1.0 TFSI BOYASIZ/DEĞİŞE...  ...                  None\n",
       "1     2018 AUDİ A6 2.0 TDI QUATTRO SUNROOF MATRİX VA...  ...  Amount not specified\n",
       "2          Sahibinden Audi A4 Sedan 1.8 TFSI 2011 Model  ...                75.000\n",
       "3     2016 AUDI A3 AMBİENTE *CAM TAVAN LED XENON HIZ...  ...        No tram amount\n",
       "4     Sahibinden Audi A3 Sportback 1.6 TDI S-Line 20...  ...  Amount not specified\n",
       "...                                                 ...  ...                   ...\n",
       "6670  Sahibinden Opel Corsa 1.3 CDTI Enjoy 111 2010 ...  ...        No tram amount\n",
       "6671  ÇORUM MERKEZ 1999 HONDA CİVİC 1.4is TAVAN BOYASIZ  ...        No tram amount\n",
       "6672     Sahibinden Peugeot 206 1.4 X-Design 2005 Model  ...      Tramer  3.000 TL\n",
       "6673           Sahibinden Peugeot 206 1.6 XT 2001 Model  ...                  None\n",
       "6674  Galeriden Renault Megane 1.5 dCi Touch Plus 20...  ...                  None\n",
       "\n",
       "[6675 rows x 23 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pandas = df.toPandas()\n",
    "df_pandas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "f96c8f94-2881-4755-b20f-28a62b0a9503",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "ListingTitle               object\n",
       "District                   object\n",
       "City                       object\n",
       "Price(TRY)                 object\n",
       "ListingID                   int32\n",
       "ListingDate                object\n",
       "Brand                      object\n",
       "Series                     object\n",
       "Model                      object\n",
       "Year                      float64\n",
       "Mileage(km)                object\n",
       "TransmissionType           object\n",
       "FuelType                   object\n",
       "BodyType                   object\n",
       "Color                      object\n",
       "EngineSize(cc)             object\n",
       "EnginePower(HP)            object\n",
       "DriveTrain                 object\n",
       "PaintAndPartsCondition     object\n",
       "TradeInAvailable           object\n",
       "SellerType                 object\n",
       "VehicleTax(TRY)            object\n",
       "AccidentHistory            object\n",
       "dtype: object"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pandas.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "831c6a7f-25d4-4207-b6cf-a5d609189d07",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ListingID</th>\n",
       "      <th>Year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>6.675000e+03</td>\n",
       "      <td>6674.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.858237e+07</td>\n",
       "      <td>2010.083908</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>7.487078e+05</td>\n",
       "      <td>7.735794</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.226011e+07</td>\n",
       "      <td>1976.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.872256e+07</td>\n",
       "      <td>2005.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2.878227e+07</td>\n",
       "      <td>2011.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2.880938e+07</td>\n",
       "      <td>2016.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2.904521e+07</td>\n",
       "      <td>2025.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          ListingID         Year\n",
       "count  6.675000e+03  6674.000000\n",
       "mean   2.858237e+07  2010.083908\n",
       "std    7.487078e+05     7.735794\n",
       "min    1.226011e+07  1976.000000\n",
       "25%    2.872256e+07  2005.000000\n",
       "50%    2.878227e+07  2011.000000\n",
       "75%    2.880938e+07  2016.000000\n",
       "max    2.904521e+07  2025.000000"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean = df_pandas.copy()\n",
    "df_clean.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "ac97dc36-9a67-4829-b158-a4ee76679fe8",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "def clean_text_columns(df_clean):\n",
    "    for col in df_clean.select_dtypes(include=[\"object\"]).columns:\n",
    "        df_clean[col] = df_clean[col].astype(str).apply(lambda x: x.replace(\"\\n\", \" \").replace(\"\\r\", \" \").replace(\"\\t\", \" \").replace(\"_x000D_\", \" \").strip())\n",
    "    return df\n",
    "\n",
    "df_clean = clean_text_columns(df_clean)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "e27e0aff-1841-4b66-8da5-81e17e799f9a",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pyspark.sql.dataframe.DataFrame'>\n"
     ]
    }
   ],
   "source": [
    "print(type(df_clean))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "073b9bdd-a929-4700-bd80-5ededbf70c7f",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "pandas_df = df_clean.toPandas()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "7c4b8a7b-5900-44f7-bb3c-0ee50c428282",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "['ListingTitle',\n",
       " 'District',\n",
       " 'City',\n",
       " 'Price(TRY)',\n",
       " 'ListingID',\n",
       " 'ListingDate',\n",
       " 'Brand',\n",
       " 'Series',\n",
       " 'Model',\n",
       " 'Year',\n",
       " 'Mileage(km)',\n",
       " 'TransmissionType',\n",
       " 'FuelType',\n",
       " 'BodyType',\n",
       " 'Color',\n",
       " 'EngineSize(cc)',\n",
       " 'EnginePower(HP)',\n",
       " 'DriveTrain',\n",
       " 'PaintAndPartsCondition',\n",
       " 'TradeInAvailable',\n",
       " 'SellerType',\n",
       " 'VehicleTax(TRY)',\n",
       " 'AccidentHistory']"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pandas_df.columns.tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "a7641bfc-3408-4f2e-aaa7-319366e0441a",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "\n",
    "pandas_df['Price(TRY)'] = pandas_df['Price(TRY)'].str.replace('.', '', regex=False)\n",
    "pandas_df['Price(TRY)'] = pandas_df['Price(TRY)'].str.replace(' TL', '', regex=False)\n",
    "pandas_df['Price(TRY)'] = pandas_df['Price(TRY)'].str.replace(',', '.', regex=False)\n",
    "pandas_df['Price(TRY)'] = pd.to_numeric(pandas_df['Price(TRY)'], errors='coerce')\n",
    "\n",
    "\n",
    "# Convert ListingDate column of the list to datetime format\n",
    "pandas_df['ListingDate'] = pandas_df['ListingDate'].str.strip()\n",
    "pandas_df['ListingDate'] = pandas_df['ListingDate'].str.replace(r\"\\s+\", \" \", regex=True)\n",
    "pandas_df['ListingDate'] = pd.to_datetime(pandas_df['ListingDate'], format='%d %B %Y')\n",
    "\n",
    "\n",
    "# Clear the Mileage(km) column and convert it to numeric\n",
    "pandas_df[\"Mileage(km)\"] = pandas_df[\"Mileage(km)\"].str.strip(\" km\")\n",
    "pandas_df['Mileage(km)'] = pandas_df['Mileage(km)'].str.replace('.', '', regex=False)\n",
    "pandas_df['Mileage(km)'] = pd.to_numeric(pandas_df['Mileage(km)'], errors='coerce')\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "6435bf64-30c3-49cf-81ba-c4ff53ae9205",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "def extract_number_fixed(value):\n",
    "    value = str(value).lower() # Convert empty or NaN values to string\n",
    "    value = value.replace(\"'\", \"\").replace(\"cm3\", \"\").replace(\"cc\", \"\").replace(\"hp\", \"\") # Remove characters that need to be cleared\n",
    "    nums = re.findall(r'\\d+', value) # Capture number ranges\n",
    "\n",
    "    if len(nums) == 1:\n",
    "        return float(nums[0])\n",
    "    elif len(nums) == 2:\n",
    "        return round((int(nums[0]) + int(nums[1])) / 2)\n",
    "    else:\n",
    "        return np.nan\n",
    "pandas_df['EngineSize(cc)'] = pandas_df['EngineSize(cc)'].apply(extract_number_fixed)\n",
    "pandas_df['EnginePower(HP)'] = pandas_df['EnginePower(HP)'].apply(extract_number_fixed)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "0132bfaf-a6f7-4fc9-81f7-72b594bad6f7",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "ListingTitle                 0\n",
       "District                     0\n",
       "City                         0\n",
       "Price(TRY)                   0\n",
       "ListingID                    0\n",
       "ListingDate                  0\n",
       "Brand                        0\n",
       "Series                       0\n",
       "Model                        1\n",
       "Year                         1\n",
       "Mileage(km)                  1\n",
       "TransmissionType             1\n",
       "FuelType                     1\n",
       "BodyType                   119\n",
       "Color                     2455\n",
       "EngineSize(cc)             191\n",
       "EnginePower(HP)            198\n",
       "DriveTrain                 237\n",
       "PaintAndPartsCondition       0\n",
       "TradeInAvailable          3797\n",
       "SellerType                3098\n",
       "VehicleTax(TRY)           4714\n",
       "AccidentHistory           3584\n",
       "dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pandas_df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "3d8a0658-5734-4969-80b8-ef3d56c86d8e",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/databricks/python/lib/python3.11/site-packages/numpy/lib/nanfunctions.py:1215: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n"
     ]
    }
   ],
   "source": [
    "# EngineSize(cc)\n",
    "pandas_df[\"EngineSize(cc)\"] = pandas_df.groupby([\"Brand\", \"Model\"])[\"EngineSize(cc)\"].transform(lambda x: x.fillna(x.median()))\n",
    "pandas_df['EngineSize(cc)'].fillna(pandas_df['EngineSize(cc)'].median(), inplace=True)\n",
    "\n",
    "# EnginePower(HP)\n",
    "pandas_df[\"EnginePower(HP)\"] = pandas_df.groupby([\"Brand\", \"Model\"])[\"EnginePower(HP)\"].transform(lambda x: x.fillna(x.median()))\n",
    "pandas_df['EnginePower(HP)'].fillna(pandas_df['EnginePower(HP)'].median(), inplace=True)\n",
    "\n",
    "# DriveTrain\n",
    "list_DriveTrain = ['FWD', 'RWD','AWD']\n",
    "pandas_df[\"DriveTrain\"] = pandas_df[\"DriveTrain\"].where(pandas_df[\"DriveTrain\"].isin(list_DriveTrain), np.nan)\n",
    "pandas_df['DriveTrain'] = pandas_df.groupby(['Brand', 'Series', 'Model'])['DriveTrain']\\\n",
    "                   .transform(lambda x: x.fillna(x.mode()[0] if not x.mode().empty else np.nan))\n",
    "pandas_df['DriveTrain'].fillna(pandas_df['DriveTrain'].mode()[0], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "ca2bc736-b4cb-40e7-b598-3a9f02e2baab",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "# 1 missing\n",
    "\n",
    "pandas_df = pandas_df.fillna({'Model': pandas_df.groupby(['Brand', 'Series'])['Model'].transform('first')})\n",
    "pandas_df = pandas_df.fillna({'Year': pandas_df.groupby(['Brand', 'Model'])['Year'].transform('median')})\n",
    "pandas_df['Mileage(km)'] = pandas_df.groupby(['Year', 'Model'])['Mileage(km)'].transform(\n",
    "    lambda x: x.fillna(x.median()))\n",
    "\n",
    "pandas_df['TransmissionType'] = pandas_df.groupby(['Series', 'Model'])['TransmissionType'].transform(\n",
    "    lambda x: x.fillna(x.mode()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "fb073cfd-b165-43fc-b654-97c7e3cc261f",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "pandas_df['Color'] = pandas_df['Color'].fillna('Unknown')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "68e068b8-ed3c-4714-9edd-6430f23eac0c",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "# Marka ve modele göre en yaygın gövde tipi\n",
    "pandas_df['BodyType'] = pandas_df.groupby(['Brand', 'Model'])['BodyType'].transform(\n",
    "    lambda x: x.fillna(x.mode()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "28d1b3ac-8f0a-4233-b3eb-76e510837b23",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "pandas_df['AccidentHistory'] = pandas_df['AccidentHistory'].fillna('No_Info')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "1fb049e2-df61-4055-a603-780999fe918e",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "# drop_list\n",
    "pandas_df = pandas_df.drop(['VehicleTax(TRY)', 'TradeInAvailable'], axis=1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "357131ee-035a-4343-acc4-f1cad0647f6a",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "# SellerType\n",
    "list_SellerType = ['Unknown', 'Dealer', 'Private Seller', 'Authorized Dealer']\n",
    "pandas_df[\"SellerType\"] = pandas_df[\"SellerType\"].where(pandas_df[\"SellerType\"].isin(list_SellerType), np.nan)\n",
    "pandas_df['SellerType'].fillna('Unknown', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "c95b1173-030b-4102-be62-1476da395c81",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "# FuelType\n",
    "list_FuelType = ['Gasoline', 'Diesel', 'Hybrid', 'LPG & Gasoline','Electric']\n",
    "pandas_df[\"FuelType\"] = pandas_df[\"FuelType\"].where(pandas_df[\"FuelType\"].isin(list_FuelType), np.nan)\n",
    "pandas_df['FuelType'] = pandas_df.groupby(['Brand', 'Series', 'Model'])['FuelType'].transform(lambda x: x.fillna(x.mode()[0] if not x.mode().empty else np.nan))\n",
    "pandas_df['FuelType'].fillna(pandas_df['FuelType'].mode()[0], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "e0b3204f-882e-4d76-a13b-a94453233a02",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "['ListingTitle',\n",
       " 'District',\n",
       " 'City',\n",
       " 'Price(TRY)',\n",
       " 'ListingID',\n",
       " 'ListingDate',\n",
       " 'Brand',\n",
       " 'Series',\n",
       " 'Model',\n",
       " 'Year',\n",
       " 'Mileage(km)',\n",
       " 'TransmissionType',\n",
       " 'FuelType',\n",
       " 'BodyType',\n",
       " 'Color',\n",
       " 'EngineSize(cc)',\n",
       " 'EnginePower(HP)',\n",
       " 'DriveTrain',\n",
       " 'PaintAndPartsCondition',\n",
       " 'SellerType',\n",
       " 'AccidentHistory']"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pandas_df.columns.tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "59eed32c-4f9a-40d4-83aa-f4464c23fa46",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "\n",
    "# TradeInAvailable\n",
    "#list_TradeInStatus = ['Trade-In Accepted','Trade-In Not Accepted','Unknown']\n",
    "#pandas_df[\"TradeInAvailable\"] = pandas_df[\"TradeInAvailable\"].where(pandas_df[\"TradeInAvailable\"].isin(list_TradeInStatus), np.nan)\n",
    "#pandas_df['TradeInAvailable'].fillna('Unknown', inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "522c946b-00ef-4c7e-96f5-1ca9872db2a9",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "ListingTitle                0\n",
       "District                    0\n",
       "City                        0\n",
       "Price(TRY)                  0\n",
       "ListingID                   0\n",
       "ListingDate                 0\n",
       "Brand                       0\n",
       "Series                      0\n",
       "Model                       1\n",
       "Year                        1\n",
       "Mileage(km)                 2\n",
       "TransmissionType            2\n",
       "FuelType                    0\n",
       "BodyType                  120\n",
       "Color                       0\n",
       "EngineSize(cc)              0\n",
       "EnginePower(HP)             0\n",
       "DriveTrain                  0\n",
       "PaintAndPartsCondition      0\n",
       "SellerType                  0\n",
       "AccidentHistory             0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pandas_df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "c3d6f823-5f3b-4ace-9573-ebac10741a30",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ListingTitle</th>\n",
       "      <th>District</th>\n",
       "      <th>City</th>\n",
       "      <th>Price(TRY)</th>\n",
       "      <th>ListingID</th>\n",
       "      <th>ListingDate</th>\n",
       "      <th>Brand</th>\n",
       "      <th>Series</th>\n",
       "      <th>Model</th>\n",
       "      <th>Year</th>\n",
       "      <th>Mileage(km)</th>\n",
       "      <th>TransmissionType</th>\n",
       "      <th>FuelType</th>\n",
       "      <th>BodyType</th>\n",
       "      <th>Color</th>\n",
       "      <th>EngineSize(cc)</th>\n",
       "      <th>EnginePower(HP)</th>\n",
       "      <th>DriveTrain</th>\n",
       "      <th>PaintAndPartsCondition</th>\n",
       "      <th>SellerType</th>\n",
       "      <th>AccidentHistory</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2016 AUDİ A3 SPORTBACK 1.0 TFSI BOYASIZ/DEĞİŞE...</td>\n",
       "      <td>Aşağısoku Mh. Merkez</td>\n",
       "      <td>Bolu</td>\n",
       "      <td>1169000</td>\n",
       "      <td>27812680</td>\n",
       "      <td>2025-04-07</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A3</td>\n",
       "      <td>A3 Sportback 1.0 TFSI Dynamic</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>120000.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>Hatchback/5</td>\n",
       "      <td>White</td>\n",
       "      <td>1200.0</td>\n",
       "      <td>113.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  Right Rear Fender  Trunk Lid  Left R...</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>No_Info</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2018 AUDİ A6 2.0 TDI QUATTRO SUNROOF MATRİX VA...</td>\n",
       "      <td>Güneşevler Mh. Altındağ</td>\n",
       "      <td>Ankara</td>\n",
       "      <td>2450000</td>\n",
       "      <td>28816234</td>\n",
       "      <td>2025-04-07</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A6</td>\n",
       "      <td>A6 Sedan 2.0 TDI Quattro</td>\n",
       "      <td>2018.0</td>\n",
       "      <td>136000.0</td>\n",
       "      <td>Semi-Automatic</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>Black</td>\n",
       "      <td>1968.0</td>\n",
       "      <td>190.0</td>\n",
       "      <td>AWD</td>\n",
       "      <td>Original  Trunk Lid  Right Rear Door  Right Fr...</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Amount not specified</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Sahibinden Audi A4 Sedan 1.8 TFSI 2011 Model</td>\n",
       "      <td>Burmalı Mh. Merkez</td>\n",
       "      <td>Afyonkarahisar</td>\n",
       "      <td>750000</td>\n",
       "      <td>28781662</td>\n",
       "      <td>2025-04-08</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A4</td>\n",
       "      <td>A4 Sedan 1.8 TFSI</td>\n",
       "      <td>2011.0</td>\n",
       "      <td>285000.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>White</td>\n",
       "      <td>1798.0</td>\n",
       "      <td>160.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  Roof  Left Front Door  Hood  Front B...</td>\n",
       "      <td>Private Seller</td>\n",
       "      <td>75.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2016 AUDI A3 AMBİENTE *CAM TAVAN LED XENON HIZ...</td>\n",
       "      <td>Ilıca Mh. Manavgat</td>\n",
       "      <td>Antalya</td>\n",
       "      <td>1195000</td>\n",
       "      <td>28731117</td>\n",
       "      <td>2025-04-03</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A3</td>\n",
       "      <td>A3 Sportback 1.6 TDI Ambiente</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>101000.0</td>\n",
       "      <td>Semi-Automatic</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Hatchback/5</td>\n",
       "      <td>Black</td>\n",
       "      <td>1598.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  Right Rear Fender  Trunk Lid  Right ...</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>No tram amount</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Sahibinden Audi A3 Sportback 1.6 TDI S-Line 20...</td>\n",
       "      <td>Uğur Mumcu Mh. Yenimahalle</td>\n",
       "      <td>Ankara</td>\n",
       "      <td>822000</td>\n",
       "      <td>28393351</td>\n",
       "      <td>2025-04-02</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A3</td>\n",
       "      <td>A3 Sportback 1.6 TDI Attraction</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>212000.0</td>\n",
       "      <td>Semi-Automatic</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Hatchback/5</td>\n",
       "      <td>White</td>\n",
       "      <td>1598.0</td>\n",
       "      <td>105.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  Right Rear Fender  Trunk Lid  Left R...</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>Amount not specified</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2018 -A4 1.4 TFSİ -SUNROOF-DERİ -ISITMA-DEĞİŞE...</td>\n",
       "      <td>Bahçelievler Mh. Bahçelievler</td>\n",
       "      <td>İstanbul</td>\n",
       "      <td>1750000</td>\n",
       "      <td>28640127</td>\n",
       "      <td>2025-03-28</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A4</td>\n",
       "      <td>A4 Sedan 1.4 TFSI Dynamic</td>\n",
       "      <td>2018.0</td>\n",
       "      <td>85600.0</td>\n",
       "      <td>Semi-Automatic</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>Anthracite</td>\n",
       "      <td>1395.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  -  Locally Painted  Right Front Fend...</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>37.800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Galeriden Audi A3 Sedan 1.6 TDI Ambiente 2014 ...</td>\n",
       "      <td>Zafer Mh. Çorlu</td>\n",
       "      <td>Tekirdağ</td>\n",
       "      <td>990000</td>\n",
       "      <td>28631300</td>\n",
       "      <td>2025-03-28</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A3</td>\n",
       "      <td>A3 Sedan 1.6 TDI Ambiente</td>\n",
       "      <td>2014.0</td>\n",
       "      <td>218000.0</td>\n",
       "      <td>Semi-Automatic</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>Black</td>\n",
       "      <td>1598.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  -  Locally Painted  -  Painted  -  R...</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>3.295</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>AUDİ A3 SEDAN 1.6 TDI DESİGN LİNE S-TONİC</td>\n",
       "      <td>Yalı Mh. Karasu</td>\n",
       "      <td>Sakarya</td>\n",
       "      <td>1475000</td>\n",
       "      <td>28817858</td>\n",
       "      <td>2025-04-07</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A3</td>\n",
       "      <td>A3 Sedan 1.6 TDI Design Line</td>\n",
       "      <td>2018.0</td>\n",
       "      <td>126000.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>Black</td>\n",
       "      <td>1500.0</td>\n",
       "      <td>113.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  Trunk Lid  Right Front Door  Roof  L...</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>No_Info</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2008 MODEL AUDİ A6 2.0TDI S LINE 188.000 KM'DE...</td>\n",
       "      <td>Yeni Mh. Çaycuma</td>\n",
       "      <td>Zonguldak</td>\n",
       "      <td>1030000</td>\n",
       "      <td>28817845</td>\n",
       "      <td>2025-04-07</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A6</td>\n",
       "      <td>A6 Sedan 2.0 TDI</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>189000.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>Black</td>\n",
       "      <td>1968.0</td>\n",
       "      <td>136.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  Right Rear Fender  Trunk Lid  Left R...</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>No_Info</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>ADANZY AUTO'dan 2017 M AUDİ A3 YENİ MAKYAJLI K...</td>\n",
       "      <td>Karacaahmet Mh. Şehitkamil</td>\n",
       "      <td>Gaziantep</td>\n",
       "      <td>1185000</td>\n",
       "      <td>28816887</td>\n",
       "      <td>2025-04-07</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A3</td>\n",
       "      <td>A3 Sedan 1.6 TDI Dynamic</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>159500.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>Black</td>\n",
       "      <td>1500.0</td>\n",
       "      <td>113.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  Trunk Lid  Left Rear Fender  Right R...</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>No_Info</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Sahibinden Audi A3 Sedan 35 TFSI Design 2020 M...</td>\n",
       "      <td>Cennet Mh. Küçükçekmece</td>\n",
       "      <td>İstanbul</td>\n",
       "      <td>1600000</td>\n",
       "      <td>28815998</td>\n",
       "      <td>2025-04-07</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A3</td>\n",
       "      <td>A3 Sedan 35 TFSI Design</td>\n",
       "      <td>2020.0</td>\n",
       "      <td>55000.0</td>\n",
       "      <td>Semi-Automatic</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>Anthracite</td>\n",
       "      <td>1498.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  -  Locally Painted  -  Painted  Righ...</td>\n",
       "      <td>Private Seller</td>\n",
       "      <td>29.543</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Sahibinden Audi A3 Sedan 1.6 TDI Design Line 2...</td>\n",
       "      <td>Fatih Mh. Muratlı</td>\n",
       "      <td>Tekirdağ</td>\n",
       "      <td>1150000</td>\n",
       "      <td>28815942</td>\n",
       "      <td>2025-04-07</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A3</td>\n",
       "      <td>A3 Sedan 1.6 TDI Design Line</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>240000.0</td>\n",
       "      <td>Semi-Automatic</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>Black</td>\n",
       "      <td>1598.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  -  Locally Painted  -  Painted  Righ...</td>\n",
       "      <td>Private Seller</td>\n",
       "      <td>No_Info</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2022 AUDİ A6 40TDİ QUATTRO DESİGN -HATASIZ-BOY...</td>\n",
       "      <td>Birlik Mh. Çankaya</td>\n",
       "      <td>Ankara</td>\n",
       "      <td>4850000</td>\n",
       "      <td>28816511</td>\n",
       "      <td>2025-04-07</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A6</td>\n",
       "      <td>A6 Sedan 40 TDI Quattro Design</td>\n",
       "      <td>2022.0</td>\n",
       "      <td>62000.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>Black</td>\n",
       "      <td>1900.0</td>\n",
       "      <td>213.0</td>\n",
       "      <td>AWD</td>\n",
       "      <td>Original  Right Rear Fender  Trunk Lid  Left R...</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>No_Info</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>RC MOTORS tan uygun fiyatlı A4</td>\n",
       "      <td>Peyas Mh. Kayapınar</td>\n",
       "      <td>Diyarbakır</td>\n",
       "      <td>875000</td>\n",
       "      <td>28816329</td>\n",
       "      <td>2025-04-07</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A4</td>\n",
       "      <td>A4 Sedan 2.0 TDI</td>\n",
       "      <td>2014.0</td>\n",
       "      <td>355000.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>White</td>\n",
       "      <td>1968.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  Right Rear Fender  Trunk Lid  Roof  ...</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>No_Info</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>KYL MOTORS'TAN 2014 AUDİ A3 1.6 TDI AMBİTİON</td>\n",
       "      <td>Gökevler Mh. Esenyurt</td>\n",
       "      <td>İstanbul</td>\n",
       "      <td>990000</td>\n",
       "      <td>28816198</td>\n",
       "      <td>2025-04-07</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A3</td>\n",
       "      <td>A3 Sportback 1.6 TDI Ambition</td>\n",
       "      <td>2014.0</td>\n",
       "      <td>216000.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Hatchback/5</td>\n",
       "      <td>Black</td>\n",
       "      <td>1500.0</td>\n",
       "      <td>113.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  Trunk Lid  Roof  Left Rear Door  Lef...</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>No_Info</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>AUDİ A3-2018-DİZEL-OTOMATİK-SLİNE-CAM TAVAN-MA...</td>\n",
       "      <td>Fevzipaşa Mh. Seyhan</td>\n",
       "      <td>Adana</td>\n",
       "      <td>1440000</td>\n",
       "      <td>28816063</td>\n",
       "      <td>2025-04-07</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A3</td>\n",
       "      <td>A3 Sportback 1.6 TDI Sport Line</td>\n",
       "      <td>2018.0</td>\n",
       "      <td>150500.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Hatchback/5</td>\n",
       "      <td>Red</td>\n",
       "      <td>1500.0</td>\n",
       "      <td>113.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  Right Rear Fender  Trunk Lid  Left R...</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>No_Info</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Sahibinden Audi A3 Sportback 1.4 TFSI Ambition...</td>\n",
       "      <td>Merkez Merkez</td>\n",
       "      <td>Zonguldak</td>\n",
       "      <td>735000</td>\n",
       "      <td>27456546</td>\n",
       "      <td>2025-04-07</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A3</td>\n",
       "      <td>A3 Sportback 1.4 TFSI Ambition</td>\n",
       "      <td>2009.0</td>\n",
       "      <td>214000.0</td>\n",
       "      <td>Semi-Automatic</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>Hatchback/5</td>\n",
       "      <td>Anthracite</td>\n",
       "      <td>1390.0</td>\n",
       "      <td>125.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  -  Locally Painted  Left Front Fende...</td>\n",
       "      <td>Private Seller</td>\n",
       "      <td>21.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Sahibinden Audi A3 Sportback 35 TFSI Advanced ...</td>\n",
       "      <td>Ergenekon Mh. Turgutlu</td>\n",
       "      <td>Manisa</td>\n",
       "      <td>2000000</td>\n",
       "      <td>28815152</td>\n",
       "      <td>2025-04-07</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A3</td>\n",
       "      <td>A3 Sportback 35 TFSI Advanced</td>\n",
       "      <td>2023.0</td>\n",
       "      <td>27000.0</td>\n",
       "      <td>Semi-Automatic</td>\n",
       "      <td>Hybrid</td>\n",
       "      <td>Hatchback/5</td>\n",
       "      <td>White</td>\n",
       "      <td>1498.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  -  Locally Painted  Left Front Door ...</td>\n",
       "      <td>Private Seller</td>\n",
       "      <td>No tram amount</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>2021 HATASIZ BOYASIZ 67.000KM AUDI A3 +PREMIUM...</td>\n",
       "      <td>Kazımdirik Mh. Bornova</td>\n",
       "      <td>İzmir</td>\n",
       "      <td>1860000</td>\n",
       "      <td>28814934</td>\n",
       "      <td>2025-04-07</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A3</td>\n",
       "      <td>A3 Sedan 30 TFSI Advanced</td>\n",
       "      <td>2021.0</td>\n",
       "      <td>67000.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>LPG &amp; Gasoline</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>Black</td>\n",
       "      <td>1200.0</td>\n",
       "      <td>113.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  Right Rear Fender  Trunk Lid  Left R...</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>No_Info</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Sahibinden Audi A6 Sedan 2.0 tfsi2007 Model 28...</td>\n",
       "      <td>Önder Mh. Altındağ</td>\n",
       "      <td>Ankara</td>\n",
       "      <td>760000</td>\n",
       "      <td>28819155</td>\n",
       "      <td>2025-04-08</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A6</td>\n",
       "      <td>A6 Sedan 2.0 TDI</td>\n",
       "      <td>2007.0</td>\n",
       "      <td>280000.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>LPG &amp; Gasoline</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>Black</td>\n",
       "      <td>1968.0</td>\n",
       "      <td>140.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  Roof  Locally Painted  -  Painted  R...</td>\n",
       "      <td>Private Seller</td>\n",
       "      <td>No tram amount</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Sahibinden Audi A4 Sedan 2.0 TDI 2015 Model</td>\n",
       "      <td>Güneştepe Mh. Osmangazi</td>\n",
       "      <td>Bursa</td>\n",
       "      <td>1025000</td>\n",
       "      <td>28818966</td>\n",
       "      <td>2025-04-08</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A4</td>\n",
       "      <td>A4 Sedan 2.0 TDI</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>323000.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>White</td>\n",
       "      <td>1968.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  -  Locally Painted  Right Rear Fende...</td>\n",
       "      <td>Private Seller</td>\n",
       "      <td>8.500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>ÇAPAN OTO AUDİ A6 MAKYAJLI SUNROOF+İÇİ BEJ+G-E...</td>\n",
       "      <td>Söğütlü Mh. Akçaabat</td>\n",
       "      <td>Trabzon</td>\n",
       "      <td>895000</td>\n",
       "      <td>28814666</td>\n",
       "      <td>2025-04-07</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A6</td>\n",
       "      <td>A6 Sedan 2.0 TDI</td>\n",
       "      <td>2011.0</td>\n",
       "      <td>286000.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>Black</td>\n",
       "      <td>1998.0</td>\n",
       "      <td>177.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  Left Rear Fender  Roof  Left Rear Do...</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>No_Info</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>BAKIRS//2013 AUDİ A3 DEĞİŞENSİZ KUSURSUZ CAM T...</td>\n",
       "      <td>Merkez Aziziye</td>\n",
       "      <td>Erzurum</td>\n",
       "      <td>985000</td>\n",
       "      <td>28814639</td>\n",
       "      <td>2025-04-07</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A3</td>\n",
       "      <td>A3 Sportback 1.6 TDI Ambition</td>\n",
       "      <td>2013.0</td>\n",
       "      <td>212000.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Hatchback/5</td>\n",
       "      <td>White</td>\n",
       "      <td>1500.0</td>\n",
       "      <td>113.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  Right Rear Fender  Trunk Lid  Left R...</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>No_Info</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>AYBAR OTOMOTİV'DEN AUDİ A6</td>\n",
       "      <td>Yeşiloba Mh. Seyhan</td>\n",
       "      <td>Adana</td>\n",
       "      <td>4165000</td>\n",
       "      <td>28814613</td>\n",
       "      <td>2025-04-07</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A6</td>\n",
       "      <td>A6 Sedan 40 TDI Quattro Sport</td>\n",
       "      <td>2021.0</td>\n",
       "      <td>62000.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>Gray</td>\n",
       "      <td>1900.0</td>\n",
       "      <td>213.0</td>\n",
       "      <td>AWD</td>\n",
       "      <td>Original  Right Rear Fender  Trunk Lid  Left R...</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>No_Info</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>ELİT AUTO AUDİ A3 SEDAN 1.6 TDİ AMBİENTE S-TRO...</td>\n",
       "      <td>Merkez Şehitkamil</td>\n",
       "      <td>Gaziantep</td>\n",
       "      <td>940000</td>\n",
       "      <td>28814537</td>\n",
       "      <td>2025-04-07</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A3</td>\n",
       "      <td>A3 Sedan 1.6 TDI Ambiente</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>270000.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>White</td>\n",
       "      <td>1500.0</td>\n",
       "      <td>113.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  Right Rear Fender  Trunk Lid  Left R...</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>No_Info</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Sahibinden Hatasız Tertemiz A3 Sedan 1.0 TFSI ...</td>\n",
       "      <td>Başıbüyük Mh. Maltepe</td>\n",
       "      <td>İstanbul</td>\n",
       "      <td>1450000</td>\n",
       "      <td>28813986</td>\n",
       "      <td>2025-04-07</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A3</td>\n",
       "      <td>A3 Sedan 1.0 TFSI Sport Line</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>68000.0</td>\n",
       "      <td>Semi-Automatic</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>Black</td>\n",
       "      <td>999.0</td>\n",
       "      <td>116.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  Right Rear Fender  Trunk Lid  Left R...</td>\n",
       "      <td>Private Seller</td>\n",
       "      <td>No tram amount</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>2012 AUDI A3 1.6 TDI AMBİTİON / HATASIZ / H.KA...</td>\n",
       "      <td>Yeşiloba Mh. Seyhan</td>\n",
       "      <td>Adana</td>\n",
       "      <td>822000</td>\n",
       "      <td>28814496</td>\n",
       "      <td>2025-04-07</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A3</td>\n",
       "      <td>A3 Sportback 1.6 TDI Ambiente</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>212000.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Hatchback/5</td>\n",
       "      <td>White</td>\n",
       "      <td>1500.0</td>\n",
       "      <td>113.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  Right Rear Fender  Trunk Lid  Left R...</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>No_Info</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>ONE1CAR AUDİ A8 L 55 TFSİ QUATTRO HATASIZ BAYİ</td>\n",
       "      <td>Maslak Mh. Sarıyer</td>\n",
       "      <td>İstanbul</td>\n",
       "      <td>11750000</td>\n",
       "      <td>28814361</td>\n",
       "      <td>2025-04-07</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A8</td>\n",
       "      <td>55 TFSI Quattro Long</td>\n",
       "      <td>2022.0</td>\n",
       "      <td>57000.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>Black</td>\n",
       "      <td>2995.0</td>\n",
       "      <td>340.0</td>\n",
       "      <td>AWD</td>\n",
       "      <td>Original  Right Rear Fender  Trunk Lid  Left R...</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>No_Info</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>2019**AUDİ A4**4.0TDİ**S-line**79.000km**HATAS...</td>\n",
       "      <td>Gültepe Mh. Merkez</td>\n",
       "      <td>Sivas</td>\n",
       "      <td>2685058</td>\n",
       "      <td>28814283</td>\n",
       "      <td>2025-04-07</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A4</td>\n",
       "      <td>A4 Sedan 40 TDI S Line</td>\n",
       "      <td>2019.0</td>\n",
       "      <td>79000.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>Anthracite</td>\n",
       "      <td>1900.0</td>\n",
       "      <td>188.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  Trunk Lid  Left Rear Fender  Right R...</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>No_Info</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>Sahibinden Audi A3 Sportback 1.6</td>\n",
       "      <td>Osmangazi Mh. Osmangazi</td>\n",
       "      <td>Bursa</td>\n",
       "      <td>530000</td>\n",
       "      <td>28818183</td>\n",
       "      <td>2025-04-08</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A3</td>\n",
       "      <td>A3 Sportback 1.6 Sportback Standart</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>388000.0</td>\n",
       "      <td>Manual</td>\n",
       "      <td>LPG &amp; Gasoline</td>\n",
       "      <td>Hatchback/5</td>\n",
       "      <td>Black</td>\n",
       "      <td>1595.0</td>\n",
       "      <td>102.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  Roof  Locally Painted  Trunk Lid  Pa...</td>\n",
       "      <td>Private Seller</td>\n",
       "      <td>No tram amount</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>2011 A5 2.0 DİZEL OTOMATİK 174.000 KM SPORTBACK</td>\n",
       "      <td>Altınşehir Mh. Başakşehir</td>\n",
       "      <td>İstanbul</td>\n",
       "      <td>1125000</td>\n",
       "      <td>28814098</td>\n",
       "      <td>2025-04-07</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A5</td>\n",
       "      <td>A5 Sportback 2.0 TDI</td>\n",
       "      <td>2011.0</td>\n",
       "      <td>174000.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Coupe</td>\n",
       "      <td>Gray</td>\n",
       "      <td>1900.0</td>\n",
       "      <td>163.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  Trunk Lid  Right Front Door  Roof  L...</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>No_Info</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>GOLD CARS-2021 AUDİ A3 35 TFSI ADVANCE HYBRID+...</td>\n",
       "      <td>Adnan Kahveci Mh. Beylikdüzü</td>\n",
       "      <td>İstanbul</td>\n",
       "      <td>1799999</td>\n",
       "      <td>28813826</td>\n",
       "      <td>2025-04-07</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A3</td>\n",
       "      <td>A3 Sedan 35 TFSI Advanced</td>\n",
       "      <td>2021.0</td>\n",
       "      <td>95000.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>Black</td>\n",
       "      <td>1500.0</td>\n",
       "      <td>138.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  Trunk Lid  Left Rear Fender  Roof  L...</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>No_Info</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>Sahibinden Audi A6 Sedan 2.0 TDI 2009 Model</td>\n",
       "      <td>5000 Evler Cumhuriyet Mh. Merkez</td>\n",
       "      <td>Karabük</td>\n",
       "      <td>840000</td>\n",
       "      <td>28812622</td>\n",
       "      <td>2025-04-07</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A6</td>\n",
       "      <td>A6 Sedan 2.0 TDI</td>\n",
       "      <td>2009.0</td>\n",
       "      <td>360000.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>Black</td>\n",
       "      <td>1968.0</td>\n",
       "      <td>136.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  -  Locally Painted  -  Painted  -  R...</td>\n",
       "      <td>Private Seller</td>\n",
       "      <td>No_Info</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>2020+HATASZ+56 BİN KM LED PAKET+AÇILRCAM+PRES ...</td>\n",
       "      <td>Dikilitaş Mh. Beşiktaş</td>\n",
       "      <td>İstanbul</td>\n",
       "      <td>1489900</td>\n",
       "      <td>28813803</td>\n",
       "      <td>2025-04-07</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A3</td>\n",
       "      <td>A3 Sedan 35 TFSI Dynamic</td>\n",
       "      <td>2020.0</td>\n",
       "      <td>56500.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>Black</td>\n",
       "      <td>1500.0</td>\n",
       "      <td>138.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  Right Rear Fender  Trunk Lid  Right ...</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>No_Info</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>2025 CIKIŞ A7 45 TFSI QUATTRA 360 B&amp;O İCİ TABA...</td>\n",
       "      <td>Çakmak Mh. Ümraniye</td>\n",
       "      <td>İstanbul</td>\n",
       "      <td>7270000</td>\n",
       "      <td>28813774</td>\n",
       "      <td>2025-04-07</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A7</td>\n",
       "      <td>45 TFSI</td>\n",
       "      <td>2024.0</td>\n",
       "      <td>6100.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>Hatchback/5</td>\n",
       "      <td>Black</td>\n",
       "      <td>1900.0</td>\n",
       "      <td>263.0</td>\n",
       "      <td>AWD</td>\n",
       "      <td>Original  Right Rear Fender  Trunk Lid  Left R...</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>No_Info</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>MÜKEMMEL TEMİZLİKTE 2.0TDİ A6 SİYAH İÇİ BEJ</td>\n",
       "      <td>Yıldızevler Mh. Kocasinan</td>\n",
       "      <td>Kayseri</td>\n",
       "      <td>1795000</td>\n",
       "      <td>28813585</td>\n",
       "      <td>2025-04-07</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A6</td>\n",
       "      <td>A6 Sedan 2.0 TDI</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>311000.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>Black</td>\n",
       "      <td>1900.0</td>\n",
       "      <td>188.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  Right Rear Fender  Trunk Lid  Left R...</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>No_Info</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>VK CARS- 2011 A3 1.6TDİ OTOMATİK DEĞİŞENSİZ MA...</td>\n",
       "      <td>Beşevler Mh. Nilüfer</td>\n",
       "      <td>Bursa</td>\n",
       "      <td>755000</td>\n",
       "      <td>28813573</td>\n",
       "      <td>2025-04-07</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A3</td>\n",
       "      <td>A3 Sportback 1.6 TDI Attraction</td>\n",
       "      <td>2011.0</td>\n",
       "      <td>213000.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Hatchback/5</td>\n",
       "      <td>Black</td>\n",
       "      <td>1500.0</td>\n",
       "      <td>113.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  Right Rear Fender  Trunk Lid  Left R...</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>No_Info</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>İLK SAHİBİNDEN HATASIZ BOYASIZ</td>\n",
       "      <td>Ayvanat Mh. Siverek</td>\n",
       "      <td>Şanlıurfa</td>\n",
       "      <td>1820000</td>\n",
       "      <td>28813460</td>\n",
       "      <td>2025-04-07</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A3</td>\n",
       "      <td>A3 Sedan 30 TDI Sport</td>\n",
       "      <td>2019.0</td>\n",
       "      <td>52000.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>White</td>\n",
       "      <td>1500.0</td>\n",
       "      <td>113.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  Right Rear Fender  Trunk Lid  Left R...</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>No_Info</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>FIRSAT ARACI İLK GELEN ALIR KREDİ KARTINA 12 T...</td>\n",
       "      <td>Emiralem Merkez Mh. Menemen</td>\n",
       "      <td>İzmir</td>\n",
       "      <td>965000</td>\n",
       "      <td>28813424</td>\n",
       "      <td>2025-04-07</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A3</td>\n",
       "      <td>A3 Sedan 1.6 TDI S Line</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>276500.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>White</td>\n",
       "      <td>1500.0</td>\n",
       "      <td>113.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  Right Rear Fender  Trunk Lid  Left R...</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>No_Info</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>BAYİ 2023 MODEL AUDİ A6 45 TFSI QUATTRO SPORT ...</td>\n",
       "      <td>Acıbadem Mh. Üsküdar</td>\n",
       "      <td>İstanbul</td>\n",
       "      <td>4600000</td>\n",
       "      <td>28813287</td>\n",
       "      <td>2025-04-07</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A6</td>\n",
       "      <td>A6 Sedan 45 TFSI Quattro Sport</td>\n",
       "      <td>2023.0</td>\n",
       "      <td>45000.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>Gray</td>\n",
       "      <td>1900.0</td>\n",
       "      <td>263.0</td>\n",
       "      <td>AWD</td>\n",
       "      <td>Original  Right Rear Fender  Trunk Lid  Left R...</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>No_Info</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>\"DEĞİŞENSİZ BOYASIZ H.KAYITSIZ \"\"EKİM ÇIKIŞLI-...</td>\n",
       "      <td>Yeşilbağlar Mh. Pendik</td>\n",
       "      <td>İstanbul</td>\n",
       "      <td>3274950</td>\n",
       "      <td>28813265</td>\n",
       "      <td>2025-04-07</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A4</td>\n",
       "      <td>A4 Sedan 40 TDI Quattro Advanced</td>\n",
       "      <td>2024.0</td>\n",
       "      <td>9700.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>Black</td>\n",
       "      <td>1900.0</td>\n",
       "      <td>213.0</td>\n",
       "      <td>AWD</td>\n",
       "      <td>Original  Right Rear Fender  Trunk Lid  Left R...</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>No_Info</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>Sahibinden Audi A3 Sportback 1.4 TFSI Ambiente...</td>\n",
       "      <td>M. Alipaşa Mh. İzmit</td>\n",
       "      <td>Kocaeli</td>\n",
       "      <td>800000</td>\n",
       "      <td>28816041</td>\n",
       "      <td>2025-04-08</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A3</td>\n",
       "      <td>A3 Sportback 1.4 TFSI Ambiente</td>\n",
       "      <td>2010.0</td>\n",
       "      <td>235000.0</td>\n",
       "      <td>Semi-Automatic</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>Hatchback/5</td>\n",
       "      <td>White</td>\n",
       "      <td>1390.0</td>\n",
       "      <td>125.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  -  Locally Painted  Right Rear Fende...</td>\n",
       "      <td>Private Seller</td>\n",
       "      <td>30.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>Sahibinden Audi A3 Sportback 1.6 TDI Attractio...</td>\n",
       "      <td>Şemikler Mh. Karşıyaka</td>\n",
       "      <td>İzmir</td>\n",
       "      <td>755000</td>\n",
       "      <td>28772332</td>\n",
       "      <td>2025-04-07</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A3</td>\n",
       "      <td>A3 Sportback 1.6 TDI Attraction</td>\n",
       "      <td>2013.0</td>\n",
       "      <td>200000.0</td>\n",
       "      <td>Semi-Automatic</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Hatchback/5</td>\n",
       "      <td>White</td>\n",
       "      <td>1598.0</td>\n",
       "      <td>105.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  -  Locally Painted  Right Rear Fende...</td>\n",
       "      <td>Private Seller</td>\n",
       "      <td>3.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>Sahibinden Audi A3 Sportback 1.6 Ambiente 2003...</td>\n",
       "      <td>Doğancılı Mh. Şile</td>\n",
       "      <td>İstanbul</td>\n",
       "      <td>400000</td>\n",
       "      <td>28811622</td>\n",
       "      <td>2025-04-08</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A3</td>\n",
       "      <td>A3 Sportback 1.6 Ambiente</td>\n",
       "      <td>2003.0</td>\n",
       "      <td>208000.0</td>\n",
       "      <td>Manual</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>Hatchback/3</td>\n",
       "      <td>Silver Gray</td>\n",
       "      <td>1547.5</td>\n",
       "      <td>107.5</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  Right Rear Fender  Trunk Lid  Left R...</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>No_Info</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>Sahibinden Audi A3 Sportback 1.6 Attraction 20...</td>\n",
       "      <td>Yeni Mh. Merkez</td>\n",
       "      <td>Siirt</td>\n",
       "      <td>595000</td>\n",
       "      <td>28810447</td>\n",
       "      <td>2025-04-08</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A3</td>\n",
       "      <td>A3 Sportback 1.6 Attraction</td>\n",
       "      <td>2006.0</td>\n",
       "      <td>256060.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>LPG &amp; Gasoline</td>\n",
       "      <td>Hatchback/5</td>\n",
       "      <td>Titanium Gray</td>\n",
       "      <td>1595.0</td>\n",
       "      <td>102.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  Roof  Front Bumper  Locally Painted ...</td>\n",
       "      <td>Private Seller</td>\n",
       "      <td>8.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>Sahibinden Audi A4 Sedan 2.0 TDI 2005 Model</td>\n",
       "      <td>Hüsnü Karakaş Mh. Kepez</td>\n",
       "      <td>Antalya</td>\n",
       "      <td>520000</td>\n",
       "      <td>28808805</td>\n",
       "      <td>2025-04-08</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A4</td>\n",
       "      <td>A4 Sedan 2.0 TDI</td>\n",
       "      <td>2005.0</td>\n",
       "      <td>378000.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>Silver Gray</td>\n",
       "      <td>1968.0</td>\n",
       "      <td>140.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  -  Locally Painted  -  Painted  Righ...</td>\n",
       "      <td>Private Seller</td>\n",
       "      <td>No_Info</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>Sahibinden Audi A3 Sportback 1.6 FSI 2006 Model</td>\n",
       "      <td>Yakuplu Mh. Beylikdüzü</td>\n",
       "      <td>İstanbul</td>\n",
       "      <td>375000</td>\n",
       "      <td>28807023</td>\n",
       "      <td>2025-04-08</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A3</td>\n",
       "      <td>A3 Sportback 1.6 FSI</td>\n",
       "      <td>2006.0</td>\n",
       "      <td>307000.0</td>\n",
       "      <td>Manual</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>Hatchback/3</td>\n",
       "      <td>Black</td>\n",
       "      <td>1595.0</td>\n",
       "      <td>115.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  -  Locally Painted  Right Front Door...</td>\n",
       "      <td>Private Seller</td>\n",
       "      <td>No_Info</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>Sahibinden Audi A3 Sportback 2.0 TDI Ambition ...</td>\n",
       "      <td>Akdeniz Mh. Akdeniz</td>\n",
       "      <td>Mersin</td>\n",
       "      <td>550000</td>\n",
       "      <td>28805973</td>\n",
       "      <td>2025-04-08</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A3</td>\n",
       "      <td>A3 Sportback 2.0 TDI Ambition</td>\n",
       "      <td>2006.0</td>\n",
       "      <td>288000.0</td>\n",
       "      <td>Manual</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Hatchback/3</td>\n",
       "      <td>Black</td>\n",
       "      <td>1968.0</td>\n",
       "      <td>140.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  -  Locally Painted  Right Rear Fende...</td>\n",
       "      <td>Private Seller</td>\n",
       "      <td>No_Info</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>Sahibinden Audi A4 Sedan 2.0 TFSI Quattro 2007...</td>\n",
       "      <td>Mimar Sinan Mh. Ataşehir</td>\n",
       "      <td>İstanbul</td>\n",
       "      <td>720000</td>\n",
       "      <td>28793783</td>\n",
       "      <td>2025-04-08</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A4</td>\n",
       "      <td>A4 Sedan 2.0 TFSI Quattro</td>\n",
       "      <td>2007.0</td>\n",
       "      <td>175000.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>White</td>\n",
       "      <td>1984.0</td>\n",
       "      <td>200.0</td>\n",
       "      <td>AWD</td>\n",
       "      <td>Original  -  Locally Painted  -  Painted  Hood...</td>\n",
       "      <td>Private Seller</td>\n",
       "      <td>No tram amount</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>Sahibinden Audi A3 Sportback 1.6 FSI 2007 Model</td>\n",
       "      <td>Akbayır Mh. Karaköprü</td>\n",
       "      <td>Şanlıurfa</td>\n",
       "      <td>665000</td>\n",
       "      <td>28790433</td>\n",
       "      <td>2025-04-08</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A3</td>\n",
       "      <td>A3 Sportback 1.6 FSI</td>\n",
       "      <td>2007.0</td>\n",
       "      <td>142000.0</td>\n",
       "      <td>Manual</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>Hatchback/5</td>\n",
       "      <td>Black</td>\n",
       "      <td>1595.0</td>\n",
       "      <td>115.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  -  Locally Painted  -  Painted  Left...</td>\n",
       "      <td>Private Seller</td>\n",
       "      <td>900</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                         ListingTitle  ...       AccidentHistory\n",
       "0   2016 AUDİ A3 SPORTBACK 1.0 TFSI BOYASIZ/DEĞİŞE...  ...               No_Info\n",
       "1   2018 AUDİ A6 2.0 TDI QUATTRO SUNROOF MATRİX VA...  ...  Amount not specified\n",
       "2        Sahibinden Audi A4 Sedan 1.8 TFSI 2011 Model  ...                75.000\n",
       "3   2016 AUDI A3 AMBİENTE *CAM TAVAN LED XENON HIZ...  ...        No tram amount\n",
       "4   Sahibinden Audi A3 Sportback 1.6 TDI S-Line 20...  ...  Amount not specified\n",
       "5   2018 -A4 1.4 TFSİ -SUNROOF-DERİ -ISITMA-DEĞİŞE...  ...                37.800\n",
       "6   Galeriden Audi A3 Sedan 1.6 TDI Ambiente 2014 ...  ...                 3.295\n",
       "7           AUDİ A3 SEDAN 1.6 TDI DESİGN LİNE S-TONİC  ...               No_Info\n",
       "8   2008 MODEL AUDİ A6 2.0TDI S LINE 188.000 KM'DE...  ...               No_Info\n",
       "9   ADANZY AUTO'dan 2017 M AUDİ A3 YENİ MAKYAJLI K...  ...               No_Info\n",
       "10  Sahibinden Audi A3 Sedan 35 TFSI Design 2020 M...  ...                29.543\n",
       "11  Sahibinden Audi A3 Sedan 1.6 TDI Design Line 2...  ...               No_Info\n",
       "12  2022 AUDİ A6 40TDİ QUATTRO DESİGN -HATASIZ-BOY...  ...               No_Info\n",
       "13                     RC MOTORS tan uygun fiyatlı A4  ...               No_Info\n",
       "14       KYL MOTORS'TAN 2014 AUDİ A3 1.6 TDI AMBİTİON  ...               No_Info\n",
       "15  AUDİ A3-2018-DİZEL-OTOMATİK-SLİNE-CAM TAVAN-MA...  ...               No_Info\n",
       "16  Sahibinden Audi A3 Sportback 1.4 TFSI Ambition...  ...                21.000\n",
       "17  Sahibinden Audi A3 Sportback 35 TFSI Advanced ...  ...        No tram amount\n",
       "18  2021 HATASIZ BOYASIZ 67.000KM AUDI A3 +PREMIUM...  ...               No_Info\n",
       "19  Sahibinden Audi A6 Sedan 2.0 tfsi2007 Model 28...  ...        No tram amount\n",
       "20        Sahibinden Audi A4 Sedan 2.0 TDI 2015 Model  ...                 8.500\n",
       "21  ÇAPAN OTO AUDİ A6 MAKYAJLI SUNROOF+İÇİ BEJ+G-E...  ...               No_Info\n",
       "22  BAKIRS//2013 AUDİ A3 DEĞİŞENSİZ KUSURSUZ CAM T...  ...               No_Info\n",
       "23                         AYBAR OTOMOTİV'DEN AUDİ A6  ...               No_Info\n",
       "24  ELİT AUTO AUDİ A3 SEDAN 1.6 TDİ AMBİENTE S-TRO...  ...               No_Info\n",
       "25  Sahibinden Hatasız Tertemiz A3 Sedan 1.0 TFSI ...  ...        No tram amount\n",
       "26  2012 AUDI A3 1.6 TDI AMBİTİON / HATASIZ / H.KA...  ...               No_Info\n",
       "27     ONE1CAR AUDİ A8 L 55 TFSİ QUATTRO HATASIZ BAYİ  ...               No_Info\n",
       "28  2019**AUDİ A4**4.0TDİ**S-line**79.000km**HATAS...  ...               No_Info\n",
       "29                   Sahibinden Audi A3 Sportback 1.6  ...        No tram amount\n",
       "30    2011 A5 2.0 DİZEL OTOMATİK 174.000 KM SPORTBACK  ...               No_Info\n",
       "31  GOLD CARS-2021 AUDİ A3 35 TFSI ADVANCE HYBRID+...  ...               No_Info\n",
       "32        Sahibinden Audi A6 Sedan 2.0 TDI 2009 Model  ...               No_Info\n",
       "33  2020+HATASZ+56 BİN KM LED PAKET+AÇILRCAM+PRES ...  ...               No_Info\n",
       "34  2025 CIKIŞ A7 45 TFSI QUATTRA 360 B&O İCİ TABA...  ...               No_Info\n",
       "35        MÜKEMMEL TEMİZLİKTE 2.0TDİ A6 SİYAH İÇİ BEJ  ...               No_Info\n",
       "36  VK CARS- 2011 A3 1.6TDİ OTOMATİK DEĞİŞENSİZ MA...  ...               No_Info\n",
       "37                     İLK SAHİBİNDEN HATASIZ BOYASIZ  ...               No_Info\n",
       "38  FIRSAT ARACI İLK GELEN ALIR KREDİ KARTINA 12 T...  ...               No_Info\n",
       "39  BAYİ 2023 MODEL AUDİ A6 45 TFSI QUATTRO SPORT ...  ...               No_Info\n",
       "40  \"DEĞİŞENSİZ BOYASIZ H.KAYITSIZ \"\"EKİM ÇIKIŞLI-...  ...               No_Info\n",
       "41  Sahibinden Audi A3 Sportback 1.4 TFSI Ambiente...  ...                30.000\n",
       "42  Sahibinden Audi A3 Sportback 1.6 TDI Attractio...  ...                 3.000\n",
       "43  Sahibinden Audi A3 Sportback 1.6 Ambiente 2003...  ...               No_Info\n",
       "44  Sahibinden Audi A3 Sportback 1.6 Attraction 20...  ...                 8.000\n",
       "45        Sahibinden Audi A4 Sedan 2.0 TDI 2005 Model  ...               No_Info\n",
       "46    Sahibinden Audi A3 Sportback 1.6 FSI 2006 Model  ...               No_Info\n",
       "47  Sahibinden Audi A3 Sportback 2.0 TDI Ambition ...  ...               No_Info\n",
       "48  Sahibinden Audi A4 Sedan 2.0 TFSI Quattro 2007...  ...        No tram amount\n",
       "49    Sahibinden Audi A3 Sportback 1.6 FSI 2007 Model  ...                   900\n",
       "\n",
       "[50 rows x 21 columns]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pandas_df.head(50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "2d3f5580-bfd1-4261-a75c-f78970637821",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Brand\nRolls-Royce        3.850000e+07\nBentley            2.950000e+07\nFerrari            9.890000e+06\nPorsche            8.898750e+06\nDodge              6.989000e+06\nAston Martin       6.790000e+06\nChevrolet          3.562865e+06\nMercedes - Benz    2.939797e+06\nTesla              2.634500e+06\nDS Automobiles     1.694500e+06\nName: Price(TRY), dtype: float64\nFuelType\nElectric          6.589136e+06\nHybrid            1.622442e+06\nGasoline          1.194150e+06\nDiesel            7.686807e+05\nLPG & Gasoline    4.397595e+05\nName: Price(TRY), dtype: float64\nTransmissionType\nAutomatic         1.401085e+06\nSemi-Automatic    9.381554e+05\nManual            4.571865e+05\nName: Price(TRY), dtype: float64\nBodyType\nRoadster         4.587000e+06\nCabrio           3.898952e+06\nCoupe            3.095411e+06\nSUV              2.650000e+06\nSedan            8.090738e+05\nStation wagon    6.661714e+05\nHatchback/5      6.098976e+05\nMPV              6.073280e+05\nHatchback/3      3.995823e+05\nName: Price(TRY), dtype: float64\nCity\nArtvin        1.521208e+06\nİstanbul      1.154821e+06\nMuğla         1.023940e+06\nMuş           8.900000e+05\nAntalya       8.788823e+05\nKırşehir      8.562622e+05\nİzmir         8.395931e+05\nDiyarbakır    8.346277e+05\nBatman        8.248438e+05\nOsmaniye      8.035719e+05\nName: Price(TRY), dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print(pandas_df.groupby(\"Brand\")[\"Price(TRY)\"].mean().sort_values(ascending=False).head(10))\n",
    "print(pandas_df.groupby(\"FuelType\")[\"Price(TRY)\"].mean().sort_values(ascending=False))\n",
    "print(pandas_df.groupby(\"TransmissionType\")[\"Price(TRY)\"].mean().sort_values(ascending=False))\n",
    "print(pandas_df.groupby(\"BodyType\")[\"Price(TRY)\"].mean().sort_values(ascending=False))\n",
    "print(pandas_df.groupby(\"City\")[\"Price(TRY)\"].mean().sort_values(ascending=False).head(10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "ef1ee72f-7c2c-4051-8134-cbd13cb162fc",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "6b8c1642-70a3-4ffe-b8c2-85a0ee33d5e5",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "display_data",
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Price ile diğer sayısal kolonlar arasındaki korelasyonları al\n",
    "corr_series = pandas_df[[\"Price(TRY)\", \"Mileage(km)\", \"Year\", \"EngineSize(cc)\", \"EnginePower(HP)\"]].corr()[\"Price(TRY)\"].drop(\"Price(TRY)\")\n",
    "\n",
    "# Görselleştirme\n",
    "plt.figure(figsize=(6, 4))\n",
    "sns.barplot(x=corr_series.values, y=corr_series.index, palette=\"coolwarm\")\n",
    "\n",
    "plt.title(\"Price(TRY) ile Korelasyonlar\")\n",
    "plt.xlabel(\"Korelasyon Katsayısı\")\n",
    "plt.ylabel(\"Değişkenler\")\n",
    "plt.xlim(-1, 1)\n",
    "plt.axvline(0, color='gray', linestyle='--')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "5ad38aec-3e14-4fff-a523-70478608dba8",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "source": [
    "pozitif değerler: Price arttıkça bu değişken de artma eğiliminde (örneğin EnginePower(HP)).\n",
    "\n",
    "Negatif değerler: Price arttıkça bu değişken azalma eğiliminde (örneğin Mileage(km) olabilir).\n",
    "\n",
    "0’a yakın değerler: Neredeyse ilişkisizdir."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "3299a3ce-0cda-424a-8a9f-c2544301dfa2",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "output_type": "display_data",
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pandas_df['Brand'].value_counts().head(10).plot.bar()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "0081dbd2-90e8-45ee-8c67-3ad3c75f5116",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "display_data",
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x800 with 5 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Distribution of Numerical Features\n",
    "numerical_features = ['Price(TRY)', 'Year', 'Mileage(km)', 'EngineSize(cc)', 'EnginePower(HP)']\n",
    "\n",
    "plt.figure(figsize=(12, 8))\n",
    "for feature in numerical_features:\n",
    "    plt.subplot(3, 5, numerical_features.index(feature) + 1)\n",
    "    sns.histplot(data=pandas_df[feature], bins=20, kde=True)\n",
    "    plt.title(feature)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "f39afbc4-4598-4308-8a74-0042e792d735",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "display_data",
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABv4AAAPeCAYAAADEZ225AAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjEsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvc2/+5QAAAAlwSFlzAAAPYQAAD2EBqD+naQABAABJREFUeJzs3X98z/X+//H7ftjbfr03w341Zn6bX5M67CQRbTRFqEgm+VmbQuEoienkpCNU5IisDio6ReFg8zOMtFp+1Q4SzmFbxfZufuyHvb5/9PX69G5+2/aed7fr5fK6XLyez8fr+Xo835vLPD32er5cDMMwBAAAAAAAAAAAAOCm5uroBAAAAAAAAAAAAADcOAp/AAAAAAAAAAAAgBOg8AcAAAAAAAAAAAA4AQp/AAAAAAAAAAAAgBOg8AcAAAAAAAAAAAA4AQp/AAAAAAAAAAAAgBOg8AcAAAAAAAAAAAA4AQp/AAAAAAAAAAAAgBOg8AcAAAAAAAAAAAA4AQp/AACHqlOnjh577DFHp2HnwIEDiomJkZ+fn1xcXLR8+XJHp1RplNfXq0OHDurQoUOZjwsAAAAAv8c69NqxZgOAmweFPwCoBA4dOqRhw4apbt26qlq1qqxWq+644w7NmjVLZ8+edXR6kqQ5c+YoOTn5quNdXFzMw9XVVaGhoYqJidGmTZvKJJ/jx49r0qRJysjIKJPxfmvAgAHas2eP/vrXv+qf//ynbrvttlIxHTp0sJvjpY5JkyaVeX64PqtXr+brAQAAAPx/rEOvnaPXoZL0ww8/XHL92bZt2zLP61LK87MAANwYd0cnAAB/dKtWrdKDDz4oi8Wi+Ph4NWvWTIWFhdq6davGjBmjffv2ad68eY5OU3PmzFGNGjWu6bci77nnHsXHx8swDB0+fFhz5szR3XffrVWrVqlr1643lM/x48c1efJk1alTR1FRUTc01m+dPXtWaWlpev7555WYmHjJuOeff16DBw82z3ft2qXXX39dzz33nJo0aWK2t2jRosxyqwwyMzPl6lr2vze0bt26Mh/z91avXq3Zs2dT/AMAAMAfHuvQ6+Podehv9e3bV/fee69dW82aNcsspyspr88CAHDjKPwBgAMdPnxYffr0UXh4uDZs2KCQkBCzLyEhQQcPHtSqVascmOGNadiwoR599FHz/IEHHlCLFi00c+bMG15wlZcff/xRkuTv73/ZuHvuucfuvGrVqnr99dd1zz33XHb7k9OnT8vb2/tG03QYi8VSLuN6eHiUy7gAAAAA7LEOrXyudh36W7feeqvdPAEAuICtPgHAgaZNm6b8/HwtWLDAbrF1Qf369fX000+b58XFxZoyZYrq1asni8WiOnXq6LnnnlNBQYHddZfaYvL37zFITk6Wi4uLtm3bptGjR6tmzZry9vbWAw88YC48Lly3b98+bd682dxC5Hr29m/evLlq1Kihw4cPXzbu+++/14MPPqiAgAB5eXmpbdu2dgvPTZs26fbbb5ckDRw40MzpSlvAfP311+ratausVqt8fHzUqVMn7dixw+yfNGmSwsPDJUljxoyRi4uL6tSpc83z/O14Li4u2r9/vx555BFVq1ZN7dq1kyTt3r1bjz32mLmtTnBwsB5//HH9/PPPFx3j4MGDeuyxx+Tv7y8/Pz8NHDhQZ86csYtNSUlRu3bt5O/vLx8fHzVq1EjPPfec2b9p0ya5uLho6dKlmjx5sm655Rb5+vqqd+/eysvLU0FBgUaOHKnAwED5+Pho4MCBpb63fv89VFRUpMmTJ6tBgwaqWrWqqlevrnbt2iklJcWMycrK0sCBAxUWFiaLxaKQkBB1795dP/zwgxlzsfdF5OTkaNCgQQoKClLVqlXVsmVLvfvuu3YxF7a5+fvf/6558+aZfzduv/127dq1y4x77LHHNHv2bEn22/8YhqE6deqoe/fupb5+586dk5+fn4YNG2b3+X344Yd67rnnFBwcLG9vb91///06duxYqet37typLl26yM/PT15eXrrrrru0bdu2UnEAAABARWIdenHOsg6VLv0+vscee6zU2CUlJZo5c6aaNm2qqlWrKigoSMOGDdOpU6cuOf7lPosXX3xRVapUsftaXjB06FD5+/vr3Llzkn79Gnfr1k3r1q1TVFSUqlatqsjISH388celrs3NzdXIkSNVq1YtWSwW1a9fX6+88opKSkqu4ZMBgD8GnvgDAAf67LPPVLduXf35z3++qvjBgwfr3XffVe/evfXMM89o586dmjp1qr799lt98skn153HiBEjVK1aNb344ov64YcfNHPmTCUmJurDDz+UJM2cOVMjRoyQj4+Pnn/+eUlSUFDQNd/n1KlTOnXqlOrXr3/JmOzsbP35z3/WmTNn9NRTT6l69ep69913df/9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rqVQczHdu3dXSkqKUlNTtXPnTv3000+aPn26XF0v/ePnyJEjatSoUan2Jk2amP3X6scff9SZM2cuOW5JSclF39FWViIiIkq1nTx5Uk8//bSCgoLk6empmjVrmnF5eXml4q/0NXr44Yd1xx13aPDgwQoKClKfPn20dOnSixaYfj+Wn5+fJKlWrVql2ktKSi6azwVJSUnKzc1Vw4YN1bx5c40ZM0a7d+82+y0Wi1555RX9+9//VlBQkNq3b69p06aZC7hLOXLkiBo0aFDqe+VS3wc3+j0cHx+vbdu2meMuW7ZMRUVF6t+/f6nYBg0a2J27uLiofv365jsLLxRBBwwYoJo1a9od8+fPV0FBwWU/UwAAAKC8sA69uJtxHdqgQQN17tzZ7vjtL0NejQMHDigvL0+BgYGl1i75+fnKycm5rtwefvhhWSwW85cr8/LytHLlyov+YmX9+vVLtTVs2FCS7NZYa9asKZVj586dJem68wQAZ8U7/gDAQaxWq0JDQ7V3795ruu73/yC+FufPn79ou5ub20Xbjf//PrrrFRYWZv5D/I/st0/3XfDQQw9p+/btGjNmjKKiouTj46OSkhJ16dLlosW6K32NPD09tWXLFm3cuFGrVq3SmjVr9OGHH+ruu+/WunXr7K6/1FjX833Qvn17HTp0SCtWrNC6des0f/58zZgxQ3PnztXgwYMlSSNHjtR9992n5cuXa+3atXrhhRc0depUbdiwQa1atbrk2NfiRr+H+/Tpo1GjRmnx4sV67rnntGjRIt12220XXaRfyYWv36uvvqqoqKiLxpTFuyMBAACAa8U69I/BxcXlop/j778WJSUlCgwMtNv95Ldq1qx5XfevVq2aunXrpsWLF2vixIn66KOPVFBQUOr96VerpKRE99xzj8aOHXvR/guFQgDAryj8AYADdevWTfPmzVNaWpqio6MvGxseHq6SkhIdOHDA/K1D6deXkOfm5io8PNxsq1atmnJzc+2uLyws1IkTJ6471xtZ6F2L8PBwZWZmlmr/7rvvzP5rzadmzZry8vK65Liurq6lnnYrT6dOndL69es1efJkTZw40Wy/1HaZV8vV1VWdOnVSp06d9Nprr+nll1/W888/r40bN5brwjcgIEADBw7UwIEDlZ+fr/bt22vSpElm4U+S6tWrp2eeeUbPPPOMDhw4oKioKE2fPl2LFi266Jjh4eHavXu3SkpK7H4z9/ffB9fict8zAQEBiouL0+LFi9WvXz9t27btki+I//3XyTAMHTx4UC1atJD061ylX/9T5Y/+Hw4AAACofFiHluZs69Bq1apd9LUHv39ysV69ekpNTdUdd9xx0V9YvZwrfRbx8fHq3r27du3apcWLF6tVq1Zq2rRpqbiDBw/KMAy78f7zn/9IkurUqWPmmZ+fz/oKAK4SW30CgAONHTtW3t7eGjx4sLKzs0v1Hzp0SLNmzZIk3XvvvZJUqhjx2muvSZLi4uLMtnr16pXa437evHmX/E3Lq+Ht7V1qEVce7r33Xn3xxRdKS0sz206fPq158+apTp06ioyMNPORdFU5ubm5KSYmRitWrDC3CpF+XawuWbJE7dq1M7e8qQgXfrP197+BealC09U4efJkqbYLT5sVFBRc97hX8vPPP9ud+/j4qH79+uY9z5w5o3PnztnF1KtXT76+vpfN695771VWVpY+/PBDs624uFhvvPGGfHx8Sr0X4mpc6Xumf//+2r9/v8aMGSM3Nzf16dPnonHvvfee3dZIH330kU6cOKGuXbtKklq3bq169erp73//u/Lz80td/+OPP15z7gAAAEBZYR1amrOtQ+vVq6fvvvvObu3xzTffaNu2bXZxDz30kM6fP68pU6aUGqO4uPiy87zSZ9G1a1fVqFFDr7zyijZv3nzJp/2OHz+uTz75xDy32Wx67733FBUVpeDgYDPPtLQ0rV27ttT1ubm5l30vPQD8EfHEHwA4UL169bRkyRI9/PDDatKkieLj49WsWTMVFhZq+/btWrZsmR577DFJUsuWLTVgwADNmzdPubm5uuuuu/TFF1/o3XffVY8ePdSxY0dz3MGDB2v48OHq1auX7rnnHn3zzTdau3atatSocd25tm7dWm+99ZZeeukl1a9fX4GBgbr77rtv9CMo5S9/+Yvef/99de3aVU899ZQCAgL07rvv6vDhw/rXv/5lPv1Vr149+fv7a+7cufL19ZW3t7fatGlz0ffpSdJLL72klJQUtWvXTk8++aTc3d31j3/8QwUFBZo2bVqZz+NyrFar+a67oqIi3XLLLVq3bp0OHz583WMmJSVpy5YtiouLU3h4uHJycjRnzhyFhYXZvaC+rEVGRqpDhw5q3bq1AgIC9OWXX+qjjz5SYmKipF9/U7NTp0566KGHFBkZKXd3d33yySfKzs6+ZGFN+vVF9f/4xz/02GOPKT09XXXq1NFHH31kPonn6+t7zbm2bt1akvTUU08pNja2VHEvLi5O1atX17Jly9S1a1cFBgZedJyAgAC1a9dOAwcOVHZ2tmbOnKn69etryJAhkn598nL+/Pnq2rWrmjZtqoEDB+qWW27R//73P23cuFFWq1WfffbZNecPAAAAlAXWoaU52zr08ccf12uvvabY2FgNGjRIOTk5mjt3rpo2bSqbzWbG3XXXXRo2bJimTp2qjIwMxcTEqEqVKjpw4ICWLVumWbNmqXfv3he9x5U+iypVqqhPnz5688035ebmpr59+150nIYNG2rQoEHatWuXgoKC9M477yg7O1sLFy40Y8aMGaNPP/1U3bp102OPPabWrVvr9OnT2rNnjz766CP98MMPN/R9BgBOxwAAONx//vMfY8iQIUadOnUMDw8Pw9fX17jjjjuMN954wzh37pwZV1RUZEyePNmIiIgwqlSpYtSqVcsYP368XYxhGMb58+eNcePGGTVq1DC8vLyM2NhY4+DBg0Z4eLgxYMAAM27hwoWGJGPXrl1212/cuNGQZGzcuNFsy8rKMuLi4gxfX19DknHXXXdddk6SjISEhCvO/fc5GYZhHDp0yOjdu7fh7+9vVK1a1fjTn/5krFy5stS1K1asMCIjIw13d3dDkrFw4cLL3uurr74yYmNjDR8fH8PLy8vo2LGjsX37druYw4cPG5KMV1999Yq5/9ayZctKfWYvvviiIcn48ccfS8X/97//NR544AHD39/f8PPzMx588EHj+PHjhiTjxRdfvOIYF752hw8fNgzDMNavX290797dCA0NNTw8PIzQ0FCjb9++xn/+8x/zmgtf12XLll10rN9/H1zs3r//er300kvGn/70J8Pf39/w9PQ0GjdubPz1r381CgsLDcMwjJ9++slISEgwGjdubHh7ext+fn5GmzZtjKVLl9rd66677ir1PZWdnW0MHDjQqFGjhuHh4WE0b9681Nf4cl+v33+WxcXFxogRI4yaNWsaLi4uxsX+GfTkk08akowlS5aU6rvw+b3//vvG+PHjjcDAQMPT09OIi4szjhw5Uir+66+/Nnr27GlUr17dsFgsRnh4uPHQQw8Z69evLxULAAAAVDTWoQPs2m6WdejVxi5atMioW7eu4eHhYURFRRlr1641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S7p+MELWFB8fr6ioKP3111/as2ePPvjgAzVv3lxNmzZVp06dUvRv37698uTJo+bNm+vXX39VZGSkQkND1b9/f/3555+KjIzU8OHDFRYWplOnTmnt2rU6duyY+dx999139fXXX2vMmDE6dOiQjhw5ou+++y7F93TgVjlz5tQrr7yiIUOGqEGDBqke4PDZZ59p2bJlOnr0qIKDg3Xp0iV17do1Tdt54403NGHCBC1fvlxHjx5Vnz597nqWGDJeTExMigN8bz1J4G4++OADFShQQM8++6y++uor7d+/XydOnNCyZcsUFhaWIi+4VXL+HxwcrIMHD2rv3r3avHmznJ2dzd8g7qRt27Zq1aqV2rZtq7Fjx+q3337TyZMntXnzZi1cuNBmu/fKD0JCQjR79mwdPHhQf/zxh+bNmydXV1f5+fmpZMmSat68uXr06KEtW7Zo37596tChgwoUKKDmzZvf12N0L6VKlVL79u3VqVMnLV26VJGRkdqxY4fGjx+vlStXZsg2kFLyZ/Gtt9QOGL3XZ7B0c9raSZMm6ZNPPtGxY8e0Z88effrpp+YYyYXBqKioNB0AW6RIEQUFBalr165avny5ue1FixY9+ANgRyj84bE0e/Zs1a9f3+YovmQtW7bUrl279Oeff2revHn6+eefVaFCBX377bcaPXp0ir4NGzZUnTp1lDdvXn377beyWCz64YcflDNnTr3wwguqX7++ihUrpoULFz5QzJUqVdLkyZP14Ycfqnz58po/f77Gjx9v06dGjRrq1auX2rRpo7x582rixImpjrVkyRI988wzateuncqWLauhQ4eS8MKueXh4qFq1avr444/1wgsvqHz58ho5cqR69OihadOmyWKx6Oeff9YLL7ygLl26qFSpUmrbtq1OnTolb2/vhxbX119/LXd391TnLK9Xr55cXV01b948SdJXX32lGzduqGrVqhowYIDee+89m/4FChTQmDFj9NZbb8nb29s8im/ChAlq2bKlOnbsqCpVquj48eNas2aNcubMme64HRwc9N1332n37t0qX768Bg4cqI8++simT7Zs2fTJJ5/o888/l6+v7x2/vI8cOVJvvvmm3n33Xfn7+6tNmzZpuu4Y8CSwWq2yWq0p2u/ntXg//P39NX36dH322WeqVKmSduzYocGDB9v0mT17ti5duqQqVaqoY8eO6t+/f4rp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q1WNGjXSvn37bLaf2jX+OnfuLA8PD/31119q0aKFPDw8lDdvXg0ePDjLXPYCADIDZ/wBwBPup59+UrFixVSjRo376t+9e3fNnTtXrVq10ptvvqnffvtN48eP15EjR7Rs2bJ0x9GvXz/lzJlTo0aN0smTJzVlyhT17dtXCxculCRNmTJF/fr1k4eHh9555x1Jkre3d5q3c+nSJV26dEklSpS4Y5/o6GjVqFFD//33n/r376/cuXNr7ty5eumll/T999/r5Zdflr+/v8aOHat3331XPXv21PPPPy9Jd30cDx06pOeff15Wq1VDhw6Vk5OTPv/8c9WuXVubN29WtWrV9MorryhHjhwaOHCgOaWLh4fHPffrv//+099//y1Jio2N1apVq7R69WoNHz7cpt/o0aM1ZswY1a9fX71791ZERIRmzJihnTt3auvWrea0KbNnz9brr7+uGjVqaMCAAfrjjz/00ksvKVeuXCpUqJAkycPDQy+//LIWLlyoyZMn2xw9+u2338owDLVv3143btxQ//799cknn+jtt9+Wv7+/JMnf318dO3bU119/rTVr1qhp06bm+lFRUdq4caNGjRplE//mzZu1cOFC9e/fXy4uLpo+fboaNmyoHTt2qHz58ubfr3r16mahMG/evFq1apW6deum2NjYhzLtDAAAAJDVkOul9DjmencSEBCg4sWLa926dSmW9enTR3nz5tW7776rK1eupLp+mzZt1KlTJ+3cudMsdEo3zybcvn27zcwx77//vkaOHKnWrVure/fuunDhgj799FO98MIL2rt3r3LkyKF33nlHMTEx+vPPP/Xxxx9LUor9GzdunJydnTV48GDFx8fL2dlZhw8f1vLly/Xqq6+qaNGiio6O1ueff65atWrp8OHD8vX1vevjkJiYqMDAQFWrVk3/+9//tH79ek2aNEnFixdX79697/vxBAC7YgAAnlgxMTGGJKN58+b31T88PNyQZHTv3t2mffDgwYYkY+PGjWabJGPUqFEpxvDz8zOCgoLM+3PmzDEkGfXr1zeSkpLM9oEDBxqOjo7G5cuXzbZy5coZtWrVuq9Yk2Po1q2bceHCBeP8+fPGb7/9ZtSrV8+QZEyaNOmOMQ0YMMCQZPz6669m27///msULVrUKFKkiJGYmGgYhmHs3LnTkGTMmTPnvuJp0aKF4ezsbJw4ccJsO3v2rOHp6Wm88MILZltkZKQhyfjoo4/uOWZy39RuvXv3tnlMz58/bzg7OxsNGjQw98EwDGPatGmGJOOrr74yDMMwEhISjHz58hlPPfWUER8fb/abNWuWIcnmb7BmzRpDkrFq1SqbuCpWrGjTb/HixYYkY9OmTTb9EhMTjYIFCxpt2rSxaZ88ebJhsViMP/74w2xL3q9du3aZbadOnTKyZ89uvPzyy2Zbt27djPz58xt///23zZht27Y1vLy8jP/+++9ODycAAABgF8j1Uo/pccz17ta3efPmhiQjJibGMIz/e8yfe+4548aNGzZ9k5dFRkYahnHzOeLi4mK8+eabNv0mTpxoWCwW49SpU4ZhGMbJkycNR0dH4/3337fpd+DAASNbtmw27U2aNDH8/PxSxLlp0yZDklGsWLEU+di1a9ds8tPkfXdxcTHGjh2b4vG49W8SFBRkSLLpZxiGUblyZaNq1aop4gCAJwVTfQLAEyw2NlaS5OnpeV/9f/75Z0nSoEGDbNrffPNNSXqg60P07NlTFovFvP/8888rMTFRp06dSveY0s0z1/Lmzat8+fKpWrVq5jQzdzvr6+eff9azzz6r5557zmzz8PBQz549dfLkSR0+fDjNcSQmJmrt2rVq0aKFzXQq+fPn12uvvaYtW7aYf4/06Nmzp9atW6d169ZpyZIlCg4O1ueff27zt1q/fr0SEhI0YMAAm+so9OjRQ1ar1fz77dq1S+fPn1evXr3k7Oxs9uvcubO8vLxstlu/fn35+vpq/vz5ZtvBgwe1f//+FNehSI2Dg4Pat2+vH3/8Uf/++6/ZPn/+fNWoUUNFixa16R8QEKCqVaua9wsXLqzmzZtrzZo1SkxMlGEYWrJkiZo1aybDMPT333+bt8DAQMXExGjPnj33jAsAAAB4nJHrpe5xzPXuJvmMultzKelmjnev6/klT6m5aNEiGYZhti9cuFDVq1dX4cKFJUlLly5VUlKSWrdubZNf+fj4qGTJktq0adN9xxsUFCRXV1ebNhcXFzM/TUxM1D///CMPDw+VLl36vnO3Xr162dx//vnn9ccff9x3XABgb5jqEwCeYFarVVLKJOFOTp06JQcHhxRTp/j4+ChHjhwPlLglJxXJcubMKenmdC0Ponnz5urbt68sFos8PT1Vrlw5ubu733WdU6dOqVq1ainak6eoPHXqlDmt5P26cOGC/vvvP5tr1t06blJSks6cOaNy5cqladxkJUuWVP369c37r7zyiiwWi6ZMmaKuXbuqQoUK5t/n9hicnZ1VrFgxc3nyvyVLlrTp5+TklOIaEMmFuxkzZui///6Tm5ub5s+fr+zZs5vX9buXTp066cMPP9SyZcvUqVMnRUREaPfu3Zo5c2aq+3m7UqVK6b///tOFCxfk4OCgy5cva9asWZo1a1aq2zt//vx9xQUAAAA8rsj1Uvc45np3ExcXJyllgff2AyjvpE2bNlq+fLnCwsJUo0YNnThxQrt379aUKVPMPseOHZNhGKnmYpLMy0Xcj9TiSkpK0tSpUzV9+nRFRkbaXJsvd+7c9xwze/bsyps3r01bzpw5H/j5BQCPMwp/APAEs1qt8vX11cGDB9O03q1Ha6bVnS6wfaejEW898jA9ChYsaFMQe5LUq1dP06ZN0y+//KIKFSo8tO106tRJH330kZYvX6527dppwYIFatq0aYqzA++kbNmyqlq1qubNm6dOnTpp3rx5cnZ2VuvWrdMcS1JSkiSpQ4cOCgoKSrVPxYoV0zwuAAAA8Dgh13syHDx4UPny5TMLvcluP6vuTpo1ayY3NzctWrRINWrU0KJFi+Tg4GBzEGdSUpIsFotWrVqV6t8yLdcpTC2uDz74QCNHjlTXrl01btw45cqVSw4ODhowYICZ393Nvc5sBIAnEYU/AHjCNW3aVLNmzVJYWJgCAgLu2tfPz09JSUk6duyYeUSkdPMC6ZcvX5afn5/ZljNnTl2+fNlm/YSEBJ07dy7dsT5IEpoWfn5+ioiISNF+9OhRc3la48mbN6/c3NzuOK6Dg4MKFSqUzohTd+PGDUn/dxRoctwRERE2Z+4lJCQoMjLSTJqT+x07dkx169Y1+12/fl2RkZGqVKmSzXbKly+vypUra/78+SpYsKBOnz6tTz/91KbPvR6rTp06adCgQTp37pwWLFigJk2amEcC3+rYsWMp2n7//Xe5ubmZR3l6enoqMTHxif8RAAAAAE82cr2U7CXXk6SwsDCdOHHivi6xcCfu7u5q2rSpFi9erMmTJ2vhwoV6/vnn5evra/YpXry4DMNQ0aJFVapUqbuOl56/4/fff686depo9uzZNu2XL19Wnjx50jweAEDiGn8A8IQbOnSo3N3d1b17d0VHR6dYfuLECU2dOlWS1LhxY0mymfZDkiZPnixJatKkidlWvHhx/fLLLzb9Zs2adcejQO+Hu7t7igTzYWjcuLF27NihsLAws+3KlSuaNWuWihQporJly5rxSLqvmBwdHdWgQQP98MMPOnnypNkeHR2tBQsW6LnnnktxlOaD+umnnyTJLNTVr19fzs7O+uSTT2yOrp09e7ZiYmLMv9/TTz+tvHnzaubMmUpISDD7hYSE3HFfO3bsqLVr12rKlCnKnTu3GjVqZLP8Xo9Vu3btZLFY9MYbb+iPP/64Y/IaFhZmc52HM2fO6IcfflCDBg3k6OgoR0dHtWzZUkuWLEn16OYLFy6kOi4AAABgb8j1UrKXXO/UqVPq3LmznJ2dNWTIkAcaq02bNjp79qy+/PJL7du3T23atLFZ/sorr8jR0VFjxoxJcZamYRj6559/zPvu7u6KiYlJ0/YdHR1TjLt48WL99ddfadwTAEAyzvgDgCdc8eLFtWDBArVp00b+/v7q1KmTypcvr4SEBG3btk2LFy9W586dJd0sIAUFBWnWrFm6fPmyatWqpR07dmju3Llq0aKF6tSpY47bvXt39erVSy1bttSLL76offv2ac2aNQ90xF7VqlU1Y8YMvffeeypRooTy5ctnc0ZaRnnrrbf07bffqlGjRurfv79y5cqluXPnKjIyUkuWLDEvPF68eHHlyJFDM2fOlKenp9zd3VWtWrU7Xk/hvffe07p16/Tcc8+pT58+ypYtmz7//HPFx8dr4sSJDxTznj17NG/ePEk3r+OxYcMGLVmyRDVq1FCDBg0k3TwSdfjw4RozZowaNmyol156SREREZo+fbqeeeYZs9jm5OSk9957T6+//rrq1q2rNm3aKDIyUnPmzElxjb9kr732moYOHaply5apd+/eKa7z8NRTT8nR0VEffvihYmJi5OLiorp16ypfvnxmbA0bNtTixYuVI0cOmx8WblW+fHkFBgaqf//+cnFx0fTp0yVJY8aMMftMmDBBmzZtUrVq1dSjRw+VLVtWFy9e1J49e7R+/XpdvHjxAR5pAAAA4PFArpfS45zrJSUl6fLly9q5c6eWLFkii8Wib7755oEvZdC4cWN5enpq8ODB5oGUtypevLjee+89DR8+XCdPnlSLFi3k6empyMhILVu2TD179tTgwYMl3fw7Lly4UIMGDdIzzzwjDw8PNWvW7K7bb9q0qcaOHasuXbqoRo0aOnDggObPn3/H3BMAcB8MAAAMw/j999+NHj16GEWKFDGcnZ0NT09Po2bNmsann35qXLt2zex3/fp1Y8yYMUbRokUNJycno1ChQsbw4cNt+hiGYSQmJhrDhg0z8uTJY7i5uRmBgYHG8ePHDT8/PyMoKMjsN2fOHEOSsXPnTpv1N23aZEgyNm3aZLZFRUUZTZo0MTw9PQ1JRq1ate66T5KM4ODge+777TEZhmGcOHHCaNWqlZEjRw4je/bsxrPPPmusWLEixbo//PCDUbZsWSNbtmyGJGPOnDl33daePXuMwMBAw8PDw3BzczPq1KljbNu2zaZPZGSkIcn46KOP7hl7ct9bb9myZTOKFStmDBkyxPj3339TrDNt2jSjTJkyhpOTk+Ht7W307t3buHTpUop+06dPN4oWLWq4uLgYTz/9tPHLL78YtWrVuuPj3rhxY0NSiv1J9sUXXxjFihUzHB0dU/xtDcMwFi1aZEgyevbsmer6yX/PefPmGSVLljRcXFyMypUrpxjHMAwjOjraCA4ONgoVKmQ4OTkZPj4+Rr169YxZs2alOjYAAABgr8j1gmzaHtdcL1u2bEauXLmMatWqGcOHDzdOnTqVYp07Pea3LouMjEyxrH379oYko379+neMZ8mSJcZzzz1nuLu7G+7u7kaZMmWM4OBgIyIiwuwTFxdnvPbaa0aOHDkMSYafn59hGP/3N1+8eHGKca9du2a8+eabRv78+Q1XV1ejZs2aRlhYWIrcM/nxuPXvEBQUZLi7u6cYc9SoUQY/ewN4klkM4wGvpAsAACDp5Zdf1oEDB3T8+PF0rf/DDz+oRYsW+uWXX/T888+nWG6xWBQcHKxp06Y9aKgAAAAAAACAXeIafwAA4IGdO3dOK1euVMeOHdM9xhdffKFixYrpueeey8DIAAAAAAAAgCcH1/gDAADpFhkZqa1bt+rLL7+Uk5OTXn/99TSP8d1332n//v1auXKlpk6dKovF8hAiBQAAAAAAAOwfhT8AAJBumzdvVpcuXVS4cGHNnTtXPj4+aR6jXbt28vDwULdu3dSnT5+HECUAAAAAAADwZOAafwAAAAAAAAAAAIAd4Bp/AAAAAAAAAAAAgB2g8AcAAAAAAAAAAADYAQp/AAAAAAAAAAAAgB3IltkBPA6SkpJ09uxZeXp6ymKxZHY4AAAAAGDDMAz9+++/8vX1lYMDx3emFTkfAAAAgKwsLTkfhb/7cPbsWRUqVCizwwAAAACAuzpz5owKFiyY2WE8dsj5AAAAADwO7ifno/B3Hzw9PSXdfECtVmsmRwMAAAAAtmJjY1WoUCEzd0HakPMBAAAAyMrSkvNR+LsPyVO9WK1WkkAAAAAAWRbTVKYPOR8AAACAx8H95Hxc/AEAAAAAAAAAAACwAxT+AAAAAAAAAAAAADtA4Q8AAAAAAAAAAACwAxT+AAAAAAAAAAAAADtA4Q+4Rb9+/VSoUCFZrVYVKFBAAwYMUEJCgiSpdu3acnFxkYeHh3k7e/asue7dlp8/f17t27dXwYIFZbVaVblyZf3444+Zso8AAAAA8CTq3LmznJ2dbXK2sLAwc/mJEyfUqFEj5cyZUwUKFNDEiRNt1h85cqQqVKigbNmyacCAATbL4uPjVbt2beXLl09Wq1VlypTRrFmzHsVuAQAAADYo/AG36NOnj44eParY2Fjt27dP+/bts0n2PvzwQ8XFxZk3X19fm/XvtDwuLk6VK1fW9u3bdfnyZY0dO1bt2rXT4cOHH+n+AQAAAMCTrE+fPjY5W0BAgCQpMTFRL730kqpUqaLz589r48aNmjZtmhYsWGCuW6JECU2cOFEvvfRSinGzZcumTz/9VGfPnlVsbKyWLl2qkSNH6tdff31k+wYAAABIFP4AG/7+/nJ3d5ckGYYhBwcHHTt27IHHLVasmAYPHqyCBQvKwcFBzZo1U+nSpbV9+/YHHhsAAADIqv766y916NBBuXPnlqurqypUqKBdu3aZyw3D0Lvvvqv8+fPL1dVV9evXT/H9++LFi2rfvr2sVqty5Mihbt26KS4uzqbP/v379fzzzyt79uwqVKhQijO1gHuJiIhQRESERo0aJScnJ5UuXVrdunWzOWsvKChIjRo1ktVqTbG+o6OjeTagJFksFlksFh0/fvyR7QMAAAAgUfgDUpgwYYI8PDyUL18+7du3T/369TOXvffee8qVK5cqV66sr7/+OsW691qe7Pz58zpy5IgqVqz4UPYBAAAAyGyXLl1SzZo15eTkpFWrVunw4cOaNGmScubMafaZOHGiPvnkE82cOVO//fab3N3dFRgYqGvXrpl92rdvr0OHDmndunVasWKFfvnlF/Xs2dNcHhsbqwYNGsjPz0+7d+/WRx99pNGjRzPNIlL19ddfK1euXCpXrpwmTZqkpKQkSTL/NQzD7JuUlKT9+/enafymTZsqe/bsKlu2rLy9vfXyyy9nXPAAAADAfbAYt36rRapiY2Pl5eWlmJiYVI/sg306cuSI5s+fr169eqlgwYIKCwtT2bJl5ebmpo0bN6p169YKCQkxE7l7LU+WkJCghg0bqlChQpo7d25m7BoAAADsTFbMWd566y1t3br1jlMdGoYhX19fvfnmmxo8eLAkKSYmRt7e3goJCVHbtm115MgRlS1bVjt37tTTTz8tSVq9erUaN26sP//8U76+vpoxY4beeecdRUVFydnZ2dz28uXLdfTo0fuKNSs+fsh4e/bsUaFChZQrVy7t3LlTrVu31sCBAzVw4EBdv35d/v7+atmypcaOHavjx4+rYcOGOnfunG7cuGEzTufOnZUjRw5NmTIl1e0kJiZqy5Yt2rx5s4YNGyYXF5dHsHcAAACwZ2nJWTjjD7gDf39/VapUSZ07d5YkBQQEyMvLS05OTgoMDNTrr7+uhQsXmv3vtVy6WfRr1aqV3Nzc9MUXXzzK3QEAAAAeqR9//FFPP/20Xn31VeXLl0+VK1e2+Q4cGRmpqKgo1a9f32zz8vJStWrVFBYWJunmwXU5cuQwi36SVL9+fTk4OOi3334z+7zwwgtm0U+SAgMDFRERoUuXLj3s3cRjpEqVKsqbN68cHR1VvXp1vfXWW2bO5uTkpB9++EF79+5VgQIF1L59e3Xp0kW5c+dO83YcHR1Vq1YtRUdH66OPPsro3QAAAADuisIfcBfXr1+/4zX+HBzu/vK5fXlCQoJeffVVJSQkaMmSJTY/TAAAAAD25o8//tCMGTNUsmRJrVmzRr1791b//v3NWS+ioqIkSd7e3jbreXt7m8uioqKUL18+m+XZsmVTrly5bPqkNsat27hdfHy8YmNjbW548tyes5UrV05r167V33//rfDwcMXHx6tWrVrpHv9u+SQAAADwsFD4A/6/uLg4zZkzR5cvX5ZhGDpw4IDee+89BQYG6vLly/r555/133//KTExURs2bNDMmTPVsmVLSbrn8uvXr6t169a6cuWKli9fzlQvAAAAsHtJSUmqUqWKPvjgA1WuXFk9e/ZUjx49NHPmzMwOTePHj5eXl5d5K1SoUGaHhEdg0aJFio2NlWEY2rVrlyZMmGDmbJK0f/9+XblyRQkJCVq6dKm++uorjRgxwlx+/fp1Xbt2TYmJiUpMTNS1a9d0/fp1SVJ4eLjWrVunq1ev6saNG1q5cqXmz5+vwMDAR76fAAAAeLJR+AP+P4vFogULFqh48eLy9PRU8+bN1aRJE02ZMkXXr1/XmDFj5OPjo5w5c2rgwIGaPHmyXn31VUm65/Jt27bphx9+0NatW5UnTx55eHjIw8NDH3zwQWbuMgAAAPDQ5M+fX2XLlrVp8/f31+nTpyVJPj4+kqTo6GibPtHR0eYyHx8fnT9/3mb5jRs3dPHiRZs+qY1x6zZuN3z4cMXExJi3M2fOpGcX8ZiZNm2aChcuLE9PT7Vv3159+vTRm2++aS5ftGiRChcurJw5c+p///ufli9frooVK5rLe/ToIVdXV82bN0/Tpk2Tq6urevToIenm8/Ltt9+Wt7e3cufOrbfffluTJ0/Wa6+99sj3EwAAAE82i2EYRmYHkdVxoXcAAAAAWVlWzFlee+01nTlzRr/++qvZNnDgQP3222/atm2bDMOQr6+vBg8ebBZfYmNjlS9fPoWEhKht27Y6cuSIypYtq127dqlq1aqSpLVr16phw4b6888/5evrqxkzZuidd95RdHS0nJycJElvv/22li5dqqNHj95XrFnx8QMAAACAZGnJWTjjDwAAAACQ4QYOHKjt27frgw8+0PHjx7VgwQLNmjVLwcHBkm7OuDFgwAC99957+vHHH3XgwAF16tRJvr6+atGihaSbZwg2bNhQPXr00I4dO7R161b17dtXbdu2la+vr6SbBUZnZ2d169ZNhw4d0sKFCzV16lQNGjQos3YdAAAAADJNtswOAAAAAABgf5555hktW7ZMw4cP19ixY1W0aFFNmTJF7du3N/sMHTpUV65cUc+ePXX58mU999xzWr16tbJnz272mT9/vvr27at69erJwcFBLVu21CeffGIu9/Ly0tq1axUcHKyqVasqT548evfdd9WzZ89Hur8AAAAAkBUw1ed9YNqXrCdhpEtmh5ClOY+Lz+wQAAAA8AiRszyYR/34udZNeOjbAJ5kVzc6Z3YIAAAAGYqpPgEAAAAAAAAAAIAnTKYW/mbMmKGKFSvKarXKarUqICBAq1atMpfXrl1bFovF5tarVy+bMU6fPq0mTZrIzc1N+fLl05AhQ3Tjxg2bPqGhoapSpYpcXFxUokQJhYSEPIrdAwAAAAAAAAAAAB6ZTL3GX8GCBTVhwgSVLFlShmFo7ty5at68ufbu3aty5cpJknr06KGxY8ea67i5uZn/T0xMVJMmTeTj46Nt27bp3Llz6tSpk5ycnPTBBx9IkiIjI9WkSRP16tVL8+fP14YNG9S9e3flz59fgYGBj3aHAQAAAAAAAAAAgIckUwt/zZo1s7n//vvva8aMGdq+fbtZ+HNzc5OPj0+q669du1aHDx/W+vXr5e3traeeekrjxo3TsGHDNHr0aDk7O2vmzJkqWrSoJk2aJEny9/fXli1b9PHHH1P4AwAAAAAAAAAAgN3IMtf4S0xM1HfffacrV64oICDAbJ8/f77y5Mmj8uXLa/jw4frvv//MZWFhYapQoYK8vb3NtsDAQMXGxurQoUNmn/r169tsKzAwUGFhYXeMJT4+XrGxsTY3AAAAAAAAAAAAICvL1DP+JOnAgQMKCAjQtWvX5OHhoWXLlqls2bKSpNdee01+fn7y9fXV/v37NWzYMEVERGjp0qWSpKioKJuinyTzflRU1F37xMbG6urVq3J1dU0R0/jx4zVmzJgM31cAAAAAAAAAAADgYcn0wl/p0qUVHh6umJgYff/99woKCtLmzZtVtmxZ9ezZ0+xXoUIF5c+fX/Xq1dOJEydUvHjxhxbT8OHDNWjQIPN+bGysChUq9NC2BwAAAAAAAAAAADyoTJ/q09nZWSVKlFDVqlU1fvx4VapUSVOnTk21b7Vq1SRJx48flyT5+PgoOjrapk/y/eTrAt6pj9VqTfVsP0lycXGR1Wq1uQEAAAAAAAAAAABZWaYX/m6XlJSk+Pj4VJeFh4dLkvLnzy9JCggI0IEDB3T+/Hmzz7p162S1Ws3pQgMCArRhwwabcdatW2dzHUEAAAAAAAAAAADgcZepU30OHz5cjRo1UuHChfXvv/9qwYIFCg0N1Zo1a3TixAktWLBAjRs3Vu7cubV//34NHDhQL7zwgipWrChJatCggcqWLauOHTtq4sSJioqK0ogRIxQcHCwXFxdJUq9evTRt2jQNHTpUXbt21caNG7Vo0SKtXLkyM3cdAAAAAAAAAAAAyFCZWvg7f/68OnXqpHPnzsnLy0sVK1bUmjVr9OKLL+rMmTNav369pkyZoitXrqhQoUJq2bKlRowYYa7v6OioFStWqHfv3goICJC7u7uCgoI0duxYs0/RokW1cuVKDRw4UFOnTlXBggX15ZdfKjAwMDN2GQAAAAAAAAAAAHgoLIZhGJkdRFYXGxsrLy8vxcTEcL2/LCJhpEtmh5ClOY9LfbpcAAAA2CdylgfzqB8/17oJD30bwJPs6kbnzA4BAAAgQ6UlZ8ly1/gDAAAAAAAAAAAAkHYU/gAAAAAAAAAAAAA7QOEPAAAAAAAAAAAAsAMU/gAAAAAAAAAAAAA7QOEPAAAAAAAAAAAAsAMU/gAAAAAAAAAAAAA7QOEPAAAAAAAAAAAAsAMU/gAAAAAAAAAAAAA7QOEPAAAAAAAAAAAAsAMU/gAAAAAAAAAAAAA7QOEPAAAAAAAAAAAAsAMU/gAAAAAAAAAAAAA7QOEPAAAAAAAAAAAAsAMU/gAAAAAAAAAAAAA7QOEPAAAAAAAAAAAAsAMU/gAAAAAAAAAAAAA7QOEPAAAAAAAAAAAAsAMU/gAAAAAAAAAAAAA7QOEPAAAAAAAAAAAAsAMU/gAAAAAAAAAAAAA7QOEPAAAAAAAAAAAAsAMU/gAAAAAAAAAAAAA7QOEPAAAAAAAAAAAAsAMU/gAAAAAAAAAAAAA7QOEPAAAAAAAAAAAAsAMU/gAAAAAAAAAAAAA7QOEPAAAAAAAAAAAAsAMU/gAAAAAAAAAAAAA7QOEPAAAAAAAAAAAAsAMU/gAAAAAAAAAAAAA7QOEPAAAAAAAAAAAAsAMU/gAAAAAAAAAAAAA7QOEPAAAAAAAAAAAAsAMU/gAAAAAAAAAAAAA7QOEPAAAAAAAAAAAAsAMU/gAAAAAAAAAAAAA7QOEPAAAAAAAAAAAAsAMU/gAAAAAAAAAAAAA7QOEPAAAAAAAAAAAAsAMU/gAAAAAAAAAAAAA7QOEPAAAAAAAAAAAAsAMU/gAAAAAAAAAAAAA7QOEPAAAAAAAAAAAAsAMU/gAAAAAAAAAAAAA7kKmFvxkzZqhixYqyWq2yWq0KCAjQqlWrzOXXrl1TcHCwcufOLQ8PD7Vs2VLR0dE2Y5w+fVpNmjSRm5ub8uXLpyFDhujGjRs2fUJDQ1WlShW5uLioRIkSCgkJeRS7BwAAAABPrNGjR8tisdjcypQpYy4n3wMAAACAjJephb+CBQtqwoQJ2r17t3bt2qW6deuqefPmOnTokCRp4MCB+umnn7R48WJt3rxZZ8+e1SuvvGKun5iYqCZNmighIUHbtm3T3LlzFRISonfffdfsExkZqSZNmqhOnToKDw/XgAED1L17d61Zs+aR7y8AAAAAPEnKlSunc+fOmbctW7aYy8j3AAAAACDjWQzDMDI7iFvlypVLH330kVq1aqW8efNqwYIFatWqlSTp6NGj8vf3V1hYmKpXr65Vq1apadOmOnv2rLy9vSVJM2fO1LBhw3ThwgU5Oztr2LBhWrlypQ4ePGhuo23btrp8+bJWr159XzHFxsbKy8tLMTExslqtGb/TSLOEkS6ZHUKW5jwuPrNDAAAAwCOUFXOW0aNHa/ny5QoPD0+xLCYmJsvke9Kjf/xc6yY89G0AT7KrG50zOwQAAIAMlZacJctc4y8xMVHfffedrly5ooCAAO3evVvXr19X/fr1zT5lypRR4cKFFRYWJkkKCwtThQoVzCRQkgIDAxUbG2ueNRgWFmYzRnKf5DFSEx8fr9jYWJsbAAAAACBtjh07Jl9fXxUrVkzt27fX6dOnJSlT8z2JnA8AAACA/cr0wt+BAwfk4eEhFxcX9erVS8uWLVPZsmUVFRUlZ2dn5ciRw6a/t7e3oqKiJElRUVE2SWDy8uRld+sTGxurq1evphrT+PHj5eXlZd4KFSqUEbsKAAAAAE+MatWqKSQkRKtXr9aMGTMUGRmp559/Xv/++2+m5nsSOR8AAAAA+5UtswMoXbq0wsPDFRMTo++//15BQUHavHlzpsY0fPhwDRo0yLwfGxtLIggAAAAAadCoUSPz/xUrVlS1atXk5+enRYsWydXVNRMjI+cDAAAAYL8yvfDn7OysEiVKSJKqVq2qnTt3aurUqWrTpo0SEhJ0+fJlm6NAo6Oj5ePjI0ny8fHRjh07bMaLjo42lyX/m9x2ax+r1XrHZNPFxUUuLlxDDgAAAAAySo4cOVSqVCkdP35cL774YqblexI5HwAAAAD7lelTfd4uKSlJ8fHxqlq1qpycnLRhwwZzWUREhE6fPq2AgABJUkBAgA4cOKDz58+bfdatWyer1aqyZcuafW4dI7lP8hgAAAAAgIcvLi5OJ06cUP78+cn3AAAAAOAhydQz/oYPH65GjRqpcOHC+vfff7VgwQKFhoZqzZo18vLyUrdu3TRo0CDlypVLVqtV/fr1U0BAgKpXry5JatCggcqWLauOHTtq4sSJioqK0ogRIxQcHGwevdmrVy9NmzZNQ4cOVdeuXbVx40YtWrRIK1euzMxdBwAAAAC7NnjwYDVr1kx+fn46e/asRo0aJUdHR7Vr1458DwAAAAAekkwt/J0/f16dOnXSuXPn5OXlpYoVK2rNmjV68cUXJUkff/yxHBwc1LJlS8XHxyswMFDTp08313d0dNSKFSvUu3dvBQQEyN3dXUFBQRo7dqzZp2jRolq5cqUGDhyoqVOnqmDBgvryyy8VGBj4yPcXAAAAAJ4Uf/75p9q1a6d//vlHefPm1XPPPaft27crb968ksj3AAAAAOBhsBiGYWR2EFldbGysvLy8FBMTI6vVmtnhQFLCSK7HcTfO4+IzOwQAAAA8QuQsD+ZRP36udRMe+jaAJ9nVjc6ZHQIAAECGSkvOkuWu8QcAAAAAAAAAAAAg7Sj8AQAAAAAAAAAAAHaAwh8AAAAAAAAAAABgByj8AQAAAAAAAAAAAHaAwh8AAAAAAAAAAABgByj8AQAAAAAAAAAAAHaAwh8AAAAAAAAAAABgByj8AQAAAAAAAAAAAHaAwh8AAAAAAAAAAABgByj8AQAAAAAAAAAAAHaAwh8AAAAAAAAAAABgByj8AQAAAAAAAAAAAHaAwh8AAAAAAAAAAABgByj8AQAAAAAAAAAAAHaAwh8AAAAAAAAAAABgByj8AQAAAAAAAAAAAHaAwh8AAAAAAAAAAABgByj8AQAAAAAAAAAAAHaAwh8AAAAAAAAAAABgByj8AQAAAAAAAAAAAHaAwh8AAAAAAAAAAABgByj8AQAAAAAAAAAAAHaAwh8AAAAAAAAAAABgByj8AQAAAAAAAAAAAHaAwh8AAAAAAAAAAABgByj8AQAAAAAAAAAAAHaAwh8AAAAAAAAAAABgByj8AQAAAAAAAAAAAHaAwh8AAAAAAAAAAABgByj8AQAAAAAAAAAAAHaAwh8AAAAAAAAAAABgByj8AQAAAAAAAAAAAHaAwh8AAAAAAAAAAABgByj8AQAAAAAAAAAAAHaAwh8AAAAAAAAAAABgByj8AQAAAAAAAAAAAHaAwh8AAAAAAAAAAABgByj8AQAAAAAAAAAAAHaAwh8AAAAAAAAAAABgByj8AQAAAAAAAAAAAHaAwh8AAAAAAAAAAABgByj8AQAAAAAAAAAAAHaAwh8AAAAAAAAAAABgByj8AQAAAAAAAAAAAHYgUwt/48eP1zPPPCNPT0/ly5dPLVq0UEREhE2f2rVry2Kx2Nx69epl0+f06dNq0qSJ3NzclC9fPg0ZMkQ3btyw6RMaGqoqVarIxcVFJUqUUEhIyMPePQAAAAAAAAAAAOCRydTC3+bNmxUcHKzt27dr3bp1un79uho0aKArV67Y9OvRo4fOnTtn3iZOnGguS0xMVJMmTZSQkKBt27Zp7ty5CgkJ0bvvvmv2iYyMVJMmTVSnTh2Fh4drwIAB6t69u9asWfPI9hUAAAAAAAAAAAB4mDK18Ld69Wp17txZ5cqVU6VKlRQSEqLTp09r9+7dNv3c3Nzk4+Nj3qxWq7ls7dq1Onz4sObNm6ennnpKjRo10rhx4/TZZ58pISFBkjRz5kwVLVpUkyZNkr+/v/r27atWrVrp448/fqT7m17x8fHq0aOHihYtKk9PT5UpU0ZfffVVin7R0dHKlSuXnnrqKZv2nj17qnTp0nJwcNCUKVNsliUkJKhVq1YqUqSILBaLli9f/vB2BAAAAAAAAAAAAA9NlrrGX0xMjCQpV65cNu3z589Xnjx5VL58eQ0fPlz//fefuSwsLEwVKlSQt7e32RYYGKjY2FgdOnTI7FO/fn2bMQMDAxUWFvawdiVD3bhxQ/nz59f69esVGxurkJAQvfnmm1q7dq1Nv759+6py5cop1q9UqZKmT5+uZ599NtXxn3vuOX3zzTcqWLDgQ4kfAAAAAAAAAAAAD1+2zA4gWVJSkgYMGKCaNWuqfPnyZvtrr70mPz8/+fr6av/+/Ro2bJgiIiK0dOlSSVJUVJRN0U+SeT8qKuqufWJjY3X16lW5urraLIuPj1d8fLx5PzY2NuN2NB3c3d01duxY83716tVVp04dbdmyRQ0aNJAk/fDDD7p48aI6duyY4qy+4OBgSdK4ceNSjO3s7KwBAwZIkhwdHR/ODgAAAAAAAAAAAOChyzKFv+DgYB08eFBbtmyxae/Zs6f5/woVKih//vyqV6+eTpw4oeLFiz+UWMaPH68xY8Y8lLEzwrVr17Rjxw699tprkm6eKTlo0CCtXr1aW7duzeToAAAAAAAAAAAAkBmyxFSfffv21YoVK7Rp06Z7TjdZrVo1SdLx48clST4+PoqOjrbpk3zfx8fnrn2sVmuKs/0kafjw4YqJiTFvZ86cSd+OPQSGYah79+4qWbKkXnnlFUnS0KFD1blzZ5UsWTKTowMAAAAAAAAAAEBmydQz/gzDUL9+/bRs2TKFhoaqaNGi91wnPDxckpQ/f35JUkBAgN5//32dP39e+fLlkyStW7dOVqtVZcuWNfv8/PPPNuOsW7dOAQEBqW7DxcVFLi4u6d2th8YwDPXp00cRERFav369HBwc9Ouvv2rr1q3as2dPZocHAAAAAAAAAACATJSphb/g4GAtWLBAP/zwgzw9Pc1r8nl5ecnV1VUnTpzQggUL1LhxY+XOnVv79+/XwIED9cILL6hixYqSpAYNGqhs2bLq2LGjJk6cqKioKI0YMULBwcFm8a5Xr16aNm2ahg4dqq5du2rjxo1atGiRVq5cmWn7nlaGYSg4OFi//fabNmzYIC8vL0nShg0b9Mcff8jX11fSzesTXr16VXny5NGBAwfMAikAAAAAAAAAAADsW6ZO9TljxgzFxMSodu3ayp8/v3lbuHChJMnZ2Vnr169XgwYNVKZMGb355ptq2bKlfvrpJ3MMR0dHrVixQo6OjgoICFCHDh3UqVMnjR071uxTtGhRrVy5UuvWrVOlSpU0adIkffnllwoMDHzk+5xeffv21datW7Vu3TrlzJnTbB80aJB+//13hYeHKzw8XGPHjlXp0qUVHh5ungGZkJCga9euKSkpSTdu3NC1a9d048YNc4z4+Hhdu3ZNhmHo+vXrunbtmhITEx/5PgIAAAAAAAAAACD9LIZhGJkdRFYXGxsrLy8vxcTEyGq1PvLtnzp1SkWKFJGLi4uyZfu/kzQ7dOigmTNn2vQNCQnRlClTzClRJal27dravHmzTb9Ro0Zp9OjRkqQiRYro1KlTNsvnzJmjzp07Z+h+ZKSEkVlvKtasxHlcfGaHAAAAgEcos3OWx92jfvxc6yY89G0AT7KrG50zOwQAAIAMlZacJVPP+MP98fPzk2EYunbtmuLi4szb7UU/SercubNN0U+SQkNDZRiGzS256CdJJ0+eTLE8Kxf9AAAAADx+JkyYIIvFogEDBpht165dU3BwsHLnzi0PDw+1bNlS0dHRNuudPn1aTZo0kZubm/Lly6chQ4bYzGAi3cx5qlSpIhcXF5UoUUIhISGPYI8AAAAAIOuh8AcAAAAAeKh27typzz//3LxWe7KBAwfqp59+0uLFi7V582adPXtWr7zyirk8MTFRTZo0UUJCgrZt26a5c+cqJCRE7777rtknMjJSTZo0UZ06dRQeHq4BAwaoe/fuWrNmzSPbPwAAAADIKij8AQAAAAAemri4OLVv315ffPGFzfXKY2JiNHv2bE2ePFl169ZV1apVNWfOHG3btk3bt2+XJK1du1aHDx/WvHnz9NRTT6lRo0YaN26cPvvsMyUk3Jwuc+bMmSpatKgmTZokf39/9e3bV61atdLHH3+cKfsLAAAAAJkp27274H5xnYZ7Y559AAAA4MkSHBysJk2aqH79+nrvvffM9t27d+v69euqX7++2VamTBkVLlxYYWFhql69usLCwlShQgV5e3ubfQIDA9W7d28dOnRIlStXVlhYmM0YyX1unVL0dvHx8YqP/7/rYsfGxmbAngIAAABA5qPwBwAAAAB4KL777jvt2bNHO3fuTLEsKipKzs7OypEjh027t7e3oqKizD63Fv2Slycvu1uf2NhYXb16Va6urim2PX78eI0ZMybd+wUAAAAAWRVTfQIAAAAAMtyZM2f0xhtvaP78+cqePXtmh2Nj+PDhiomJMW9nzpzJ7JAAAAAAIENQ+AMAAAAAZLjdu3fr/PnzqlKlirJly6Zs2bJp8+bN+uSTT5QtWzZ5e3srISFBly9ftlkvOjpaPj4+kiQfHx9FR0enWJ687G59rFZrqmf7SZKLi4usVqvNDQAAAADsAYU/AAAAAECGq1evng4cOKDw8HDz9vTTT6t9+/bm/52cnLRhwwZznYiICJ0+fVoBAQGSpICAAB04cEDnz583+6xbt05Wq1Vly5Y1+9w6RnKf5DEAAAAA4EnCNf4AAAAAABnO09NT5cuXt2lzd3dX7ty5zfZu3bpp0KBBypUrl6xWq/r166eAgABVr15dktSgQQOVLVtWHTt21MSJExUVFaURI0YoODhYLi4ukqRevXpp2rRpGjp0qLp27aqNGzdq0aJFWrly5aPdYQAAAADIAij8AQAAAAAyxccffywHBwe1bNlS8fHxCgwM1PTp083ljo6OWrFihXr37q2AgAC5u7srKChIY8eONfsULVpUK1eu1MCBAzV16lQVLFhQX375pQIDAzNjlwAAAAAgU1kMwzAyO4isLjY2Vl5eXoqJibnrtR9c6yY8wqgeT1c3OmfIOAkjXTJkHHvlPC4+s0MAAADAI3S/OQtS96gfP3JH4OHKqN8eAAAAsoq05Cxc4w8AAAAAAAAAAACwAxT+AAAAAAAAAAAAADtA4Q8AAAAAAAAAAACwAxT+AAAAAAAAAAAAADtA4Q8AAAAAAAAAAACwAxT+AAAAAAAAAAAAADtA4Q8AAAAAAAAAAACwAxT+AAAAAAAAAAAAADtA4Q8AAAAAAAAAAACwAxT+AAAAAAAAAAAAADtA4Q8AAAAAAAAAAACwAxT+AAAAAAAAAAAAADtA4Q8AAAAAAAAAAACwAxT+AAAAAAAAAAAAADtA4Q8AAAAAAAAAAACwAxT+AAAAAAAAAAAAADtA4Q8AAAAAAAAAAACwAxT+AAAAAAAAAAAAADtA4Q8AAAAAAAAAAACwAxT+AAAAAAAAAAAAADtA4Q8AAAAAAAAAAACwAxT+AAAAAAAAAAAAADtA4Q8AAAAAAAAAAACwAxT+AAAAAAAAAAAAADtA4Q8AAAAAAAAAAACwAxT+AAAAAAAAAAAAADtA4Q8AAAAAAAAAAACwAxT+AAAAAAAAAAAAADtA4Q8AAAAAAAAAAACwAxT+AAAAAAAAAAAAADtA4Q8AAAAAAAAAAACwAxT+AAAAAAAAAAAAADtA4Q8AAAAAAAAAAACwA5la+Bs/fryeeeYZeXp6Kl++fGrRooUiIiJs+ly7dk3BwcHKnTu3PDw81LJlS0VHR9v0OX36tJo0aSI3Nzfly5dPQ4YM0Y0bN2z6hIaGqkqVKnJxcVGJEiUUEhLysHcPAAAAAAAAAAAAeGTSVfgrVqyY/vnnnxTtly9fVrFixe57nM2bNys4OFjbt2/XunXrdP36dTVo0EBXrlwx+wwcOFA//fSTFi9erM2bN+vs2bN65ZVXzOWJiYlq0qSJEhIStG3bNs2dO1chISF69913zT6RkZFq0qSJ6tSpo/DwcA0YMEDdu3fXmjVr0rP7AAAAAGC3MirfAwAAAAA8ehbDMIy0ruTg4KCoqCjly5fPpj06OlqFCxdWfHx8uoK5cOGC8uXLp82bN+uFF15QTEyM8ubNqwULFqhVq1aSpKNHj8rf319hYWGqXr26Vq1apaZNm+rs2bPy9vaWJM2cOVPDhg3ThQsX5OzsrGHDhmnlypU6ePCgua22bdvq8uXLWr169T3jio2NlZeXl2JiYmS1Wu/Yz7VuQrr2+0lydaNzhoyTMNIlQ8axV87j0vcaBAAAwOPpfnOW+/Gw8r2sLCMfv/tB7gg8XBn12wMAAEBWkZacJVtaBv7xxx/N/69Zs0ZeXl7m/cTERG3YsEFFihRJW7S3iImJkSTlypVLkrR7925dv35d9evXN/uUKVNGhQsXNgt/YWFhqlChgln0k6TAwED17t1bhw4dUuXKlRUWFmYzRnKfAQMGpDtWAAAAALAnDzvfAwAAAAA8fGkq/LVo0UKSZLFYFBQUZLPMyclJRYoU0aRJk9IVSFJSkgYMGKCaNWuqfPnykqSoqCg5OzsrR44cNn29vb0VFRVl9rm16Je8PHnZ3frExsbq6tWrcnV1tVkWHx9vcxRrbGxsuvYJAAAAAB4XDzPfAwAAAAA8Gmkq/CUlJUmSihYtqp07dypPnjwZFkhwcLAOHjyoLVu2ZNiY6TV+/HiNGTMms8MAAAAAgEfmYeZ7AAAAAIBHwyE9K0VGRmZoEti3b1+tWLFCmzZtUsGCBc12Hx8fJSQk6PLlyzb9o6Oj5ePjY/aJjo5OsTx52d36WK3WFGf7SdLw4cMVExNj3s6cOfPA+wgAAAAAj4OMzvcAAAAAAI9Oms74u9WGDRu0YcMGnT9/3jwyNNlXX311X2MYhqF+/fpp2bJlCg0NVdGiRW2WV61aVU5OTtqwYYNatmwpSYqIiNDp06cVEBAgSQoICND777+v8+fPmxefX7dunaxWq8qWLWv2+fnnn23GXrdunTnG7VxcXOTi4nJf+wAAAAAA9iYj8j0AAAAAwKOXrsLfmDFjNHbsWD399NPKnz+/LBZLujYeHBysBQsW6IcffpCnp6d5TT4vLy+5urrKy8tL3bp106BBg5QrVy5ZrVb169dPAQEBql69uiSpQYMGKlu2rDp27KiJEycqKipKI0aMUHBwsFm869Wrl6ZNm6ahQ4eqa9eu2rhxoxYtWqSVK1emK24AAAAAsFcZle8BAAAAAB69dBX+Zs6cqZCQEHXs2PGBNj5jxgxJUu3atW3a58yZo86dO0uSPv74Yzk4OKhly5aKj49XYGCgpk+fbvZ1dHTUihUr1Lt3bwUEBMjd3V1BQUEaO3as2ado0aJauXKlBg4cqKlTp6pgwYL68ssvFRgY+EDxAwAAAIC9yah8DwAAAADw6KWr8JeQkKAaNWo88MYNw7hnn+zZs+uzzz7TZ599dsc+fn5+KabyvF3t2rW1d+/eNMcIAAAAAE+SjMr3AAAAAACPnkN6VurevbsWLFiQ0bEAAAAAADIZ+R4AAAAAPL7SdcbftWvXNGvWLK1fv14VK1aUk5OTzfLJkydnSHAAAAAAgEeLfA8AAAAAHl/pKvzt379fTz31lCTp4MGDNsu48DsAAAAAPL7I9wAAAADg8ZWuwt+mTZsyOg4AAAAAQBZAvgcAAAAAj690XeMPAAAAAAAAAAAAQNaSrjP+6tSpc9cpXjZu3JjugAAAAAAAmYd8DwAAAAAeX+kq/CVf7yHZ9evXFR4eroMHDyooKCgj4gIAAAAAZALyPQAAAAB4fKWr8Pfxxx+n2j569GjFxcU9UEAAAAAAgMxDvgcAAAAAj68MvcZfhw4d9NVXX2XkkAAAAACALIB8DwAAAACyvgwt/IWFhSl79uwZOSQAAAAAIAsg3wMAAACArC9dU32+8sorNvcNw9C5c+e0a9cujRw5MkMCAwAAAAA8euR7AAAAAPD4StcZf15eXja3XLlyqXbt2vr55581atSojI4RAAAAAPCIZFS+N2PGDFWsWFFWq1VWq1UBAQFatWqVufzatWsKDg5W7ty55eHhoZYtWyo6OtpmjNOnT6tJkyZyc3NTvnz5NGTIEN24ccOmT2hoqKpUqSIXFxeVKFFCISEhD7T/AAAAAPA4S9cZf3PmzMnoOAAAAAAAWUBG5XsFCxbUhAkTVLJkSRmGoblz56p58+bau3evypUrp4EDB2rlypVavHixvLy81LdvX73yyivaunWrJCkxMVFNmjSRj4+Ptm3bpnPnzqlTp05ycnLSBx98IEmKjIxUkyZN1KtXL82fP18bNmxQ9+7dlT9/fgUGBmbIfgAAAADA48RiGIaR3pV3796tI0eOSJLKlSunypUrZ1hgWUlsbKy8vLwUExMjq9V6x36udRMeYVSPp6sbnTNknISRLhkyjr1yHhef2SEAAADgEbrfnCUtHka+lytXLn300Udq1aqV8ubNqwULFqhVq1aSpKNHj8rf319hYWGqXr26Vq1apaZNm+rs2bPy9vaWJM2cOVPDhg3ThQsX5OzsrGHDhmnlypU6ePCguY22bdvq8uXLWr169X3H9TAev7shdwQeroz67QEAACCrSEvOkq6pPs+fP6+6devqmWeeUf/+/dW/f39VrVpV9erV04ULF9IVNAAAAAAg8z2MfC8xMVHfffedrly5ooCAAO3evVvXr19X/fr1zT5lypRR4cKFFRYWJkkKCwtThQoVzKKfJAUGBio2NlaHDh0y+9w6RnKf5DEAAAAA4EmTrsJfv3799O+//+rQoUO6ePGiLl68qIMHDyo2Nlb9+/fP6BgBAAAAAI9IRuZ7Bw4ckIeHh1xcXNSrVy8tW7ZMZcuWVVRUlJydnZUjRw6b/t7e3oqKipIkRUVF2RT9kpcnL7tbn9jYWF29evWOccXHxys2NtbmBgAAAAD2IF3X+Fu9erXWr18vf39/s61s2bL67LPP1KBBgwwLDgAAAADwaGVkvle6dGmFh4crJiZG33//vYKCgrR58+aMDjnNxo8frzFjxmR2GAAAAACQ4dJ1xl9SUpKcnJxStDs5OSkpKemBgwIAAAAAZI6MzPecnZ1VokQJVa1aVePHj1elSpU0der/a+/e43uu//+P33c2dnLcgRnCwkeOxVRMxpCaSClCRDklkvL5IDopfQqhj08Hp6KoUPGJ5jA0mkMNaZZEVNsI2xp2fv7+6LfX17s5jLa9t7fb9XJ5Xer9ej5fr9fj+dr29H6+Hq/X8zVbAQEBys7OVmpqqk39lJQUBQQESJICAgKUkpJSqLyg7HJ1fHx85Onpecm4Jk6cqLS0NGs5fvz4VbULAAAAAMqqa0r83XHHHRozZox+++03a92vv/6qsWPHqlOnTsUWHAAAAACgdJXkeC8/P19ZWVlq1aqV3NzctHHjRqssMTFRx44dU1hYmCQpLCxM+/fv14kTJ6w60dHR8vHxUePGja06F+6joE7BPi7Fw8NDPj4+NgsAAAAAOIJrmupz7ty5uvvuu1WnTh0FBwdLko4fP65//OMfev/994s1QAAAAABA6Smu8d7EiRPVrVs31a5dW3/88YeWLVummJgYrV+/Xr6+vhoyZIjGjRunKlWqyMfHR6NHj1ZYWJjatm0rSerSpYsaN26shx56SDNmzFBycrImTZqkkSNHysPDQ5L02GOPae7cuZowYYIGDx6sTZs2acWKFVq7dm3xnxgAAAAAKAeuKfEXHBysb775Rhs2bNDBgwclSY0aNVJERESxBgcAAAAAKF3FNd47ceKEBgwYoKSkJPn6+uqmm27S+vXr1blzZ0nSzJkz5ezsrN69eysrK0uRkZF68803re1dXFy0Zs0aDR8+XGFhYapUqZIGDhyo5557zqpTt25drV27VmPHjtXs2bNVq1YtvfPOO4qMjCyGMwEAAAAA5Y+TMcYUtfKmTZs0atQoff3114WmQklLS1O7du00f/583X777cUeqD2lp6fL19dXaWlpl50CxvOO7FKMqnw6v8m9WPaTPdmjWPbjqNyfz7J3CAAAAChFRR2zXM71Ot6Tiuf8XQ3GjkDJKq5rDwAAAGXF1YxZruodf7NmzdLQoUMvulNfX189+uijev31168uWgAAAACA3THeAwAAAIDy76oSf3v37lXXrl0vWd6lSxft2bPnbwcFAAAAAChdjPcAAAAAoPy7qsRfSkqK3NzcLlnu6uqqkydP/u2gAAAAAACli/EeAAAAAJR/V5X4q1mzpr777rtLlu/bt0+BgYF/OygAAAAAQOlivAcAAAAA5d9VJf66d++uyZMnKzMzs1DZ+fPn9eyzz6pHjx7FFhwAAAAAoHQw3gMAAACA8s/JGGOKWjklJUUtW7aUi4uLRo0apdDQUEnSwYMHNW/ePOXl5embb76Rv79/iQVsD+np6fL19VVaWtpFX3RfwPOO7FKMqnw6v8m9WPaTPdmjWPbjqNyfz7J3CAAAAChFRR2zXM71Ot6Tiuf8XQ3GjkDJKq5rDwAAAGXF1YxZXK9mx/7+/tq+fbuGDx+uiRMnqiBn6OTkpMjISM2bN88hB4EAAAAA4OgY7wEAAABA+XdViT9JCgkJ0f/+9z+dOXNGP/74o4wxatCggSpXrlwS8QEAAAAASgnjPQAAAAAo36468VegcuXKuvnmm4szFgAAAABAGcB4DwAAAADKJ2d7BwAAAAAAAAAAAADg7yPxBwAAAAAAAAAAADgAEn8AAAAAAAAAAACAAyDxBwAAAAAAAAAAADgAEn8AAAAAAAAAAACAAyDxBwAAAAAAAAAAADgAEn8AAAAAAAAAAACAAyDxBwAAAAAAAAAAADgAEn8AAAAAAAAAAACAAyDxBwAAAAAAAAAAADgAEn8AAAAAAAAAAACAAyDxBwAAAAAAAAAAADgAEn8AAAAAAAAAAACAAyDxBwAAAAAAAAAAADgAuyb+tm7dqrvuuktBQUFycnLS6tWrbcoHDRokJycnm6Vr1642dU6fPq1+/frJx8dHfn5+GjJkiDIyMmzq7Nu3T7fffrsqVKig4OBgzZgxo6SbBgAAAAAAAAAAAJQquyb+zp49q2bNmmnevHmXrNO1a1clJSVZywcffGBT3q9fPx04cEDR0dFas2aNtm7dqmHDhlnl6enp6tKli0JCQrRnzx69+uqrmjp1qt56660SaxcAAAAAAAAAAABQ2lztefBu3bqpW7dul63j4eGhgICAi5YlJCRo3bp12rVrl1q3bi1JmjNnjrp3765///vfCgoK0tKlS5Wdna0FCxbI3d1dTZo0UXx8vF5//XWbBCEAAAAAAAAAAABQnpX5d/zFxMSoRo0aCg0N1fDhw3Xq1CmrbMeOHfLz87OSfpIUEREhZ2dnxcXFWXXat28vd3d3q05kZKQSExN15syZix4zKytL6enpNgsAAAAAAAAAAABQlpXpxF/Xrl21ZMkSbdy4Ua+88oq2bNmibt26KS8vT5KUnJysGjVq2Gzj6uqqKlWqKDk52arj7+9vU6fgc0Gdv5o+fbp8fX2tJTg4uLibBgAAAAAAAAAAABQru071eSV9+/a1/r9p06a66aabdMMNNygmJkadOnUqseNOnDhR48aNsz6np6eT/AMAAAAAAAAAAECZVqaf+PurevXqqVq1avrxxx8lSQEBATpx4oRNndzcXJ0+fdp6L2BAQIBSUlJs6hR8vtS7Az08POTj42OzAAAAAAAAAAAAAGVZuUr8/fLLLzp16pQCAwMlSWFhYUpNTdWePXusOps2bVJ+fr7atGlj1dm6datycnKsOtHR0QoNDVXlypVLtwEAAAAAAAAAAABACbFr4i8jI0Px8fGKj4+XJB05ckTx8fE6duyYMjIy9NRTT+nrr7/W0aNHtXHjRkVFRal+/fqKjIyUJDVq1Ehdu3bV0KFDtXPnTsXGxmrUqFHq27evgoKCJEkPPvig3N3dNWTIEB04cEDLly/X7NmzbabyBAAAAAAAAAAAAMo7uyb+du/erRYtWqhFixaSpHHjxqlFixaaMmWKXFxctG/fPt19991q2LChhgwZolatWmnbtm3y8PCw9rF06VLdeOON6tSpk7p3767bbrtNb731llXu6+urL7/8UkeOHFGrVq305JNPasqUKRo2bFiptxcAAAAAAAAAAAAoKa72PHh4eLiMMZcsX79+/RX3UaVKFS1btuyydW666SZt27btquMDAAAAAAAAAAAAyoty9Y4/AAAAAAAAAAAAABdH4g8AAAAAAAAAAABwACT+AAAAAAAAAAAAAAdA4g8AAAAAAAAAAABwACT+AAAAAAAAAAAAAAdA4g8AAAAAAAAAAABwACT+AAAAAAAAAAAAAAdA4g8AAAAAAAAAAABwACT+AAAAAAAAAAAAAAdA4g8AAAAAAAAAAABwACT+AAAAAAAAAAAAAAdA4g8AAAAAAAAAAABwACT+AAAAAAAAAAAAAAdA4g8AAAAAAAAAAABwACT+AAAAAAAAAAAAAAdA4g8AAAAAAAAAAABwACT+AAAAAAAAAAAAAAdA4g8AAAAAAAAAAABwACT+AAAAAAAAAAAAAAdA4g8AAAAAAAAAAABwACT+AAAAAAAAAAAAAAdA4g8AAAAAAAAAAABwACT+AAAAAADFbvr06br55pvl7e2tGjVqqGfPnkpMTLSpk5mZqZEjR6pq1ary8vJS7969lZKSYlPn2LFjuvPOO1WxYkXVqFFDTz31lHJzc23qxMTEqGXLlvLw8FD9+vW1aNGikm4eAAAAAJRJJP4AAAAAAMVuy5YtGjlypL7++mtFR0crJydHXbp00dmzZ606Y8eO1eeff66PPvpIW7Zs0W+//aZevXpZ5Xl5ebrzzjuVnZ2t7du3a/HixVq0aJGmTJli1Tly5IjuvPNOdezYUfHx8XriiSf0yCOPaP369aXaXgAAAAAoC5yMMcbeQZR16enp8vX1VVpamnx8fC5Zz/OO7FKMqnw6v8m9WPaTPdmjWPbjqNyfz7J3CAAAAChFRR2z2NPJkydVo0YNbdmyRe3bt1daWpqqV6+uZcuW6d5775UkHTx4UI0aNdKOHTvUtm1bffHFF+rRo4d+++03+fv7S5Lmz5+vp59+WidPnpS7u7uefvpprV27Vt999511rL59+yo1NVXr1q0rUmylff4YOwIlq7iuPQAAAJQVVzNm4Yk/AAAAAECJS0tLkyRVqVJFkrRnzx7l5OQoIiLCqnPjjTeqdu3a2rFjhyRpx44datq0qZX0k6TIyEilp6frwIEDVp0L91FQp2AfF5OVlaX09HSbBQAAAAAcAYk/AAAAAECJys/P1xNPPKFbb71V//jHPyRJycnJcnd3l5+fn01df39/JScnW3UuTPoVlBeUXa5Oenq6zp8/f9F4pk+fLl9fX2sJDg7+220EAAAAgLKAxB8AAAAAoESNHDlS3333nT788EN7hyJJmjhxotLS0qzl+PHj9g4JAAAAAIqFq70DAAAAAAA4rlGjRmnNmjXaunWratWqZa0PCAhQdna2UlNTbZ76S0lJUUBAgFVn586dNvtLSUmxygr+W7Duwjo+Pj7y9PS8aEweHh7y8OC94QAAAAAcD0/8AQAAAACKnTFGo0aN0qpVq7Rp0ybVrVvXprxVq1Zyc3PTxo0brXWJiYk6duyYwsLCJElhYWHav3+/Tpw4YdWJjo6Wj4+PGjdubNW5cB8FdQr2AQAAAADXE574AwAAAAAUu5EjR2rZsmX69NNP5e3tbb2Tz9fXV56envL19dWQIUM0btw4ValSRT4+Pho9erTCwsLUtm1bSVKXLl3UuHFjPfTQQ5oxY4aSk5M1adIkjRw50npi77HHHtPcuXM1YcIEDR48WJs2bdKKFSu0du1au7UdAAAAAOyFJ/4AAAAAAMXuP//5j9LS0hQeHq7AwEBrWb58uVVn5syZ6tGjh3r37q327dsrICBAK1eutMpdXFy0Zs0aubi4KCwsTP3799eAAQP03HPPWXXq1q2rtWvXKjo6Ws2aNdNrr72md955R5GRkaXaXgAAAAAoC5yMMcbeQZR16enp8vX1VVpamnx8fC5Zz/OO7FKMqnw6v8m9WPaTPZn3cVyO+/NZ9g4BAAAApaioYxZcXGmfP8aOQMkqrmsPAAAAZcXVjFl44g8AAAAAAAAAAABwACT+AAAAAAAAAAAAAAdA4g8AAAAAAAAAAABwACT+AAAAAAAAAAAAAAdA4g8AAAAAAAAAAABwACT+AAAAAAAAAAAAAAdA4g8AAAAAAAAAAABwACT+AAAAAAAAAAAAAAdA4g8AAAAAAAAAAABwACT+AAAAAAAAAAAAAAdA4g8AAAAAAAAAAABwAHZN/G3dulV33XWXgoKC5OTkpNWrV9uUG2M0ZcoUBQYGytPTUxERETp06JBNndOnT6tfv37y8fGRn5+fhgwZooyMDJs6+/bt0+23364KFSooODhYM2bMKOmmAQAAAAAAAAAAAKXKrom/s2fPqlmzZpo3b95Fy2fMmKE33nhD8+fPV1xcnCpVqqTIyEhlZmZadfr166cDBw4oOjpaa9as0datWzVs2DCrPD09XV26dFFISIj27NmjV199VVOnTtVbb71V4u0DAAAAAAAAAAAASourPQ/erVs3devW7aJlxhjNmjVLkyZNUlRUlCRpyZIl8vf31+rVq9W3b18lJCRo3bp12rVrl1q3bi1JmjNnjrp3765///vfCgoK0tKlS5Wdna0FCxbI3d1dTZo0UXx8vF5//XWbBCEAAAAAAAAAAABQnpXZd/wdOXJEycnJioiIsNb5+vqqTZs22rFjhyRpx44d8vPzs5J+khQRESFnZ2fFxcVZddq3by93d3erTmRkpBITE3XmzJmLHjsrK0vp6ek2CwAAAAAAAAAAAFCWldnEX3JysiTJ39/fZr2/v79VlpycrBo1atiUu7q6qkqVKjZ1LraPC4/xV9OnT5evr6+1BAcH//0GAQAAAAAAAAAAACWozCb+7GnixIlKS0uzluPHj9s7JAAAAAAAAAAAAOCyymziLyAgQJKUkpJisz4lJcUqCwgI0IkTJ2zKc3Nzdfr0aZs6F9vHhcf4Kw8PD/n4+NgsAAAAAAAAAAAAQFlWZhN/devWVUBAgDZu3GitS09PV1xcnMLCwiRJYWFhSk1N1Z49e6w6mzZtUn5+vtq0aWPV2bp1q3Jycqw60dHRCg0NVeXKlUupNQAAAAAAAAAAAEDJsmviLyMjQ/Hx8YqPj5ckHTlyRPHx8Tp27JicnJz0xBNP6IUXXtBnn32m/fv3a8CAAQoKClLPnj0lSY0aNVLXrl01dOhQ7dy5U7GxsRo1apT69u2roKAgSdKDDz4od3d3DRkyRAcOHNDy5cs1e/ZsjRs3zk6tBgAAAAAAAAAAAIqfqz0Pvnv3bnXs2NH6XJCMGzhwoBYtWqQJEybo7NmzGjZsmFJTU3Xbbbdp3bp1qlChgrXN0qVLNWrUKHXq1EnOzs7q3bu33njjDavc19dXX375pUaOHKlWrVqpWrVqmjJlioYNG1Z6DQUAAAAAAAAAAABKmJMxxtg7iLIuPT1dvr6+SktLu+z7/jzvyC7FqMqn85vci2U/2ZM9imU/jsr9+Sx7hwAAAIBSVNQxCy6utM8fY0egZBXXtQcAAICy4mrGLGX2HX8AAAAAAAAAAAAAio7EHwAAAAAAAAAAAOAASPwBAAAAAAAAAAAADoDEHwAAAAAAAAAAAOAASPwBAAAAAAAAAAAADoDEHwAAAAAAAAAAAOAASPwBAAAAAAAAAAAADoDEHwAAAAAAAAAAAOAASPwBAAAAAAAAAAAADoDEHwAAAAAAAAAAAOAASPwBAAAAAAAAAAAADoDEHwAAAAAAAAAAAOAASPwBAAAAAAAAAAAADoDEHwAAAAAAAAAAAOAASPwBAAAAAAAAAAAADoDEHwAAAAAAAAAAAOAASPwBAAAAAAAAAAAADoDEHwAAAAAAAAAAAOAASPwBAAAAAAAAAAAADoDEHwAAAAAAAAAAAOAASPwBAAAAAAAAAAAADoDEHwAAAAAAAAAAAOAASPwBAAAAAAAAAAAADoDEHwAAAAAAAAAAAOAASPwBAAAAAAAAAAAADoDEHwAAAAAAAAAAAOAASPwBAAAAAAAAAAAADoDEHwAAAAAAAAAAAOAASPwBAAAAAAAAAAAADoDEHwAAAAAAAAAAAOAASPwBAAAAAAAAAAAADoDEHwAAAAAAAAAAAOAASPwBAAAAAAAAAAAADoDEHwAAAACgRGzdulV33XWXgoKC5OTkpNWrV9uUG2M0ZcoUBQYGytPTUxERETp06JBNndOnT6tfv37y8fGRn5+fhgwZooyMDJs6+/bt0+23364KFSooODhYM2bMKOmmAQAAAECZROIPAAAAAFAizp49q2bNmmnevHkXLZ8xY4beeOMNzZ8/X3FxcapUqZIiIyOVmZlp1enXr58OHDig6OhorVmzRlu3btWwYcOs8vT0dHXp0kUhISHas2ePXn31VU2dOlVvvfVWibcPAAAAAMoaV3sHAAAAAABwTN26dVO3bt0uWmaM0axZszRp0iRFRUVJkpYsWSJ/f3+tXr1affv2VUJCgtatW6ddu3apdevWkqQ5c+aoe/fu+ve//62goCAtXbpU2dnZWrBggdzd3dWkSRPFx8fr9ddft0kQAgAAAMD1gCf+AAAAAACl7siRI0pOTlZERIS1ztfXV23atNGOHTskSTt27JCfn5+V9JOkiIgIOTs7Ky4uzqrTvn17ubu7W3UiIyOVmJioM2fOXPTYWVlZSk9Pt1kAAAAAwBGQ+AMAAAAAlLrk5GRJkr+/v816f39/qyw5OVk1atSwKXd1dVWVKlVs6lxsHxce46+mT58uX19fawkODv77DQIAAACAMoDEHwAAAADgujJx4kSlpaVZy/Hjx+0dEgAAAAAUCxJ/AAAAAIBSFxAQIElKSUmxWZ+SkmKVBQQE6MSJEzblubm5On36tE2di+3jwmP8lYeHh3x8fGwWAAAAAHAEJP4AAAAAAKWubt26CggI0MaNG6116enpiouLU1hYmCQpLCxMqamp2rNnj1Vn06ZNys/PV5s2baw6W7duVU5OjlUnOjpaoaGhqly5cim1BgAAAADKBhJ/AAAAAIASkZGRofj4eMXHx0uSjhw5ovj4eB07dkxOTk564okn9MILL+izzz7T/v37NWDAAAUFBalnz56SpEaNGqlr164aOnSodu7cqdjYWI0aNUp9+/ZVUFCQJOnBBx+Uu7u7hgwZogMHDmj58uWaPXu2xo0bZ6dWAwAAAID9uNo7AAAAAACAY9q9e7c6duxofS5Ixg0cOFCLFi3ShAkTdPbsWQ0bNkypqam67bbbtG7dOlWoUMHaZunSpRo1apQ6deokZ2dn9e7dW2+88YZV7uvrqy+//FIjR45Uq1atVK1aNU2ZMkXDhg0rvYYCAAAAQBnhZIwx9g6irEtPT5evr6/S0tIu++4HzzuySzGq8un8Jvdi2U/2ZI9i2Y+jcn8+y94hAAAAoBQVdcyCiyvt88fYEShZxXXtAQAAoKy4mjFLmZ7qc+rUqXJycrJZbrzxRqs8MzNTI0eOVNWqVeXl5aXevXsXeqn7sWPHdOedd6pixYqqUaOGnnrqKeXm5pZ2UwAAAAAAAAAAAIASVean+mzSpIk2bNhgfXZ1/b+Qx44dq7Vr1+qjjz6Sr6+vRo0apV69eik2NlaSlJeXpzvvvFMBAQHavn27kpKSNGDAALm5uemll14q9bYAAAAAAAAAAAAAJaXMJ/5cXV0VEBBQaH1aWpreffddLVu2THfccYckaeHChWrUqJG+/vprtW3bVl9++aW+//57bdiwQf7+/mrevLmef/55Pf3005o6darc3Zn6AQAAAAAAAAAAAI6hTE/1KUmHDh1SUFCQ6tWrp379+unYsWOSpD179ignJ0cRERFW3RtvvFG1a9fWjh07JEk7duxQ06ZN5e/vb9WJjIxUenq6Dhw4ULoNAQAAAAAAAAAAAEpQmX7ir02bNlq0aJFCQ0OVlJSkadOm6fbbb9d3332n5ORkubu7y8/Pz2Ybf39/JScnS5KSk5Ntkn4F5QVll5KVlaWsrCzrc3p6ejG1CAAAAAAAAAAAACgZZTrx161bN+v/b7rpJrVp00YhISFasWKFPD09S+y406dP17Rp00ps/wAAAAAAAAAAAEBxK/NTfV7Iz89PDRs21I8//qiAgABlZ2crNTXVpk5KSor1TsCAgAClpKQUKi8ou5SJEycqLS3NWo4fP168DQEAAAAAAAAAAACKWblK/GVkZOjw4cMKDAxUq1at5Obmpo0bN1rliYmJOnbsmMLCwiRJYWFh2r9/v06cOGHViY6Olo+Pjxo3bnzJ43h4eFL+BQkAAESDSURBVMjHx8dmAQAAAAAAAAAAAMqyMj3V5/jx43XXXXcpJCREv/32m5599lm5uLjogQcekK+vr4YMGaJx48apSpUq8vHx0ejRoxUWFqa2bdtKkrp06aLGjRvroYce0owZM5ScnKxJkyZp5MiR8vDwsHPrAAAAAAAAAAAAgOJTphN/v/zyix544AGdOnVK1atX12233aavv/5a1atXlyTNnDlTzs7O6t27t7KyshQZGak333zT2t7FxUVr1qzR8OHDFRYWpkqVKmngwIF67rnn7NUkAAAAAAAAAAAAoESU6cTfhx9+eNnyChUqaN68eZo3b94l64SEhOh///tfcYcGAAAAAAAAAAAAlCnl6h1/AAAAAAAAAAAA5cmgQYPk7u4uLy8va9mxY4dNnc8++0zNmzdXpUqVFBQUpPnz51tlkydPVtOmTeXq6qonnniilKNHeVOmn/gDAAAAAAAAAAAo70aMGKFZs2ZdtGzdunUaMWKE3n//fd1+++1KT09XSkqKVV6/fn3NmDFDb7/9dilFi/KMxB8AAAAAAAAAAICdTJ48WVOmTFF4eLgkqXLlyqpcubJVPnDgQEnS8uXL7REeyhmm+gQAAAAAAAAAAChBS5YsUZUqVdSkSRO99tprys/PlySdPXtWe/bs0a+//qqGDRsqICBAffr0UVJSkp0jRnlF4g8AAAAAAAAAAKCEPP7440pMTNTJkyf17rvvavbs2Zo9e7Yk6cyZMzLGaPXq1YqOjtaPP/4oDw8P9e/f385Ro7wi8QcAAAAAAAAAAFBCWrZsqerVq8vFxUVt27bVM888Y03b6eXlJenP5GBISIi8vLw0bdo0bd68WWfPnrVn2CinSPwBAAAAAAAAAACUEmfn/0vN+Pn5qXbt2hetZ4wprZDgQEj8AQAAAAAAAAAAlJAVK1YoPT1dxhjt3r1bL7/8snr37m2VDxs2THPmzNGvv/6q8+fP67nnnlOnTp2spwFzcnKUmZmpvLw85eXlKTMzUzk5OfZqDso4En8AAAAAAAAAAAAlZO7cuapdu7a8vb3Vr18/jRgxQk8++aRV/swzz6hTp05q1qyZgoODde7cOb333ntW+dChQ+Xp6an3339fc+fOlaenp4YOHWqPpqAccDI8K3pF6enp8vX1VVpamnx8fC5Zz/OO7FKMqnw6v8m9WPaTPdmjWPbjqNyfz7J3CAAAAChFRR2z4OJK+/wxdgRKVnFdewAAACgrrmbMwhN/AAAAAAAAAAAAgAMg8QcAAAAAAAAAAAA4AFd7BwAAAAAAAAAAAIpfyPbb7B0C4NB+bveVvUMohCf+AAAAAAAAAAAAAAdA4g8AAAAAAAAAAABwACT+AAAAAAAAAAAAAAdA4g8ArhNz585V69at5eHhoZ49e9qUff/99+rUqZMqV66sgIAADRs2TOfOnbPK9+zZo9tuu00+Pj6qV6+elixZUsrRAwAAAAAAAACuhMQfAFwngoKCNGnSJA0dOrRQ2YMPPqjQ0FClpKRo//792rt3r55//nlJUmpqqrp3767+/fvrzJkz+uCDDzR69Gh99VXZe3EtAAAAAAAAAFzPSPwBwHWiV69e6tmzp6pVq1ao7KefflL//v3l7u6u6tWr6+6779b+/fslSdu3b5eHh4cee+wxubi4qE2bNurVq5feeeed0m4CAAAAAAAAAOAySPwBADR+/HgtWbJE58+fV3JyslatWqW77rpLkpSfny9jjE39/Px87du3zx6hApbLTV8bHh4uDw8PeXl5Wctvv/1mlTN9LQAAAAAAABwRiT8AgLp166avvvpK3t7eCgwMVHBwsAYPHixJCgsL09mzZzV37lzl5OQoNjZWq1atUnp6up2jxvXuctPXStIrr7yijIwMawkKCpLE9LUAAAAAAABwXCT+AOA6d+bMGUVERGjo0KE6d+6cTp8+rUqVKql///6SpKpVq+rzzz/XsmXLFBAQoGeeeUYPP/ywqlataufIcb273PS1l8P0tQAAAAAAAHBUJP4A4Dp3+PBhnT9/Xo8//rjc3d1VuXJlPfroo1q7dq1V59Zbb9X27dt16tQpbdu2TcnJyerQoYMdowau7IUXXlCVKlXUokULm6k8mb4WAAAAAAAAjorEHwBcJ3Jzc5WZmanc3Fzl5+crMzNT2dnZuvHGG+Xl5aU333xTubm5+uOPP/T222+rRYsW1rbffvutsrKydP78eb399tuKiYnRE088Yb/GAFcwffp0HT58WCkpKXr55Zc1evRorVq1ShLT1wIAAAC4NllZWRo6dKjq1q0rb29v3XjjjVqwYIFVnp6ergcffFA+Pj7y9/fX888/b7P95MmT1bRpU7m6ujKmBgCUGBJ/AOxu7ty5at26tTw8PNSzZ0+bsit9KY6OjlbLli3l7e2txo0ba926daUTdDn0wgsvyNPTUy+++KI+//xzeXp6qkuXLvLy8tLnn3+uDz74QNWqVVOdOnWUmpqqxYsXW9u+8cYb8vf3V/Xq1fXRRx9p06ZN1vvSgLIoLCxMvr6+cnNzU2RkpB599FEtX75cEtPXAgAAALg2ubm5CgwM1IYNG5Senq5FixbpySef1JdffilJGj16tE6fPq1jx45p27Ztevvtt21mH6lfv75mzJihu+++215NAABcB0j8AbC7oKAgTZo0SUOHDi1UdrkvxT/99JPuuecePffcc0pLS9OMGTPUu3dv/fTTT6URdrkzdepUGWNslpiYGEl/TuX51VdfKTU1VadOndJnn32mevXqWdsuXLhQqampysjI0JdffqkmTZrYqRXAtXF2tv3Kw/S1KGsudxPMle4cDw8Pl4eHh7y8vKzlt99+K8XoAQAArg+VKlXSc889pxtuuEFOTk5q27atOnbsqK+++krnzp3Thx9+qBdeeEF+fn5q2LChRo8erXfffdfafuDAgerWrZt8fHzs2AoAgKMj8QfA7nr16qWePXuqWrVqhcou96V43bp1atmypXr06CFnZ2f16NFDt9xyi83ddAAc16Wmr01NTdX//vc/nTt3Tnl5edq4caPmz5+v3r17W9syfS3KmsvdBHOlO8cl6ZVXXlFGRoa18FQ2AABAycvMzNTOnTt10003KTExUdnZ2WrevLlV3rx5c94lDgAodST+AJRb+fn5MsYUWseXauD6cKnpa3NycjRt2jQFBASocuXKGjt2rF5//XX16dPH2pbpa1HWXOommKLcOQ4AAIDSZ4zRI488ogYNGqhXr17KyMhQpUqV5OrqatXx8/PTH3/8YccoAQDXI9crVwGAsqlz584aP368Vq9erR49emjNmjWKjY1VeHi4vUO7Ksc9Kts7hDIvOOuMvUNAGTR16lRNnTr1omVxcXGX3XbhwoVauHBhCUQFFK9L3Tn+0ksv2dR74YUX9NxzzykkJERjx47VgAEDSjlSAACA64cxRiNGjFBiYqI2bNggZ2dneXl56dy5c8rNzbWSf2lpafL29rZztACA6w1P/AEot0JDQ7V8+XJNmzZNNWrU0Lvvvqu+ffuqatWq9g4NAIBiUZQ7x6dPn67Dhw8rJSVFL7/8skaPHq1Vq1bZI1wAAACHZ4zRyJEjFRcXpy+//FK+vr6S/rxG4ebmpr1791p14+Pj1bRpU3uFCgC4TpH4A1CuRUVF6dtvv9Xp06f1+eef69ChQ+rQoYO9wwIAoFhceOd4gb/eOR4WFiZfX1+5ubkpMjJSjz76qJYvX26PcAEAABzeqFGjFBsbq+joaFWu/H8z+FSsWFH333+/Jk+erLS0NB06dEhz5szRI488YtXJyclRZmam8vLylJeXp8zMTOXk5NijGQAAB8ZUnwDsLjc311ry8/OVmZkpZ2dnubu7Kycnx/pCXPCl2MXFRW5ubpKk3bt3q3nz5jp//rxmzpyp06dPa+DAgXZuEXB9e6ebm71DKNMe+YKBPYruwjvHW7VqJenKd447O3NvHwAAQEn4+eef9eabb8rDw0MhISHW+v79+2v+/PmaO3euHn30UdWqVUuenp4aNWqUzRTsQ4cO1eLFi63Pc+fO1cCBA7Vo0aLSbAYAwMGR+ANgdy+88IKmTZtmffb09FSHDh0UExNzxS/FEydOVFxcnJycnNS5c2dt3rxZlSpVKu0mAADwt1zqJpgL7xz/4IMPdOLECc2ZM0fPP/+8JCk1NVXbt29XeHi4PDw8FBMTo/nz5+vtt9+2c4sAAAAcT0hIiIwxlyz38fHRBx98cMnyRYsWkeQDAJQ4En8A7G7q1KmaOnXqRcuu9KU4Ojq6ZIICAKAUXe4mmMvdOZ6Tk6Np06apb9++kqQ6dero9ddfV58+fezSDgAAAAAAYF8k/gAAAAA7u9xNMJe7c7x69eqKi4srwcgAAAAAAEB5QuIPAAAARTZ37lwtWrRI+/fvV7du3bR69epCdVJSUtSoUSPVrl1b8fHxpR4jAACAI8qe7GHvEACH5v58lr1DAIBiQeIPwCWFbL/N3iGUaT+3+8reIaAcGjRokJYtWyZ3d3drXXR0tMLCwuwYFVB0QUFBmjRpkjZs2KBffvnlonVGjRqlFi1a6NSpU6UcHQAAAAAAwPWNxB8AAKVsxIgRmjVrlr3DAK5Jr169JEnx8fEXTfx9+umnOn36tB566CGH+T1///337R1Cmda/f397h1CsivJUKwAAAAAAZZWzvQMAAACAY0hLS9O4ceM0f/58e4cCXLOCp1qHDh1q71AAAAAAALhqJP4AAChlS5YsUZUqVdSkSRO99tprys/Pt3dIQLGYMGGCBg0apAYNGtg7FOCa9erVSz179lS1atXsHQoAAAAAAFeNqT4BAChFjz/+uF599VVVqVJFu3bt0n333SdnZ2eNHTvW3qEBf8u2bdsUGxurb775xt6hAAAAAAAAXLdI/AEAUIpatmxp/X/btm31zDPPaMmSJST+UO5t3LhRP/30k4KCgiRJWVlZOn/+vKpVq6b9+/crMDDQzhECAAAAAAA4Pqb6BADAjpyd+acY5Utubq4yMzOVm5ur/Px8ZWZmKjs7W+PGjdMPP/yg+Ph4xcfH67nnnlNoaKji4+NVo0YNe4cNAAAAAABwXeCJPwAAStGKFSvUtWtXeXt7a8+ePXr55Zc1cuRIe4cFFNkLL7ygadOmWZ89PT3VoUMHxcTEyMfHx1pfuXJlubm5qVatWvYIEwAAAAAA4Lp0XT1mMG/ePNWpU0cVKlRQmzZttHPnTnuHBAC4zsydO1e1a9eWt7e3+vXrpxEjRujJJ5+0d1hAkU2dOlXGGJslJiamUL1BgwYpPj6+1OMD/q5LPdWKso/xHgAAAABcR0/8LV++XOPGjdP8+fPVpk0bzZo1S5GRkUpMTGT6KQBAqdm6dau9QwAAXMblnmpF2cV4DwAAAAD+dN088ff6669r6NChevjhh9W4cWPNnz9fFStW1IIFC+wdGgAAAIAyoqhPtaJsYbwHAAAAAH+6Lp74y87O1p49ezRx4kRrnbOzsyIiIrRjxw47RgYAAHDtTt8TY+8QyrQqq8LtHQKAUsB4DwAAAAD+z3WR+Pv999+Vl5cnf39/m/X+/v46ePBgofpZWVnKysqyPqelpUmS0tPTL3sck8u7P64kPd29WPaTnWWKZT+Oyv0Kv6tFlX82t1j246iu1CcU1R+G3+crKa5z/cZtR4plP47q8a/qFst+zufyO305xfX7LEnpOWeLbV+OyLWYzvX58+eLZT+Oqjh/p3HtCn4O5jr8XnG14z3p2sd8xYWxI1CyiuvaQ1nDtRCgZBXX9bSyhut7QMkqrTHE1Yz5rovE39WaPn26zXs9CgQHB9shGsfi62vvCK4Tr3KiS4OvOM+lhs6jVEzmNJeKx/l9Lj2c6lIxbNgwe4eAC/zxxx/ypZ+5IsZ8gGOjGwRwTbieBuAalPY14qKM+a6LxF+1atXk4uKilJQUm/UpKSkKCAgoVH/ixIkaN26c9Tk/P1+nT59W1apV5eTkVOLxFpf09HQFBwfr+PHj8vHxsXc4DovzXDo4z6WHc106OM+lg/NcejjXpYPzXDrK43k2xuiPP/5QUFCQvUMpdVc73pMcZ8yHklce+wMA9kffAeBa0Hfgcq5mzHddJP7c3d3VqlUrbdy4UT179pT058Bu48aNGjVqVKH6Hh4e8vDwsFnn5+dXCpGWDB8fHzqKUsB5Lh2c59LDuS4dnOfSwXkuPZzr0sF5Lh3l7Txfr0/6Xe14T3K8MR9KXnnrDwCUDfQdAK4FfQcupahjvusi8SdJ48aN08CBA9W6dWvdcsstmjVrls6ePauHH37Y3qEBAAAAAP4GxnsAAAAA8KfrJvF3//336+TJk5oyZYqSk5PVvHlzrVu3rtAL4AEAAAAA5QvjPQAAAAD403WT+JOkUaNGXXKqF0fk4eGhZ599ttAUNihenOfSwXkuPZzr0sF5Lh2c59LDuS4dnOfSwXkun6638R5KB/0BgGtB3wHgWtB3oLg4GWOMvYMAAAAAAAAAAAAA8Pc42zsAAAAAAAAAAAAAAH8fiT8AAAAAAAAAAADAAZD4A4rJ1KlT1bx5c3uHAaAcGTRokHr27GnvMMqURYsWyc/Pz95hoIj+zs8rPDxcTzzxRLHGAwAAAAAAcL0j8VfOFOUicZ06dTRr1qwSjaO8X6w7efKkhg8frtq1a8vDw0MBAQGKjIxUbGysvUNzOMnJyRo9erTq1asnDw8PBQcH66677tLGjRvtHdp1hb7j8gYNGiQnJyc5OTnJzc1NdevW1YQJE5SZmWnv0Cz2ShIWpb90cnLS6tWrr3rfF/udu//++/XDDz/8zahRVPbso1euXKnnn3++xI9TlhX0PY899lihspEjR8rJyUmDBg2yqevk5CR3d3fVr19fzz33nHJzc/XJJ5/IxcVFv/7660WP06BBA40bN64km1IuXKk/u1RfdmH/27Rp04v+vCTpvffek4eHh37//feSagKAv+nCvvTCZe7cufL29lZubq5VNyMjQ25ubgoPD7fZR0xMjJycnHT48GFJf36fKdiPp6en6tSpo/vuu0+bNm0qzaYBKGE7duyQi4uL7rzzTmtd37591bVrV5t669atk5OTk6ZOnWqzfurUqapdu7Yk6ejRozZ9kLe3t5o0aaKRI0fq0KFDJd4WACXvcteZCvqJ5ORkm20CAwNVp04dm3UF/UXBGD08PNzar4eHh2rWrKm77rpLK1euLK2moZwg8XcNLnXxtWAAkJqaWqT9lNUL4MVp2rRp6t+/vyTbjqlgudSFk5LWu3dvffvtt1q8eLF++OEHffbZZwoPD9epU6fsEo+jOnr0qFq1aqVNmzbp1Vdf1f79+7Vu3Tp17NhRI0eOtHd4pY6+o+gu7DseffRR3XDDDfL09FT16tUVFRWlgwcPFvsxu3btqqSkJP3000+aOXOm/vvf/+rZZ58t9uPYW3Z29lXVL+3+0tPTUzVq1CiRfcOWvfrogt/BKlWqyNvbu8SOU14EBwfrww8/1Pnz5611mZmZWrZsmXVxqEBBP3Xo0CE9+eSTmjp1ql599VXdfffdqlq1qhYvXlxo/1u3btWPP/6oIUOGlHhbyrri6M+GDBlS6OdVYOHChbr77rtVrVq14gwbQDEr6EsvXDp37qyMjAzt3r3bqrdt2zYFBAQoLi7O5mawzZs3q3bt2rrhhhusdc8995ySkpKUmJioJUuWyM/PTxEREXrxxRdLtW0ASs67776r0aNHa+vWrfrtt98kSR07dlRsbKzNTQObN29WcHCwYmJibLbfvHmzOnbsaLNuw4YNSkpK0t69e/XSSy8pISFBzZo140ZpwEFc6jrTbbfdJldXV5t+IiEhQefPn9eZM2d09OhRa/3mzZvl4eGhW2+91Vo3dOhQJSUl6fDhw/rkk0/UuHFj9e3bV8OGDSvF1qGsI/GHEvXpp5/q7rvvtj4XdEwFy4wZM0o9ptTUVG3btk2vvPKKOnbsqJCQEN1yyy2aOHGiFWtqaqoeeeQRVa9eXT4+Prrjjju0d+9em/28/PLL8vf3l7e3t4YMGVLoyaBdu3apc+fOqlatmnx9fdWhQwd98803NnWcnJz0zjvv6J577lHFihXVoEEDffbZZyV7AkrRiBEj5OTkpJ07d6p3795q2LChmjRponHjxunrr7+WJB07dkxRUVHy8vKSj4+P7rvvPqWkpFj7uFiy7IknnrC58zY8PFyjRo3SqFGj5Ovrq2rVqmny5Mkyxlh1srKyNH78eNWsWVOVKlVSmzZtCn0RR9lxYd/RqlUrLVy4UAkJCVq/fr2MMerSpYvy8vKK9ZgFT38EBwerZ8+eioiIUHR0tKQ/f38ef/xx1ahRQxUqVNBtt92mXbt2Wdvm5eVpyJAhqlu3rjw9PRUaGqrZs2fb7D8vL0/jxo2Tn5+fqlatqgkTJtj8jkrSxx9/rKZNm8rT01NVq1ZVRESEzp49q6lTp2rx4sX69NNPrRsnCn5/jx8/rvvuu09+fn6qUqWKoqKibL4kFvwNvfjiiwoKClJoaGiRz0lR+suCu9HuueceOTk5WZ8PHz6sqKgo+fv7y8vLSzfffLM2bNhg7Ts8PFw///yzxo4da7VJuvjUkf/5z390ww03yN3dXaGhoXrvvfdsyq+2L507d67+8Y9/WJ9Xr14tJycnzZ8/31oXERGhSZMmFaktkpSUlKQ777xTnp6eqlu3rpYtW1boicYr9XcFU0a/9957qlOnjnx9fdW3b1/98ccfl2zL31GUPvr1119X06ZNValSJQUHB2vEiBHKyMgotK/Vq1erQYMGqlChgiIjI3X8+PFC7XrnnXdUt25dVahQQVLhmxjOnDmjAQMGqHLlyqpYsaK6det2Xdzx3LJlSwUHB9vcobly5UrVrl1bLVq0sKlb0E+FhIRo+PDhioiI0GeffSY3Nzc99NBDWrRoUaH9L1iwQG3atFGTJk1KuillWlH6s6Lo37+/zp8/r08++cRm/ZEjRxQTE0OCFSgHCvrSC5fQ0FAFBgbajA9iYmIUFRWlunXrWv8uFqz/68V7b29vBQQEqHbt2mrfvr3eeustTZ48WVOmTFFiYmJpNQ1ACcnIyNDy5cs1fPhw3XnnndZ3ro4dOxa6aSAmJkbPPPOMzU0DmZmZiouLK9R3VK1aVQEBAapXr56ioqK0YcMGtWnTRkOGDCn28S6A0nep60wF1xX++r3jtttu06233lpofdu2ba1xtCRVrFhRAQEBqlWrltq2batXXnlF//3vf/X2228XulaB6xeJvxJy6tQpPfDAA6pZs6YqVqyopk2b6oMPPrDKBw0apC1btmj27NnWBc+CC7UHDhxQjx495OPjI29vb91+++3WNCIF/v3vfyswMFBVq1bVyJEjlZOTY1P+xx9/6IEHHlClSpVUs2ZNzZs3z6a8KBfyYmNjFR4erooVK6py5cqKjIzUmTNnLtretWvXytfXV0uXLrXWHT9+XAcOHLCZ9qCgYypYfHx8in5Si4mXl5e8vLy0evVqZWVlXbROnz59dOLECX3xxRfas2ePWrZsqU6dOun06dOSpBUrVmjq1Kl66aWXtHv3bgUGBurNN9+02ccff/yhgQMH6quvvtLXX3+tBg0aqHv37oUu4E6bNk333Xef9u3bp+7du6tfv37Wccqz06dPa926dRo5cqQqVapUqNzPz0/5+fmKiorS6dOntWXLFkVHR+unn37S/ffff9XHW7x4sVxdXbVz507Nnj1br7/+ut555x2rfNSoUdqxY4c+/PBD7du3T3369FHXrl3L3EVl+o7CfcewYcPUvn171alTRy1bttQLL7yg48eP2yS3itt3332n7du3y93dXZI0YcIEffLJJ1q8eLG++eYb1a9fX5GRkdbfan5+vmrVqqWPPvpI33//vaZMmaJ//vOfWrFihbXP1157TYsWLdKCBQv01Vdf6fTp01q1apVVnpSUpAceeECDBw9WQkKCYmJi1KtXLxljNH78eN133302d6i3a9dOOTk5ioyMlLe3t7Zt26bY2Fh5eXmpa9euNk/2bdy4UYmJiYqOjtaaNWuKfB6K0l8WJEAXLlyopKQk63NGRoa6d++ujRs36ttvv1XXrl1111136dixY5L+TGzUqlXLukM+KSnpovtftWqVxowZoyeffFLfffedHn30UT388MPavHmzTb2r6Us7dOig77//XidPnpQkbdmyRdWqVbO+XOfk5GjHjh3WDQZXaoskDRgwQL/99ptiYmL0ySef6K233tKJEyes8qL2d4cPH9bq1au1Zs0arVmzRlu2bNHLL7980Xb8HUXpoyXJ2dlZb7zxhg4cOKDFixdr06ZNmjBhgk3dc+fO6cUXX9SSJUsUGxur1NRU9e3b16bOjz/+qE8++UQrV65UfHz8RWMaNGiQdu/erc8++0w7duyQMUbdu3cv1E85osGDB2vhwoXW5wULFujhhx++4naenp7W3/qQIUN06NAhbd261SrPyMjQxx9/TDJKRevPiqJatWqKiorSggULbNYvWrRItWrVUpcuXf5uqADspGPHjjbfLzZv3qzw8HB16NDBWn/+/PmLXry/mDFjxsgYo08//bTEYgZQOlasWKEbb7xRoaGh6t+/vxYsWCBjjBo2bKigoCCrj/jjjz/0zTffqE+fPqpTp4527NghSdq+fbuysrKu2Hc4OztrzJgx+vnnn7Vnz54SbxeA0vPX60xF+d4hXfyGo4sZOHCgKleuzJSf+D8GV23gwIEmKiqq0PrNmzcbSebMmTPml19+Ma+++qr59ttvzeHDh80bb7xhXFxcTFxcnDHGmNTUVBMWFmaGDh1qkpKSTFJSksnNzTW//PKLqVKliunVq5fZtWuXSUxMNAsWLDAHDx60ju3j42Mee+wxk5CQYD7//HNTsWJF89Zbb1lxhISEGG9vbzN9+nSTmJhoHfvLL7+06sycOdNs2rTJHDlyxGzcuNGEhoaa4cOHW+Xffvut8fDwMMOHDzfx8fHmu+++M3PmzDEnT540xhjToUMHM2bMGGOMMUuXLjXe3t7m888/tzkfc+fONV26dLE+d+jQwVSrVs1UrVrVNGnSxDzzzDPm7Nmzf++HcY0+/vhjU7lyZVOhQgXTrl07M3HiRLN3715jjDHbtm0zPj4+JjMz02abG264wfz3v/81xhgTFhZmRowYYVPepk0b06xZs0seMy8vr9B5kmQmTZpkfc7IyDCSzBdffPF3m2h3cXFxRpJZuXLlJet8+eWXxsXFxRw7dsxad+DAASPJ7Ny50xhz8b+3MWPGmA4dOlifO3ToYBo1amTy8/OtdU8//bRp1KiRMcaYn3/+2bi4uJhff/3VZj+dOnUyEydOvNYmXjX6jmvrOy6UkZFhnnjiCVO3bl2TlZV19T+ESxg4cKBxcXExlSpVMh4eHkaScXZ2Nh9//LHJyMgwbm5uZunSpVb97OxsExQUZGbMmHHJfY4cOdL07t3b+hwYGGhTPycnx9SqVcv6ndizZ4+RZI4ePXrJGP/6+/Pee++Z0NBQm9/9rKws4+npadavX29t5+/vf83n63L9ZQFJZtWqVVfcV5MmTcycOXOszyEhIWbmzJk2dRYuXGh8fX2tz+3atTNDhw61qdOnTx/TvXt3m+NfTV+an59vqlataj766CNjjDHNmzc306dPNwEBAcYYY7766ivj5uZ22X+jLmxLQkKCkWR27dpllR86dMhIstpXlP7u2WefNRUrVjTp6elWnaeeesq0adPmknFcq6L00Rfz0UcfmapVq1qfFy5caCSZr7/+2lpXcD4K+q1nn33WuLm5mRMnTtjs68L+4IcffjCSTGxsrFX++++/G09PT7NixYqrbV65UfB3feLECePh4WGOHj1qjh49aipUqGBOnjxpoqKizMCBA23qGvPn73B0dLTx8PAw48ePt/bXtm1bq74xxrz77ruFfqeuZ1fqzy7Vl/21/123bp1xcnIyP/30kzHmz59HSEiITT8EoGy68DtfwXLvvfcaY4x5++23TaVKlUxOTo5JT083rq6u5sSJE2bZsmWmffv2xhhjNm7caCSZn3/+2drnxb7PFPD397f5rgygfGrXrp2ZNWuWMebPcVy1atXM5s2bjTHG9OvXzxq/rl271jRu3NgYY8ywYcPMlClTjDHGTJ482dStW9fa35EjR4wk8+233xY6VsF36eXLl5dgiwCUtMtdZzLGmOjoaCPJ/Pbbb8YYY2rUqGF27txptm/fbkJCQowxxhw+fNhIMlu2bLH2e+E4+q/atGljunXrVqLtQvnhWmoZRgezZs0aeXl52ay78DH8mjVravz48dbn0aNHa/369VqxYoVuueUW+fr6yt3d3XoCrsC8efPk6+urDz/8UG5ubpKkhg0b2hyncuXKmjt3rlxcXHTjjTfqzjvv1MaNGzV06FCrzq233qpnnnnG2j42NlYzZ85U586dJclmaq06derohRde0GOPPWY9tTZjxgy1bt3a5im2i00RNW/ePP3rX//S559/rg4dOtiUffrpp4qKirI+P/jggwoJCVFQUJD27dunp59+WomJiXa5E6F379668847tW3bNn399df64osvNGPGDL3zzjs6e/asMjIyVLVqVZttzp8/bz09lZCQUOj9hGFhYTZ3ZKSkpGjSpEmKiYnRiRMnlJeXp3Pnztk8ISJJN910k/X/lSpVko+Pj81TIuWV+csUhheTkJCg4OBgBQcHW+saN24sPz8/JSQk6Oabby7y8dq2bWtNFSj9+fN47bXXlJeXp/379ysvL6/Q31JWVlahn3NJo+/4v3iL2ndI0ptvvqkJEybo7NmzCg0NVXR0tHWXVHHp2LGj/vOf/+js2bOaOXOmXF1d1bt3b+3bt085OTk286m7ubnplltuUUJCgk2bFixYoGPHjun8+fPKzs5W8+bNJUlpaWlKSkpSmzZtrPqurq5q3bq19bfSrFkzderUSU2bNlVkZKS6dOmie++9V5UrV75kzHv37tWPP/5Y6D1pmZmZNk97Nm3a9JrP1+X6y0GDBl1yu4yMDE2dOlVr165VUlKScnNzdf78+UJ94JUkJCQUmqf+1ltvLTSV6tX0pU5OTmrfvr1iYmIUERGh77//XiNGjNCMGTN08OBBbdmyRTfffLMqVqxYpLYkJibK1dVVLVu2tI5Rv359m59dUfu7OnXq2Pw8AwMDS+TfhKL00dKf7x2ZPn26Dh48qPT0dOXm5iozM1Pnzp2zzo+rq6tNf33jjTda7brlllskSSEhIapevfolj5OQkCBXV1ebv5GqVasqNDTU5u/MUVWvXt2aNsoYozvvvPOi74kr+DckJydH+fn5evDBBzV16lSrfPDgwRo7dqzmzJkjb29vLViwQH369OFdiv/ftfZnf9W5c2fVqlVLCxcu1HPPPaeNGzfq2LFjRXpKE4D9FXznK1Dw5Ht4eLjOnj2rXbt26cyZM2rYsKGqV6+uDh066OGHH1ZmZqZiYmJUr169Qu9gvRRjjM0YBUD5k5iYqJ07d1qztbi6uur+++/Xu+++q/DwcGv6+pycHMXExFizhnTo0EH//e9/JRX9iR3p/76n03cA5d+lrjNJUrt27eTu7q6YmBg1a9ZM58+fV8uWLZWfn6+TJ09arxLw9PRU27Zti3Q8vnfgQiT+rtFfBwuSFBcXp/79+0v680L+Sy+9pBUrVujXX39Vdna2srKyrItklxIfH6/bb7/dunB/MU2aNJGLi4v1OTAwUPv377epExYWVujzhe8ZutKFvPj4ePXp0+eysX788cc6ceKEYmNjCyVo0tPTtWXLFr377rvWugsv3DZt2lSBgYHq1KmTDh8+bPNi9NJSoUIFde7cWZ07d9bkyZP1yCOP6Nlnn9WIESMKvd+hwF/fO3U5AwcO1KlTpzR79myFhITIw8NDYWFhNtPvSSr0s3ZyclJ+fv61NKlMadCggZycnHTw4MG/tR9nZ+dCF6ivdtq3jIwMubi4aM+ePTZ/O5IKJeFKGn3H1fcdktSvXz917txZSUlJ+ve//6377rtPsbGxNnOc/12VKlVS/fr1Jf05zV6zZs307rvvFikB/eGHH2r8+PF67bXXFBYWJm9vb7366quKi4sr8vFdXFwUHR2t7du368svv9ScOXP0r3/9S3Fxcapbt+5Ft8nIyFCrVq1spkotcGGS5WJTOV6NS/WXl7tQPn78eEVHR+vf//636tevL09PT917772F+sDicrV9aXh4uN566y1t27ZNLVq0kI+Pj5UM3LJli01CujTbUlr/JhSljz569Kh69Oih4cOH68UXX1SVKlX01VdfaciQIcrOzr5iv3Shv/s7eD0YPHiwRo0aJUmFplkuUPBviLu7u4KCguTqavtVvm/fvho7dqxWrFih9u3bKzY2VtOnTy/x2MuTy/Vn3t7eSktLK7RNamqqfH19rc/Ozs4aNGiQFi9erKlTp2rhwoXq2LGj6tWrV5pNAXCNLvzOd6H69eurVq1a2rx5s86cOWN9FwgKClJwcLC2b9+uzZs364477ijScU6dOqWTJ09e8nscgPLh3XffVW5uroKCgqx1xhh5eHho7ty56tixo3XTwObNm/XUU09J+jPxN3jwYJ0+fVpxcXF69NFHi3S8gpve6DuA8u9S15mGDBmiihUr6pZbbtHmzZt1+vRp3XbbbXJxcZGLi4vatWunzZs3a/Pmzbr11luLdCN3Xl6eDh06dFUPUcCx8Y6/a1Twh3vhUrNmTav81Vdf1ezZs/X0009r8+bNio+PV2Rk5BUvEnp6el7x2H/3omDBhbybbrpJn3zyifbs2WNdYCqIryhxtGjRQtWrV7fmNr/QF198ocaNG9s82fBXBXf1//jjj0WOvSQ1btxYZ8+eVcuWLZWcnCxXV9dCP+OCu+8bNWpU6IL+hS98l/58z9njjz+u7t27q0mTJvLw8NDvv/9eau2xtypVqigyMlLz5s3T2bNnC5WnpqaqUaNGOn78uI4fP26t//7775WamqrGjRtL+jN58dd3f13s/VAX+3k0aNBALi4uatGihfLy8nTixIlCP9MLn5orDfQd19Z3+Pr6qkGDBmrfvr0+/vhjHTx40Ob9eMXN2dlZ//znPzVp0iTdcMMNcnd3V2xsrFWek5OjXbt2Wb+nsbGxateunUaMGKEWLVqofv36Nk/c+fr6KjAw0Ob3NDc3t9B7G5ycnHTrrbdq2rRp+vbbb+Xu7m61093dvdAL3lu2bKlDhw6pRo0ahX6vLrxIXdwK+ssCbm5uhWKLjY3VoEGDdM8996hp06YKCAgo9F7Gi7Xprxo1amRz7gv2XXDur1XBe/4++ugj667c8PBwbdiwwXpPZVHbEhoaqtzcXH377bfWuh9//NHm3ZZF6e9KU1H66D179ig/P1+vvfaa2rZtq4YNG+q3334rVDc3N1e7d++2PicmJlp9fFE1atRIubm5Nn8jp06dUmJiol3Ojz0UvJuz4N2dF1Pwb0jt2rULJf0kydvbW3369NGCBQu0cOFCNWzYULfffntJh16uXdifhYaGFuqX8/LytHfv3kJP0T/88MM6fvy4Vq5cqVWrVvEeRcBBdOzYUTExMTZP7UhS+/bt9cUXX2jnzp1Ffmpn9uzZcnZ2Vs+ePUsmWAAlLjc3V0uWLNFrr72m+Ph4a9m7d6+CgoL0wQcf6IYbblBwcLA+++wzxcfHWzcN1KxZUzVr1tRrr72m7OzsIvUd+fn5euONN1S3bl21aNGipJsHoBRdeJ3p/Pnzki7/vaPgpuSifu9YvHixzpw5Yz1RCJD4KyGxsbGKiopS//791axZM9WrV08//PCDTZ2LXfC86aabtG3btqt+oumv/pqE+vrrr60LcEW5kHfTTTdp48aNlz3GDTfcoM2bN+vTTz/V6NGjbcouNlXfXxUkbwIDA4vSpGJz6tQp3XHHHXr//fe1b98+HTlyRB999JFmzJihqKgoRUREKCwsTD179tSXX36po0ePavv27frXv/5lXdgcM2aMdVHthx9+0LPPPqsDBw7YHKdBgwZ67733lJCQoLi4OPXr169ISRFHMm/ePOXl5emWW27RJ598okOHDikhIUFvvPGGwsLCFBERoaZNm6pfv3765ptvtHPnTg0YMEAdOnRQ69atJUl33HGHdu/erSVLlujQoUN69tln9d133xU61rFjxzRu3DglJibqgw8+0Jw5czRmzBhJf05Z2a9fPw0YMEArV67UkSNHtHPnTk2fPl1r164t1XNyJfQdV+47jDEyxigrK6uozbomffr0kYuLi/7zn/9o+PDheuqpp7Ru3Tp9//33Gjp0qM6dO2dd6G3QoIF2796t9evX64cfftDkyZO1a9cum/2NGTNGL7/8slavXq2DBw9qxIgRSk1Ntcrj4uL00ksvaffu3Tp27JhWrlypkydPWue/Tp062rdvnxITE/X7778rJydH/fr1U7Vq1RQVFaVt27ZZU0E8/vjj+uWXX/72ObhSf1mgTp062rhxo5KTk61kV4MGDbRy5UprYPzggw8WSjTXqVNHW7du1a+//nrJGyOeeuopLVq0SP/5z3906NAhvf7661q5cqXNlLjX4qabblLlypW1bNkym8Tf6tWrlZWVZTO165XacuONNyoiIkLDhg3Tzp079e2332rYsGHy9PS0ptkoSn9X2q7UR9evX185OTmaM2eOfvrpJ7333nuaP39+of24ublp9OjRiouL0549ezRo0CC1bdvWmuazKBo0aKCoqCgNHTpUX331lfbu3av+/furZs2aV+wTHIWLi4sSEhL0/fffF3o6/WoMGTJE27dv1/z58zV48OBijLB8K0p/Nm7cOL3zzjt68803dejQIcXHx2vYsGE6c+aMHnnkEZv9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",
      "text/plain": [
       "<Figure size 1800x1000 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "categorical_columns = [ 'TransmissionType',\n",
    "                       'FuelType', 'BodyType', 'DriveTrain']\n",
    "\n",
    "# Create subplots\n",
    "fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(18, 10))\n",
    "axes = axes.ravel()  # Flatten the 2D array of axes\n",
    "\n",
    "# Loop through each categorical column\n",
    "for i, column in enumerate(categorical_columns):\n",
    "    sns.countplot(x=pandas_df[column], data=pandas_df, palette='bright', ax=axes[i], saturation=0.95)\n",
    "    for container in axes[i].containers:\n",
    "        axes[i].bar_label(container, color='black', size=9)\n",
    "    axes[i].set_title(f'Count Plot of {column.capitalize()}')\n",
    "    axes[i].set_xlabel(column.capitalize())\n",
    "    axes[i].set_ylabel('Count')\n",
    "\n",
    "# Adjust layout and show plots\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "b4a65696-1389-4ed3-8b2e-7a241dfc543f",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "display_data",
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "n = 20  # Number of top car models to plot\n",
    "top_car_models = pandas_df['Brand'].value_counts().head(n)\n",
    "\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.barplot(x=top_car_models.values, y=top_car_models.index)\n",
    "plt.title(f'Top {n} Car Brand by Frequency')\n",
    "plt.xlabel('Frequency')\n",
    "plt.ylabel('Brand')\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "29034522-22e6-44ca-9116-760a94d1c40b",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "display_data",
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Calculate average price for each car model\n",
    "avg_prices_by_car = pandas_df.groupby('Brand')['Price(TRY)'].mean().sort_values(ascending=False)\n",
    "\n",
    "# Plot top N car models by average price\n",
    "n = 10  # Number of top car models to plot\n",
    "top_car_models = avg_prices_by_car.head(n)\n",
    "\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.barplot(x=top_car_models.values, y=top_car_models.index)\n",
    "plt.title(f'Top {n} Car Brands by Average Price')\n",
    "plt.xlabel('Average Price')\n",
    "plt.ylabel('Car Brands')\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "d0a56440-57a8-4faa-83bc-536affdb8c8d",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "display_data",
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2000x2500 with 5 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Gruplanacak kategorik sütunlar\n",
    "group_columns = [\"Brand\", \"FuelType\", \"TransmissionType\", \"BodyType\", \"City\"]\n",
    "\n",
    "# Görsel ayarları\n",
    "plt.figure(figsize=(20, 25))\n",
    "\n",
    "for i, col in enumerate(group_columns):\n",
    "    plt.subplot(3, 2, i+1)\n",
    "    \n",
    "    # Ortalama fiyatı hesapla\n",
    "    mean_prices = pandas_df.groupby(col)[\"Price(TRY)\"].mean().sort_values(ascending=False).head(20)\n",
    "    \n",
    "    # Barplot çiz\n",
    "    sns.barplot(x=mean_prices.values, y=mean_prices.index, palette=\"viridis\")\n",
    "    plt.title(f\"Average Price by {col}\")\n",
    "    plt.xlabel(\"Average Price (TRY)\")\n",
    "    plt.ylabel(col)\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "2a0e130e-69e5-41f6-92b1-3910e5aaf784",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "#removed outliers\n",
    "\n",
    "def remove_outliers_iqr(df):\n",
    "    pandas_df_2 = pandas_df.copy()\n",
    "    numerical_cols = pandas_df.select_dtypes(include=['int64', 'float64']).columns\n",
    "\n",
    "    for col in numerical_cols:\n",
    "        Q1 = pandas_df_2[col].quantile(0.25)\n",
    "        Q3 = pandas_df_2[col].quantile(0.75)\n",
    "        IQR = Q3 - Q1\n",
    "        lower_bound = Q1 - 1.5 * IQR\n",
    "        upper_bound = Q3 + 1.5 * IQR\n",
    "\n",
    "        pandas_df_2 = pandas_df[(pandas_df[col] >= lower_bound) & (pandas_df[col] <= upper_bound)]\n",
    "\n",
    "    return pandas_df_2\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "6a70d283-2667-47cf-a011-b608894622bf",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "df_outlier_removed = remove_outliers_iqr(pandas_df)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "3d329f87-5cc1-4909-97c3-080468bee1bc",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Orijinal veri boyutu: (6675, 21)\nOutlier'lar temizlendikten sonra: (6020, 21)\n"
     ]
    }
   ],
   "source": [
    "print(\"Orijinal veri boyutu:\", pandas_df.shape)\n",
    "print(\"Outlier'lar temizlendikten sonra:\", df_outlier_removed.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "da0852fd-ba2e-49f6-aee0-4497e25370fc",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "display_data",
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "plt.figure(figsize=(12, 5))\n",
    "\n",
    "# Temizleme öncesi\n",
    "plt.subplot(1, 2, 1)\n",
    "sns.boxplot(x=pandas_df[\"Price(TRY)\"])\n",
    "plt.title(\"Price – Before Cleaning\")\n",
    "\n",
    "# Temizleme sonrası\n",
    "plt.subplot(1, 2, 2)\n",
    "sns.boxplot(x=df_outlier_removed[\"Price(TRY)\"])\n",
    "plt.title(\"Price – After Cleaning\")\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "13f14e8d-3f14-4d6f-8dca-f11563522509",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ListingTitle</th>\n",
       "      <th>District</th>\n",
       "      <th>City</th>\n",
       "      <th>Price(TRY)</th>\n",
       "      <th>ListingID</th>\n",
       "      <th>ListingDate</th>\n",
       "      <th>Brand</th>\n",
       "      <th>Series</th>\n",
       "      <th>Model</th>\n",
       "      <th>Year</th>\n",
       "      <th>Mileage(km)</th>\n",
       "      <th>TransmissionType</th>\n",
       "      <th>FuelType</th>\n",
       "      <th>BodyType</th>\n",
       "      <th>Color</th>\n",
       "      <th>EngineSize(cc)</th>\n",
       "      <th>EnginePower(HP)</th>\n",
       "      <th>DriveTrain</th>\n",
       "      <th>PaintAndPartsCondition</th>\n",
       "      <th>SellerType</th>\n",
       "      <th>AccidentHistory</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2016 AUDİ A3 SPORTBACK 1.0 TFSI BOYASIZ/DEĞİŞE...</td>\n",
       "      <td>Aşağısoku Mh. Merkez</td>\n",
       "      <td>Bolu</td>\n",
       "      <td>1169000</td>\n",
       "      <td>27812680</td>\n",
       "      <td>2025-04-07</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A3</td>\n",
       "      <td>A3 Sportback 1.0 TFSI Dynamic</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>120000.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>Hatchback/5</td>\n",
       "      <td>White</td>\n",
       "      <td>1200.0</td>\n",
       "      <td>113.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  Right Rear Fender  Trunk Lid  Left R...</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>No_Info</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2018 AUDİ A6 2.0 TDI QUATTRO SUNROOF MATRİX VA...</td>\n",
       "      <td>Güneşevler Mh. Altındağ</td>\n",
       "      <td>Ankara</td>\n",
       "      <td>2450000</td>\n",
       "      <td>28816234</td>\n",
       "      <td>2025-04-07</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A6</td>\n",
       "      <td>A6 Sedan 2.0 TDI Quattro</td>\n",
       "      <td>2018.0</td>\n",
       "      <td>136000.0</td>\n",
       "      <td>Semi-Automatic</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>Black</td>\n",
       "      <td>1968.0</td>\n",
       "      <td>190.0</td>\n",
       "      <td>AWD</td>\n",
       "      <td>Original  Trunk Lid  Right Rear Door  Right Fr...</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Amount not specified</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Sahibinden Audi A4 Sedan 1.8 TFSI 2011 Model</td>\n",
       "      <td>Burmalı Mh. Merkez</td>\n",
       "      <td>Afyonkarahisar</td>\n",
       "      <td>750000</td>\n",
       "      <td>28781662</td>\n",
       "      <td>2025-04-08</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A4</td>\n",
       "      <td>A4 Sedan 1.8 TFSI</td>\n",
       "      <td>2011.0</td>\n",
       "      <td>285000.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>White</td>\n",
       "      <td>1798.0</td>\n",
       "      <td>160.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  Roof  Left Front Door  Hood  Front B...</td>\n",
       "      <td>Private Seller</td>\n",
       "      <td>75.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2016 AUDI A3 AMBİENTE *CAM TAVAN LED XENON HIZ...</td>\n",
       "      <td>Ilıca Mh. Manavgat</td>\n",
       "      <td>Antalya</td>\n",
       "      <td>1195000</td>\n",
       "      <td>28731117</td>\n",
       "      <td>2025-04-03</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A3</td>\n",
       "      <td>A3 Sportback 1.6 TDI Ambiente</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>101000.0</td>\n",
       "      <td>Semi-Automatic</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Hatchback/5</td>\n",
       "      <td>Black</td>\n",
       "      <td>1598.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  Right Rear Fender  Trunk Lid  Right ...</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>No tram amount</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Sahibinden Audi A3 Sportback 1.6 TDI S-Line 20...</td>\n",
       "      <td>Uğur Mumcu Mh. Yenimahalle</td>\n",
       "      <td>Ankara</td>\n",
       "      <td>822000</td>\n",
       "      <td>28393351</td>\n",
       "      <td>2025-04-02</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A3</td>\n",
       "      <td>A3 Sportback 1.6 TDI Attraction</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>212000.0</td>\n",
       "      <td>Semi-Automatic</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Hatchback/5</td>\n",
       "      <td>White</td>\n",
       "      <td>1598.0</td>\n",
       "      <td>105.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  Right Rear Fender  Trunk Lid  Left R...</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>Amount not specified</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6670</th>\n",
       "      <td>Sahibinden Opel Corsa 1.3 CDTI Enjoy 111 2010 ...</td>\n",
       "      <td>Karapürçek Mh. Altındağ</td>\n",
       "      <td>Ankara</td>\n",
       "      <td>450000</td>\n",
       "      <td>29019564</td>\n",
       "      <td>2025-04-16</td>\n",
       "      <td>Opel</td>\n",
       "      <td>Corsa</td>\n",
       "      <td>1.3 CDTI Enjoy 111</td>\n",
       "      <td>2010.0</td>\n",
       "      <td>257000.0</td>\n",
       "      <td>Manual</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Hatchback/5</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>1248.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  Right Rear Fender  Trunk Lid  Left R...</td>\n",
       "      <td>Private Seller</td>\n",
       "      <td>No tram amount</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6671</th>\n",
       "      <td>ÇORUM MERKEZ 1999 HONDA CİVİC 1.4is TAVAN BOYASIZ</td>\n",
       "      <td>Ak Kent Mh. Merkez</td>\n",
       "      <td>Çorum</td>\n",
       "      <td>355000</td>\n",
       "      <td>29019753</td>\n",
       "      <td>2025-04-16</td>\n",
       "      <td>Honda</td>\n",
       "      <td>Civic</td>\n",
       "      <td>1.4 i S</td>\n",
       "      <td>1999.0</td>\n",
       "      <td>304000.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>LPG &amp; Gasoline</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>1396.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  Roof  Locally Painted  -  Painted  R...</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>No tram amount</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6672</th>\n",
       "      <td>Sahibinden Peugeot 206 1.4 X-Design 2005 Model</td>\n",
       "      <td>Cumhuriyet Mh. Lüleburgaz</td>\n",
       "      <td>Kırklareli</td>\n",
       "      <td>375000</td>\n",
       "      <td>29018858</td>\n",
       "      <td>2025-04-16</td>\n",
       "      <td>Peugeot</td>\n",
       "      <td>206</td>\n",
       "      <td>1.4 X-Design</td>\n",
       "      <td>2005.0</td>\n",
       "      <td>208000.0</td>\n",
       "      <td>Manual</td>\n",
       "      <td>LPG &amp; Gasoline</td>\n",
       "      <td>Hatchback/3</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>1360.0</td>\n",
       "      <td>76.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  -  Locally Painted  -  Painted  Righ...</td>\n",
       "      <td>Private Seller</td>\n",
       "      <td>Tramer  3.000 TL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6673</th>\n",
       "      <td>Sahibinden Peugeot 206 1.6 XT 2001 Model</td>\n",
       "      <td>Batıkent Mh. Şehitkamil</td>\n",
       "      <td>Gaziantep</td>\n",
       "      <td>220000</td>\n",
       "      <td>29019438</td>\n",
       "      <td>2025-04-16</td>\n",
       "      <td>Peugeot</td>\n",
       "      <td>206</td>\n",
       "      <td>1.6 XT</td>\n",
       "      <td>2001.0</td>\n",
       "      <td>138000.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>LPG &amp; Gasoline</td>\n",
       "      <td>Hatchback/5</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>1587.0</td>\n",
       "      <td>109.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  Right Rear Fender  Trunk Lid  Left R...</td>\n",
       "      <td>Private Seller</td>\n",
       "      <td>No_Info</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6674</th>\n",
       "      <td>Galeriden Renault Megane 1.5 dCi Touch Plus 20...</td>\n",
       "      <td>Yukarı Dudullu Mh. Ümraniye</td>\n",
       "      <td>İstanbul</td>\n",
       "      <td>770000</td>\n",
       "      <td>29022036</td>\n",
       "      <td>2025-04-16</td>\n",
       "      <td>Renault</td>\n",
       "      <td>Megane</td>\n",
       "      <td>1.5 dCi Touch Plus</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>260000.0</td>\n",
       "      <td>Semi-Automatic</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>1461.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Original  -  Locally Painted  -  Painted  -  R...</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>No_Info</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>6675 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                           ListingTitle  ...       AccidentHistory\n",
       "0     2016 AUDİ A3 SPORTBACK 1.0 TFSI BOYASIZ/DEĞİŞE...  ...               No_Info\n",
       "1     2018 AUDİ A6 2.0 TDI QUATTRO SUNROOF MATRİX VA...  ...  Amount not specified\n",
       "2          Sahibinden Audi A4 Sedan 1.8 TFSI 2011 Model  ...                75.000\n",
       "3     2016 AUDI A3 AMBİENTE *CAM TAVAN LED XENON HIZ...  ...        No tram amount\n",
       "4     Sahibinden Audi A3 Sportback 1.6 TDI S-Line 20...  ...  Amount not specified\n",
       "...                                                 ...  ...                   ...\n",
       "6670  Sahibinden Opel Corsa 1.3 CDTI Enjoy 111 2010 ...  ...        No tram amount\n",
       "6671  ÇORUM MERKEZ 1999 HONDA CİVİC 1.4is TAVAN BOYASIZ  ...        No tram amount\n",
       "6672     Sahibinden Peugeot 206 1.4 X-Design 2005 Model  ...      Tramer  3.000 TL\n",
       "6673           Sahibinden Peugeot 206 1.6 XT 2001 Model  ...               No_Info\n",
       "6674  Galeriden Renault Megane 1.5 dCi Touch Plus 20...  ...               No_Info\n",
       "\n",
       "[6675 rows x 21 columns]"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pandas_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "67ede55f-a6a8-4094-8840-c9abbf309ed9",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['ListingTitle', 'District', 'City', 'Price(TRY)', 'ListingID', 'ListingDate', 'Brand', 'Series', 'Model', 'Year', 'Mileage(km)', 'TransmissionType', 'FuelType', 'BodyType', 'Color', 'EngineSize(cc)', 'EnginePower(HP)', 'DriveTrain', 'PaintAndPartsCondition', 'SellerType', 'AccidentHistory']\n"
     ]
    }
   ],
   "source": [
    "print(pandas_df.columns.tolist())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "e9314bd2-90bd-4b48-a1ad-289310054a88",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "from datetime import datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "263353ca-3879-4521-9484-1a733fbd8779",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    " #District ---> NEW_District\n",
    "pandas_df['NEW_District'] = pandas_df['District'].apply(lambda x: x.split()[-1])\n",
    "pandas_df.drop('District', axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "7900933a-7f18-4f7e-bc7a-69b0a6c2d803",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "# ListingDate ---> NEW_DaysSinceListing\n",
    "current_date = datetime.now()\n",
    "pandas_df['NEW_DaysSinceListing'] = (current_date - pandas_df['ListingDate']).dt.days"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "30054ec9-0008-42db-9734-7f5b032dc2de",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "# Year ---> NEW_CarAge\n",
    "pandas_df['NEW_CarAge'] = (current_date.date().year - pandas_df['Year'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "f1c39282-102f-4e27-8bab-a5ceb0c33fab",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "# Mileage(km) --->  NEW_KmPerYear, NEW_KmCategory\n",
    "pandas_df['NEW_KmPerYear'] = pandas_df['Mileage(km)'] / (pandas_df['NEW_CarAge'] + 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "3c574b6f-749c-4545-b283-4f1fd06e3183",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "bins = [0, 50000, 100000, 150000, 200000, 300000, np.inf]\n",
    "labels = [\"0-50K\", \"50-100K\", \"100-150K\", \"150-200K\", \"200-300K\", \"300K+\"]\n",
    "pandas_df[\"NEW_KmCategory\"] = pd.cut(pandas_df[\"Mileage(km)\"], bins=bins, labels=labels)\n",
    "pandas_df[\"NEW_KmCategory\"] = pandas_df[\"NEW_KmCategory\"].astype(\"O\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "7facce9a-2c36-43a6-afc5-f9f07f696255",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "\n",
    "# Brand + Price(TRY) ---> NEW_AvgPricePerBrand\n",
    "pandas_df['NEW_AvgPricePerBrandSeries'] = pandas_df.groupby(['Brand', 'Series'])['Price(TRY)'].transform('mean')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "76f62a12-6c9c-4121-a385-79ba7fad724d",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "# Brand + Price(TRY) ---> NEW_AvgKmPerBrandSeries\n",
    "pandas_df['NEW_AvgKmPerBrandSeries'] = pandas_df.groupby(['Brand', 'Series'])['Mileage(km)'].transform('mean')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "24094bce-3d1b-477e-97b5-278822a1c117",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "# NEW_District + Price(TRY) ---> NEW_DistrictAvgPrice\n",
    "pandas_df['NEW_DistrictAvgPrice'] = pandas_df.groupby('NEW_District')['Price(TRY)'].transform('mean')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "3ec9be49-bcef-4e4d-9f52-fad69440cad8",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    " #PaintAndPartsCondition ---> NEW_NumOriginalParts, NEW_NumLocalPaintedParts, NEW_NumPaintedParts, NEW_NumChangedParts, NEW_NumUnknownParts\n",
    "parts_list = [\n",
    "    \"Right Front Door\", \"Right Rear Door\", \"Left Front Door\", \"Left Rear Door\",\n",
    "    \"Right Front Fender\", \"Left Front Fender\", \"Right Rear Fender\", \"Left Rear Fender\",\n",
    "    \"Trunk Lid\", \"Hood\", \"Roof\", \"Front Bumper\", \"Rear Bumper\"\n",
    "]\n",
    "def count_parts_by_category(text):\n",
    "    categories = ['Original', 'Locally Painted', 'Painted', 'Replaced', 'Not Specified']\n",
    "    result = dict.fromkeys([c + \"_Count\" for c in categories], 0)\n",
    "\n",
    "    for i, cat in enumerate(categories):\n",
    "        try:\n",
    "            start = text.index(cat) + len(cat)\n",
    "            end = text.index(categories[i + 1]) if i + 1 < len(categories) else len(text)\n",
    "            segment = text[start:end]\n",
    "            count = sum(1 for part in parts_list if part in segment)\n",
    "            result[cat + \"_Count\"] = count\n",
    "        except ValueError:\n",
    "            result[cat + \"_Count\"] = 0\n",
    "\n",
    "    return pd.Series(result)\n",
    "pandas_df[['NEW_NumOriginalParts', 'NEW_NumLocalPaintedParts', 'NEW_NumPaintedParts', 'NEW_NumChangedParts', 'NEW_NumUnknownParts']] = pandas_df['PaintAndPartsCondition'].apply(count_parts_by_category)\n",
    "pandas_df.drop('PaintAndPartsCondition', axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "e8604f8e-8a25-4e3e-8522-2e3d705644b5",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "\n",
    "# AccidentHistory ---> NEW_HasDamage, NEW_HasHighDamage, NEW_DamageCost\n",
    "def detect_damage(x):\n",
    "    if pd.isna(x):  # Gerçek NaN\n",
    "        return -1\n",
    "    x = str(x).strip().lower().replace('\\n', '').replace('\\r', '')\n",
    "    if 'No tram amount' in x or x == 'No':\n",
    "        return 0\n",
    "    elif 'ağır hasar' in x or any(char.isdigit() for char in x):\n",
    "        return 1\n",
    "    elif 'Not Specified' in x or x == '' or x == 'nan':\n",
    "        return -1\n",
    "    else:\n",
    "        return 1  # Emin olunamayan ama boş olmayan değerler\n",
    "pandas_df['NEW_HasDamage'] = pandas_df['AccidentHistory'].apply(detect_damage)\n",
    "\n",
    "pandas_df['NEW_HasHighDamage'] = pandas_df['AccidentHistory'].apply(\n",
    "    lambda x: 1 if isinstance(x, str) and 'ağır hasar' in x.lower().replace('\\n', '').replace('\\r', '') else 0)\n",
    "\n",
    "def extract_cost(val):\n",
    "    if isinstance(val, str):\n",
    "        # Sayı içeriyorsa ayıkla\n",
    "        match = re.search(r'\\d[\\d\\.]*', val)\n",
    "        if match:\n",
    "            return float(match.group(0).replace('.', '').replace(',', '.'))\n",
    "    return np.nan\n",
    "pandas_df['NEW_DamageCost'] = pandas_df['AccidentHistory'].apply(extract_cost)\n",
    "pandas_df.drop('AccidentHistory', axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "3aa52068-1992-4918-b4ba-174044fdc7c8",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ListingTitle</th>\n",
       "      <th>City</th>\n",
       "      <th>Price(TRY)</th>\n",
       "      <th>ListingID</th>\n",
       "      <th>ListingDate</th>\n",
       "      <th>Brand</th>\n",
       "      <th>Series</th>\n",
       "      <th>Model</th>\n",
       "      <th>Year</th>\n",
       "      <th>Mileage(km)</th>\n",
       "      <th>TransmissionType</th>\n",
       "      <th>FuelType</th>\n",
       "      <th>BodyType</th>\n",
       "      <th>Color</th>\n",
       "      <th>EngineSize(cc)</th>\n",
       "      <th>EnginePower(HP)</th>\n",
       "      <th>DriveTrain</th>\n",
       "      <th>SellerType</th>\n",
       "      <th>NEW_District</th>\n",
       "      <th>NEW_DaysSinceListing</th>\n",
       "      <th>NEW_CarAge</th>\n",
       "      <th>NEW_KmPerYear</th>\n",
       "      <th>NEW_KmCategory</th>\n",
       "      <th>NEW_AvgPricePerBrandSeries</th>\n",
       "      <th>NEW_AvgKmPerBrandSeries</th>\n",
       "      <th>NEW_DistrictAvgPrice</th>\n",
       "      <th>NEW_NumOriginalParts</th>\n",
       "      <th>NEW_NumLocalPaintedParts</th>\n",
       "      <th>NEW_NumPaintedParts</th>\n",
       "      <th>NEW_NumChangedParts</th>\n",
       "      <th>NEW_NumUnknownParts</th>\n",
       "      <th>NEW_HasDamage</th>\n",
       "      <th>NEW_HasHighDamage</th>\n",
       "      <th>NEW_DamageCost</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2016 AUDİ A3 SPORTBACK 1.0 TFSI BOYASIZ/DEĞİŞE...</td>\n",
       "      <td>Bolu</td>\n",
       "      <td>1169000</td>\n",
       "      <td>27812680</td>\n",
       "      <td>2025-04-07</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A3</td>\n",
       "      <td>A3 Sportback 1.0 TFSI Dynamic</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>120000.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>Hatchback/5</td>\n",
       "      <td>White</td>\n",
       "      <td>1200.0</td>\n",
       "      <td>113.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>Merkez</td>\n",
       "      <td>44</td>\n",
       "      <td>9.0</td>\n",
       "      <td>12000.000000</td>\n",
       "      <td>100-150K</td>\n",
       "      <td>1.166780e+06</td>\n",
       "      <td>161224.075893</td>\n",
       "      <td>639596.317662</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2018 AUDİ A6 2.0 TDI QUATTRO SUNROOF MATRİX VA...</td>\n",
       "      <td>Ankara</td>\n",
       "      <td>2450000</td>\n",
       "      <td>28816234</td>\n",
       "      <td>2025-04-07</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A6</td>\n",
       "      <td>A6 Sedan 2.0 TDI Quattro</td>\n",
       "      <td>2018.0</td>\n",
       "      <td>136000.0</td>\n",
       "      <td>Semi-Automatic</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>Black</td>\n",
       "      <td>1968.0</td>\n",
       "      <td>190.0</td>\n",
       "      <td>AWD</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Altındağ</td>\n",
       "      <td>44</td>\n",
       "      <td>7.0</td>\n",
       "      <td>17000.000000</td>\n",
       "      <td>100-150K</td>\n",
       "      <td>2.131899e+06</td>\n",
       "      <td>228153.204082</td>\n",
       "      <td>615934.150000</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Sahibinden Audi A4 Sedan 1.8 TFSI 2011 Model</td>\n",
       "      <td>Afyonkarahisar</td>\n",
       "      <td>750000</td>\n",
       "      <td>28781662</td>\n",
       "      <td>2025-04-08</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A4</td>\n",
       "      <td>A4 Sedan 1.8 TFSI</td>\n",
       "      <td>2011.0</td>\n",
       "      <td>285000.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>White</td>\n",
       "      <td>1798.0</td>\n",
       "      <td>160.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Private Seller</td>\n",
       "      <td>Merkez</td>\n",
       "      <td>43</td>\n",
       "      <td>14.0</td>\n",
       "      <td>19000.000000</td>\n",
       "      <td>200-300K</td>\n",
       "      <td>1.331756e+06</td>\n",
       "      <td>209684.351351</td>\n",
       "      <td>639596.317662</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>75000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2016 AUDI A3 AMBİENTE *CAM TAVAN LED XENON HIZ...</td>\n",
       "      <td>Antalya</td>\n",
       "      <td>1195000</td>\n",
       "      <td>28731117</td>\n",
       "      <td>2025-04-03</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A3</td>\n",
       "      <td>A3 Sportback 1.6 TDI Ambiente</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>101000.0</td>\n",
       "      <td>Semi-Automatic</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Hatchback/5</td>\n",
       "      <td>Black</td>\n",
       "      <td>1598.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manavgat</td>\n",
       "      <td>48</td>\n",
       "      <td>9.0</td>\n",
       "      <td>10100.000000</td>\n",
       "      <td>100-150K</td>\n",
       "      <td>1.166780e+06</td>\n",
       "      <td>161224.075893</td>\n",
       "      <td>940699.962963</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Sahibinden Audi A3 Sportback 1.6 TDI S-Line 20...</td>\n",
       "      <td>Ankara</td>\n",
       "      <td>822000</td>\n",
       "      <td>28393351</td>\n",
       "      <td>2025-04-02</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A3</td>\n",
       "      <td>A3 Sportback 1.6 TDI Attraction</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>212000.0</td>\n",
       "      <td>Semi-Automatic</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Hatchback/5</td>\n",
       "      <td>White</td>\n",
       "      <td>1598.0</td>\n",
       "      <td>105.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>Yenimahalle</td>\n",
       "      <td>49</td>\n",
       "      <td>13.0</td>\n",
       "      <td>15142.857143</td>\n",
       "      <td>200-300K</td>\n",
       "      <td>1.166780e+06</td>\n",
       "      <td>161224.075893</td>\n",
       "      <td>791699.214286</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                        ListingTitle  ... NEW_DamageCost\n",
       "0  2016 AUDİ A3 SPORTBACK 1.0 TFSI BOYASIZ/DEĞİŞE...  ...            NaN\n",
       "1  2018 AUDİ A6 2.0 TDI QUATTRO SUNROOF MATRİX VA...  ...            NaN\n",
       "2       Sahibinden Audi A4 Sedan 1.8 TFSI 2011 Model  ...        75000.0\n",
       "3  2016 AUDI A3 AMBİENTE *CAM TAVAN LED XENON HIZ...  ...            NaN\n",
       "4  Sahibinden Audi A3 Sportback 1.6 TDI S-Line 20...  ...            NaN\n",
       "\n",
       "[5 rows x 34 columns]"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pandas_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "e867c1fa-dced-4240-a7dc-852c5dc5d631",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "ListingTitle                     0\n",
       "City                             0\n",
       "Price(TRY)                       0\n",
       "ListingID                        0\n",
       "ListingDate                      0\n",
       "Brand                            0\n",
       "Series                           0\n",
       "Model                            1\n",
       "Year                             1\n",
       "Mileage(km)                      2\n",
       "TransmissionType                 2\n",
       "FuelType                         0\n",
       "BodyType                       120\n",
       "Color                            0\n",
       "EngineSize(cc)                   0\n",
       "EnginePower(HP)                  0\n",
       "DriveTrain                       0\n",
       "SellerType                       0\n",
       "NEW_District                     0\n",
       "NEW_DaysSinceListing             0\n",
       "NEW_CarAge                       1\n",
       "NEW_KmPerYear                    2\n",
       "NEW_KmCategory                   3\n",
       "NEW_AvgPricePerBrandSeries       0\n",
       "NEW_AvgKmPerBrandSeries          2\n",
       "NEW_DistrictAvgPrice             0\n",
       "NEW_NumOriginalParts             0\n",
       "NEW_NumLocalPaintedParts         0\n",
       "NEW_NumPaintedParts              0\n",
       "NEW_NumChangedParts              0\n",
       "NEW_NumUnknownParts              0\n",
       "NEW_HasDamage                    0\n",
       "NEW_HasHighDamage                0\n",
       "NEW_DamageCost                5171\n",
       "dtype: int64"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pandas_df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "94502472-c396-4387-bd09-7992c7ece403",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "# NEW_DamageCost\n",
    "pandas_df.loc[pandas_df['NEW_HasDamage'] == 1, 'NEW_DamageCost'].fillna(\n",
    "    pandas_df[pandas_df['NEW_HasDamage'] == 1].groupby(['Brand', 'Series', 'Year', 'EngineSize(cc)'])['NEW_DamageCost'].transform('mean'), inplace=True)\n",
    "\n",
    "pandas_df.loc[(pandas_df['NEW_HasDamage'] == 0) & (pandas_df['NEW_DamageCost'].isna()), 'NEW_DamageCost'] = 0\n",
    "\n",
    "pandas_df.loc[(pandas_df['NEW_HasDamage'] == -1) & (pandas_df['NEW_DamageCost'].isna()), 'NEW_DamageCost'] = pandas_df['NEW_DamageCost'].mean()\n",
    "\n",
    "pandas_df['NEW_DamageCost'].fillna(pandas_df['NEW_DamageCost'].median(), inplace=True)\n",
    "pandas_df.dropna(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "b6cdeb6b-60bf-429a-b754-b051d491c423",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ListingTitle</th>\n",
       "      <th>City</th>\n",
       "      <th>Price(TRY)</th>\n",
       "      <th>ListingID</th>\n",
       "      <th>ListingDate</th>\n",
       "      <th>Brand</th>\n",
       "      <th>Series</th>\n",
       "      <th>Model</th>\n",
       "      <th>Year</th>\n",
       "      <th>Mileage(km)</th>\n",
       "      <th>TransmissionType</th>\n",
       "      <th>FuelType</th>\n",
       "      <th>BodyType</th>\n",
       "      <th>Color</th>\n",
       "      <th>EngineSize(cc)</th>\n",
       "      <th>EnginePower(HP)</th>\n",
       "      <th>DriveTrain</th>\n",
       "      <th>SellerType</th>\n",
       "      <th>NEW_District</th>\n",
       "      <th>NEW_DaysSinceListing</th>\n",
       "      <th>NEW_CarAge</th>\n",
       "      <th>NEW_KmPerYear</th>\n",
       "      <th>NEW_KmCategory</th>\n",
       "      <th>NEW_AvgPricePerBrandSeries</th>\n",
       "      <th>NEW_AvgKmPerBrandSeries</th>\n",
       "      <th>NEW_DistrictAvgPrice</th>\n",
       "      <th>NEW_NumOriginalParts</th>\n",
       "      <th>NEW_NumLocalPaintedParts</th>\n",
       "      <th>NEW_NumPaintedParts</th>\n",
       "      <th>NEW_NumChangedParts</th>\n",
       "      <th>NEW_NumUnknownParts</th>\n",
       "      <th>NEW_HasDamage</th>\n",
       "      <th>NEW_HasHighDamage</th>\n",
       "      <th>NEW_DamageCost</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2016 AUDİ A3 SPORTBACK 1.0 TFSI BOYASIZ/DEĞİŞE...</td>\n",
       "      <td>Bolu</td>\n",
       "      <td>1169000</td>\n",
       "      <td>27812680</td>\n",
       "      <td>2025-04-07</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A3</td>\n",
       "      <td>A3 Sportback 1.0 TFSI Dynamic</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>120000.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>Hatchback/5</td>\n",
       "      <td>White</td>\n",
       "      <td>1200.0</td>\n",
       "      <td>113.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>Merkez</td>\n",
       "      <td>44</td>\n",
       "      <td>9.0</td>\n",
       "      <td>12000.000000</td>\n",
       "      <td>100-150K</td>\n",
       "      <td>1.166780e+06</td>\n",
       "      <td>161224.075893</td>\n",
       "      <td>639596.317662</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2018 AUDİ A6 2.0 TDI QUATTRO SUNROOF MATRİX VA...</td>\n",
       "      <td>Ankara</td>\n",
       "      <td>2450000</td>\n",
       "      <td>28816234</td>\n",
       "      <td>2025-04-07</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A6</td>\n",
       "      <td>A6 Sedan 2.0 TDI Quattro</td>\n",
       "      <td>2018.0</td>\n",
       "      <td>136000.0</td>\n",
       "      <td>Semi-Automatic</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>Black</td>\n",
       "      <td>1968.0</td>\n",
       "      <td>190.0</td>\n",
       "      <td>AWD</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Altındağ</td>\n",
       "      <td>44</td>\n",
       "      <td>7.0</td>\n",
       "      <td>17000.000000</td>\n",
       "      <td>100-150K</td>\n",
       "      <td>2.131899e+06</td>\n",
       "      <td>228153.204082</td>\n",
       "      <td>615934.150000</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Sahibinden Audi A4 Sedan 1.8 TFSI 2011 Model</td>\n",
       "      <td>Afyonkarahisar</td>\n",
       "      <td>750000</td>\n",
       "      <td>28781662</td>\n",
       "      <td>2025-04-08</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A4</td>\n",
       "      <td>A4 Sedan 1.8 TFSI</td>\n",
       "      <td>2011.0</td>\n",
       "      <td>285000.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Gasoline</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>White</td>\n",
       "      <td>1798.0</td>\n",
       "      <td>160.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Private Seller</td>\n",
       "      <td>Merkez</td>\n",
       "      <td>43</td>\n",
       "      <td>14.0</td>\n",
       "      <td>19000.000000</td>\n",
       "      <td>200-300K</td>\n",
       "      <td>1.331756e+06</td>\n",
       "      <td>209684.351351</td>\n",
       "      <td>639596.317662</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>75000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2016 AUDI A3 AMBİENTE *CAM TAVAN LED XENON HIZ...</td>\n",
       "      <td>Antalya</td>\n",
       "      <td>1195000</td>\n",
       "      <td>28731117</td>\n",
       "      <td>2025-04-03</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A3</td>\n",
       "      <td>A3 Sportback 1.6 TDI Ambiente</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>101000.0</td>\n",
       "      <td>Semi-Automatic</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Hatchback/5</td>\n",
       "      <td>Black</td>\n",
       "      <td>1598.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Manavgat</td>\n",
       "      <td>48</td>\n",
       "      <td>9.0</td>\n",
       "      <td>10100.000000</td>\n",
       "      <td>100-150K</td>\n",
       "      <td>1.166780e+06</td>\n",
       "      <td>161224.075893</td>\n",
       "      <td>940699.962963</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Sahibinden Audi A3 Sportback 1.6 TDI S-Line 20...</td>\n",
       "      <td>Ankara</td>\n",
       "      <td>822000</td>\n",
       "      <td>28393351</td>\n",
       "      <td>2025-04-02</td>\n",
       "      <td>Audi</td>\n",
       "      <td>A3</td>\n",
       "      <td>A3 Sportback 1.6 TDI Attraction</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>212000.0</td>\n",
       "      <td>Semi-Automatic</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Hatchback/5</td>\n",
       "      <td>White</td>\n",
       "      <td>1598.0</td>\n",
       "      <td>105.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>Yenimahalle</td>\n",
       "      <td>49</td>\n",
       "      <td>13.0</td>\n",
       "      <td>15142.857143</td>\n",
       "      <td>200-300K</td>\n",
       "      <td>1.166780e+06</td>\n",
       "      <td>161224.075893</td>\n",
       "      <td>791699.214286</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6670</th>\n",
       "      <td>Sahibinden Opel Corsa 1.3 CDTI Enjoy 111 2010 ...</td>\n",
       "      <td>Ankara</td>\n",
       "      <td>450000</td>\n",
       "      <td>29019564</td>\n",
       "      <td>2025-04-16</td>\n",
       "      <td>Opel</td>\n",
       "      <td>Corsa</td>\n",
       "      <td>1.3 CDTI Enjoy 111</td>\n",
       "      <td>2010.0</td>\n",
       "      <td>257000.0</td>\n",
       "      <td>Manual</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Hatchback/5</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>1248.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Private Seller</td>\n",
       "      <td>Altındağ</td>\n",
       "      <td>35</td>\n",
       "      <td>15.0</td>\n",
       "      <td>16062.500000</td>\n",
       "      <td>200-300K</td>\n",
       "      <td>4.877578e+05</td>\n",
       "      <td>190650.376884</td>\n",
       "      <td>615934.150000</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6671</th>\n",
       "      <td>ÇORUM MERKEZ 1999 HONDA CİVİC 1.4is TAVAN BOYASIZ</td>\n",
       "      <td>Çorum</td>\n",
       "      <td>355000</td>\n",
       "      <td>29019753</td>\n",
       "      <td>2025-04-16</td>\n",
       "      <td>Honda</td>\n",
       "      <td>Civic</td>\n",
       "      <td>1.4 i S</td>\n",
       "      <td>1999.0</td>\n",
       "      <td>304000.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>LPG &amp; Gasoline</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>1396.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>Merkez</td>\n",
       "      <td>35</td>\n",
       "      <td>26.0</td>\n",
       "      <td>11259.259259</td>\n",
       "      <td>300K+</td>\n",
       "      <td>9.208712e+05</td>\n",
       "      <td>177728.787879</td>\n",
       "      <td>639596.317662</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6672</th>\n",
       "      <td>Sahibinden Peugeot 206 1.4 X-Design 2005 Model</td>\n",
       "      <td>Kırklareli</td>\n",
       "      <td>375000</td>\n",
       "      <td>29018858</td>\n",
       "      <td>2025-04-16</td>\n",
       "      <td>Peugeot</td>\n",
       "      <td>206</td>\n",
       "      <td>1.4 X-Design</td>\n",
       "      <td>2005.0</td>\n",
       "      <td>208000.0</td>\n",
       "      <td>Manual</td>\n",
       "      <td>LPG &amp; Gasoline</td>\n",
       "      <td>Hatchback/3</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>1360.0</td>\n",
       "      <td>76.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Private Seller</td>\n",
       "      <td>Lüleburgaz</td>\n",
       "      <td>35</td>\n",
       "      <td>20.0</td>\n",
       "      <td>9904.761905</td>\n",
       "      <td>200-300K</td>\n",
       "      <td>3.051477e+05</td>\n",
       "      <td>237324.908163</td>\n",
       "      <td>946083.250000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6673</th>\n",
       "      <td>Sahibinden Peugeot 206 1.6 XT 2001 Model</td>\n",
       "      <td>Gaziantep</td>\n",
       "      <td>220000</td>\n",
       "      <td>29019438</td>\n",
       "      <td>2025-04-16</td>\n",
       "      <td>Peugeot</td>\n",
       "      <td>206</td>\n",
       "      <td>1.6 XT</td>\n",
       "      <td>2001.0</td>\n",
       "      <td>138000.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>LPG &amp; Gasoline</td>\n",
       "      <td>Hatchback/5</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>1587.0</td>\n",
       "      <td>109.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Private Seller</td>\n",
       "      <td>Şehitkamil</td>\n",
       "      <td>35</td>\n",
       "      <td>24.0</td>\n",
       "      <td>5520.000000</td>\n",
       "      <td>100-150K</td>\n",
       "      <td>3.051477e+05</td>\n",
       "      <td>237324.908163</td>\n",
       "      <td>846367.905660</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6674</th>\n",
       "      <td>Galeriden Renault Megane 1.5 dCi Touch Plus 20...</td>\n",
       "      <td>İstanbul</td>\n",
       "      <td>770000</td>\n",
       "      <td>29022036</td>\n",
       "      <td>2025-04-16</td>\n",
       "      <td>Renault</td>\n",
       "      <td>Megane</td>\n",
       "      <td>1.5 dCi Touch Plus</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>260000.0</td>\n",
       "      <td>Semi-Automatic</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Sedan</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>1461.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>FWD</td>\n",
       "      <td>Dealer</td>\n",
       "      <td>Ümraniye</td>\n",
       "      <td>35</td>\n",
       "      <td>8.0</td>\n",
       "      <td>28888.888889</td>\n",
       "      <td>200-300K</td>\n",
       "      <td>6.044230e+05</td>\n",
       "      <td>214160.637450</td>\n",
       "      <td>894998.514706</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7000.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>6553 rows × 34 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                           ListingTitle  ... NEW_DamageCost\n",
       "0     2016 AUDİ A3 SPORTBACK 1.0 TFSI BOYASIZ/DEĞİŞE...  ...         7000.0\n",
       "1     2018 AUDİ A6 2.0 TDI QUATTRO SUNROOF MATRİX VA...  ...         7000.0\n",
       "2          Sahibinden Audi A4 Sedan 1.8 TFSI 2011 Model  ...        75000.0\n",
       "3     2016 AUDI A3 AMBİENTE *CAM TAVAN LED XENON HIZ...  ...         7000.0\n",
       "4     Sahibinden Audi A3 Sportback 1.6 TDI S-Line 20...  ...         7000.0\n",
       "...                                                 ...  ...            ...\n",
       "6670  Sahibinden Opel Corsa 1.3 CDTI Enjoy 111 2010 ...  ...         7000.0\n",
       "6671  ÇORUM MERKEZ 1999 HONDA CİVİC 1.4is TAVAN BOYASIZ  ...         7000.0\n",
       "6672     Sahibinden Peugeot 206 1.4 X-Design 2005 Model  ...         3000.0\n",
       "6673           Sahibinden Peugeot 206 1.6 XT 2001 Model  ...         7000.0\n",
       "6674  Galeriden Renault Megane 1.5 dCi Touch Plus 20...  ...         7000.0\n",
       "\n",
       "[6553 rows x 34 columns]"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pandas_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "74d56fa5-311c-4ec8-b348-687ac9b86c71",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "source": [
    "One-Hot Encoding → Az kategorili sütunlar\n",
    "\n",
    "Rare Encoding → Çok kategorili sütunlarda seyrekleri grupla\n",
    "\n",
    "Frequency Encoding → Rare edilmiş sütunlara sıklık oranı ata"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "597edfd9-29f0-487d-b281-110f84fff586",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# --- Rare Encoder ---\n",
    "def rare_encoder(dataframe, column, threshold=0.02):\n",
    "    value_counts = dataframe[column].value_counts(normalize=True)\n",
    "    rare_labels = value_counts[value_counts < threshold].index\n",
    "    dataframe[column] = dataframe[column].apply(lambda x: 'Rare' if x in rare_labels else x)\n",
    "    return dataframe\n",
    "\n",
    "# --- Frequency Encoder ---\n",
    "def frequency_encoder(dataframe, column):\n",
    "    freq = dataframe[column].value_counts(normalize=True)\n",
    "    dataframe[column] = dataframe[column].map(freq)\n",
    "    return dataframe\n",
    "\n",
    "# --- One-Hot Encoder ---\n",
    "def one_hot_encoder(dataframe, categorical_cols, drop_first=True):\n",
    "    dataframe = pd.get_dummies(dataframe, columns=categorical_cols, drop_first=drop_first)\n",
    "    return dataframe\n",
    "\n",
    "# --- Full Encoding Pipeline ---\n",
    "def encode_dataframe(df, rare_thresh=0.02):\n",
    "    df = df.copy()\n",
    "    \n",
    "    # 1. Kategorik sütunları seç\n",
    "    categorical_cols = df.select_dtypes(include=['object']).columns.tolist()\n",
    "\n",
    "    one_hot_cols = []\n",
    "    rare_freq_cols = []\n",
    "\n",
    "    for col in categorical_cols:\n",
    "        if df[col].nunique() < 15:\n",
    "            one_hot_cols.append(col)\n",
    "        else:\n",
    "            rare_freq_cols.append(col)\n",
    "\n",
    "    # 2. One-Hot Encoding\n",
    "    df = one_hot_encoder(df, one_hot_cols)\n",
    "\n",
    "    # 3. Rare + Frequency Encoding\n",
    "    for col in rare_freq_cols:\n",
    "        df = rare_encoder(df, col, threshold=rare_thresh)\n",
    "        df = frequency_encoder(df, col)\n",
    "\n",
    "    return df\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "89cfb67f-2273-4b1a-8418-0cde1a357324",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "df_encoded = encode_dataframe(pandas_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "132d073d-0bdc-4ae8-9102-7bb3233347f2",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ListingTitle</th>\n",
       "      <th>City</th>\n",
       "      <th>Price(TRY)</th>\n",
       "      <th>ListingID</th>\n",
       "      <th>ListingDate</th>\n",
       "      <th>Brand</th>\n",
       "      <th>Series</th>\n",
       "      <th>Model</th>\n",
       "      <th>Year</th>\n",
       "      <th>Mileage(km)</th>\n",
       "      <th>Color</th>\n",
       "      <th>EngineSize(cc)</th>\n",
       "      <th>EnginePower(HP)</th>\n",
       "      <th>NEW_District</th>\n",
       "      <th>NEW_DaysSinceListing</th>\n",
       "      <th>NEW_CarAge</th>\n",
       "      <th>NEW_KmPerYear</th>\n",
       "      <th>NEW_AvgPricePerBrandSeries</th>\n",
       "      <th>NEW_AvgKmPerBrandSeries</th>\n",
       "      <th>NEW_DistrictAvgPrice</th>\n",
       "      <th>NEW_NumOriginalParts</th>\n",
       "      <th>NEW_NumLocalPaintedParts</th>\n",
       "      <th>NEW_NumPaintedParts</th>\n",
       "      <th>NEW_NumChangedParts</th>\n",
       "      <th>NEW_NumUnknownParts</th>\n",
       "      <th>NEW_HasDamage</th>\n",
       "      <th>NEW_HasHighDamage</th>\n",
       "      <th>NEW_DamageCost</th>\n",
       "      <th>TransmissionType_Manual</th>\n",
       "      <th>TransmissionType_Semi-Automatic</th>\n",
       "      <th>FuelType_Electric</th>\n",
       "      <th>FuelType_Gasoline</th>\n",
       "      <th>FuelType_Hybrid</th>\n",
       "      <th>FuelType_LPG &amp; Gasoline</th>\n",
       "      <th>BodyType_Coupe</th>\n",
       "      <th>BodyType_Hatchback/3</th>\n",
       "      <th>BodyType_Hatchback/5</th>\n",
       "      <th>BodyType_MPV</th>\n",
       "      <th>BodyType_Roadster</th>\n",
       "      <th>BodyType_SUV</th>\n",
       "      <th>BodyType_Sedan</th>\n",
       "      <th>BodyType_Station wagon</th>\n",
       "      <th>DriveTrain_FWD</th>\n",
       "      <th>DriveTrain_RWD</th>\n",
       "      <th>SellerType_Dealer</th>\n",
       "      <th>SellerType_Private Seller</th>\n",
       "      <th>SellerType_Unknown</th>\n",
       "      <th>NEW_KmCategory_100-150K</th>\n",
       "      <th>NEW_KmCategory_150-200K</th>\n",
       "      <th>NEW_KmCategory_200-300K</th>\n",
       "      <th>NEW_KmCategory_300K+</th>\n",
       "      <th>NEW_KmCategory_50-100K</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.385472</td>\n",
       "      <td>1169000</td>\n",
       "      <td>27812680</td>\n",
       "      <td>2025-04-07</td>\n",
       "      <td>0.074775</td>\n",
       "      <td>0.034030</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>120000.0</td>\n",
       "      <td>0.220204</td>\n",
       "      <td>1200.0</td>\n",
       "      <td>113.0</td>\n",
       "      <td>0.118877</td>\n",
       "      <td>44</td>\n",
       "      <td>9.0</td>\n",
       "      <td>12000.000000</td>\n",
       "      <td>1.166780e+06</td>\n",
       "      <td>161224.075893</td>\n",
       "      <td>639596.317662</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7000.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.112620</td>\n",
       "      <td>2450000</td>\n",
       "      <td>28816234</td>\n",
       "      <td>2025-04-07</td>\n",
       "      <td>0.074775</td>\n",
       "      <td>0.465588</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2018.0</td>\n",
       "      <td>136000.0</td>\n",
       "      <td>0.075843</td>\n",
       "      <td>1968.0</td>\n",
       "      <td>190.0</td>\n",
       "      <td>0.858233</td>\n",
       "      <td>44</td>\n",
       "      <td>7.0</td>\n",
       "      <td>17000.000000</td>\n",
       "      <td>2.131899e+06</td>\n",
       "      <td>228153.204082</td>\n",
       "      <td>615934.150000</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7000.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.385472</td>\n",
       "      <td>750000</td>\n",
       "      <td>28781662</td>\n",
       "      <td>2025-04-08</td>\n",
       "      <td>0.074775</td>\n",
       "      <td>0.465588</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2011.0</td>\n",
       "      <td>285000.0</td>\n",
       "      <td>0.220204</td>\n",
       "      <td>1798.0</td>\n",
       "      <td>160.0</td>\n",
       "      <td>0.118877</td>\n",
       "      <td>43</td>\n",
       "      <td>14.0</td>\n",
       "      <td>19000.000000</td>\n",
       "      <td>1.331756e+06</td>\n",
       "      <td>209684.351351</td>\n",
       "      <td>639596.317662</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>75000.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.031283</td>\n",
       "      <td>1195000</td>\n",
       "      <td>28731117</td>\n",
       "      <td>2025-04-03</td>\n",
       "      <td>0.074775</td>\n",
       "      <td>0.034030</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>101000.0</td>\n",
       "      <td>0.075843</td>\n",
       "      <td>1598.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>0.858233</td>\n",
       "      <td>48</td>\n",
       "      <td>9.0</td>\n",
       "      <td>10100.000000</td>\n",
       "      <td>1.166780e+06</td>\n",
       "      <td>161224.075893</td>\n",
       "      <td>940699.962963</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7000.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.112620</td>\n",
       "      <td>822000</td>\n",
       "      <td>28393351</td>\n",
       "      <td>2025-04-02</td>\n",
       "      <td>0.074775</td>\n",
       "      <td>0.034030</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>212000.0</td>\n",
       "      <td>0.220204</td>\n",
       "      <td>1598.0</td>\n",
       "      <td>105.0</td>\n",
       "      <td>0.858233</td>\n",
       "      <td>49</td>\n",
       "      <td>13.0</td>\n",
       "      <td>15142.857143</td>\n",
       "      <td>1.166780e+06</td>\n",
       "      <td>161224.075893</td>\n",
       "      <td>791699.214286</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7000.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6670</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.112620</td>\n",
       "      <td>450000</td>\n",
       "      <td>29019564</td>\n",
       "      <td>2025-04-16</td>\n",
       "      <td>0.101785</td>\n",
       "      <td>0.029757</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2010.0</td>\n",
       "      <td>257000.0</td>\n",
       "      <td>0.357699</td>\n",
       "      <td>1248.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>0.858233</td>\n",
       "      <td>35</td>\n",
       "      <td>15.0</td>\n",
       "      <td>16062.500000</td>\n",
       "      <td>4.877578e+05</td>\n",
       "      <td>190650.376884</td>\n",
       "      <td>615934.150000</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7000.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6671</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.385472</td>\n",
       "      <td>355000</td>\n",
       "      <td>29019753</td>\n",
       "      <td>2025-04-16</td>\n",
       "      <td>0.034488</td>\n",
       "      <td>0.465588</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1999.0</td>\n",
       "      <td>304000.0</td>\n",
       "      <td>0.357699</td>\n",
       "      <td>1396.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>0.118877</td>\n",
       "      <td>35</td>\n",
       "      <td>26.0</td>\n",
       "      <td>11259.259259</td>\n",
       "      <td>9.208712e+05</td>\n",
       "      <td>177728.787879</td>\n",
       "      <td>639596.317662</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7000.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6672</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.385472</td>\n",
       "      <td>375000</td>\n",
       "      <td>29018858</td>\n",
       "      <td>2025-04-16</td>\n",
       "      <td>0.081184</td>\n",
       "      <td>0.465588</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2005.0</td>\n",
       "      <td>208000.0</td>\n",
       "      <td>0.357699</td>\n",
       "      <td>1360.0</td>\n",
       "      <td>76.0</td>\n",
       "      <td>0.858233</td>\n",
       "      <td>35</td>\n",
       "      <td>20.0</td>\n",
       "      <td>9904.761905</td>\n",
       "      <td>3.051477e+05</td>\n",
       "      <td>237324.908163</td>\n",
       "      <td>946083.250000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3000.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6673</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.036472</td>\n",
       "      <td>220000</td>\n",
       "      <td>29019438</td>\n",
       "      <td>2025-04-16</td>\n",
       "      <td>0.081184</td>\n",
       "      <td>0.465588</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2001.0</td>\n",
       "      <td>138000.0</td>\n",
       "      <td>0.357699</td>\n",
       "      <td>1587.0</td>\n",
       "      <td>109.0</td>\n",
       "      <td>0.858233</td>\n",
       "      <td>35</td>\n",
       "      <td>24.0</td>\n",
       "      <td>5520.000000</td>\n",
       "      <td>3.051477e+05</td>\n",
       "      <td>237324.908163</td>\n",
       "      <td>846367.905660</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7000.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6674</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.202197</td>\n",
       "      <td>770000</td>\n",
       "      <td>29022036</td>\n",
       "      <td>2025-04-16</td>\n",
       "      <td>0.161911</td>\n",
       "      <td>0.037693</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>260000.0</td>\n",
       "      <td>0.357699</td>\n",
       "      <td>1461.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>0.858233</td>\n",
       "      <td>35</td>\n",
       "      <td>8.0</td>\n",
       "      <td>28888.888889</td>\n",
       "      <td>6.044230e+05</td>\n",
       "      <td>214160.637450</td>\n",
       "      <td>894998.514706</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7000.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>6553 rows × 52 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      ListingTitle      City  ...  NEW_KmCategory_300K+  NEW_KmCategory_50-100K\n",
       "0              1.0  0.385472  ...                     0                       0\n",
       "1              1.0  0.112620  ...                     0                       0\n",
       "2              1.0  0.385472  ...                     0                       0\n",
       "3              1.0  0.031283  ...                     0                       0\n",
       "4              1.0  0.112620  ...                     0                       0\n",
       "...            ...       ...  ...                   ...                     ...\n",
       "6670           1.0  0.112620  ...                     0                       0\n",
       "6671           1.0  0.385472  ...                     1                       0\n",
       "6672           1.0  0.385472  ...                     0                       0\n",
       "6673           1.0  0.036472  ...                     0                       0\n",
       "6674           1.0  0.202197  ...                     0                       0\n",
       "\n",
       "[6553 rows x 52 columns]"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_encoded"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "0798ffb9-6d0f-4a15-b399-3b88b17b26fc",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "df_encoded[\"Price(TRY)\"] = pandas_df[\"Price(TRY)\"].values\n",
    "df_encoded[\"Price(TRY)_log\"] = np.log1p(df_encoded[\"Price(TRY)\"])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "f65963a1-6e40-40c8-ae65-f1e2e7649556",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "df_encoded.drop(['ListingDate', 'Price(TRY)','ListingID','ListingTitle'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "31cb4c19-086e-4fa3-ba17-e7bc8634f35a",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>City</th>\n",
       "      <th>Brand</th>\n",
       "      <th>Series</th>\n",
       "      <th>Model</th>\n",
       "      <th>Year</th>\n",
       "      <th>Mileage(km)</th>\n",
       "      <th>Color</th>\n",
       "      <th>EngineSize(cc)</th>\n",
       "      <th>EnginePower(HP)</th>\n",
       "      <th>NEW_District</th>\n",
       "      <th>NEW_DaysSinceListing</th>\n",
       "      <th>NEW_CarAge</th>\n",
       "      <th>NEW_KmPerYear</th>\n",
       "      <th>NEW_AvgPricePerBrandSeries</th>\n",
       "      <th>NEW_AvgKmPerBrandSeries</th>\n",
       "      <th>NEW_DistrictAvgPrice</th>\n",
       "      <th>NEW_NumOriginalParts</th>\n",
       "      <th>NEW_NumLocalPaintedParts</th>\n",
       "      <th>NEW_NumPaintedParts</th>\n",
       "      <th>NEW_NumChangedParts</th>\n",
       "      <th>NEW_NumUnknownParts</th>\n",
       "      <th>NEW_HasDamage</th>\n",
       "      <th>NEW_HasHighDamage</th>\n",
       "      <th>NEW_DamageCost</th>\n",
       "      <th>TransmissionType_Manual</th>\n",
       "      <th>TransmissionType_Semi-Automatic</th>\n",
       "      <th>FuelType_Electric</th>\n",
       "      <th>FuelType_Gasoline</th>\n",
       "      <th>FuelType_Hybrid</th>\n",
       "      <th>FuelType_LPG &amp; Gasoline</th>\n",
       "      <th>BodyType_Coupe</th>\n",
       "      <th>BodyType_Hatchback/3</th>\n",
       "      <th>BodyType_Hatchback/5</th>\n",
       "      <th>BodyType_MPV</th>\n",
       "      <th>BodyType_Roadster</th>\n",
       "      <th>BodyType_SUV</th>\n",
       "      <th>BodyType_Sedan</th>\n",
       "      <th>BodyType_Station wagon</th>\n",
       "      <th>DriveTrain_FWD</th>\n",
       "      <th>DriveTrain_RWD</th>\n",
       "      <th>SellerType_Dealer</th>\n",
       "      <th>SellerType_Private Seller</th>\n",
       "      <th>SellerType_Unknown</th>\n",
       "      <th>NEW_KmCategory_100-150K</th>\n",
       "      <th>NEW_KmCategory_150-200K</th>\n",
       "      <th>NEW_KmCategory_200-300K</th>\n",
       "      <th>NEW_KmCategory_300K+</th>\n",
       "      <th>NEW_KmCategory_50-100K</th>\n",
       "      <th>Price(TRY)_log</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.385472</td>\n",
       "      <td>0.074775</td>\n",
       "      <td>0.034030</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>120000.0</td>\n",
       "      <td>0.220204</td>\n",
       "      <td>1200.0</td>\n",
       "      <td>113.0</td>\n",
       "      <td>0.118877</td>\n",
       "      <td>44</td>\n",
       "      <td>9.0</td>\n",
       "      <td>12000.000000</td>\n",
       "      <td>1.166780e+06</td>\n",
       "      <td>161224.075893</td>\n",
       "      <td>639596.317662</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7000.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13.971660</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.112620</td>\n",
       "      <td>0.074775</td>\n",
       "      <td>0.465588</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2018.0</td>\n",
       "      <td>136000.0</td>\n",
       "      <td>0.075843</td>\n",
       "      <td>1968.0</td>\n",
       "      <td>190.0</td>\n",
       "      <td>0.858233</td>\n",
       "      <td>44</td>\n",
       "      <td>7.0</td>\n",
       "      <td>17000.000000</td>\n",
       "      <td>2.131899e+06</td>\n",
       "      <td>228153.204082</td>\n",
       "      <td>615934.150000</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7000.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>14.711599</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.385472</td>\n",
       "      <td>0.074775</td>\n",
       "      <td>0.465588</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2011.0</td>\n",
       "      <td>285000.0</td>\n",
       "      <td>0.220204</td>\n",
       "      <td>1798.0</td>\n",
       "      <td>160.0</td>\n",
       "      <td>0.118877</td>\n",
       "      <td>43</td>\n",
       "      <td>14.0</td>\n",
       "      <td>19000.000000</td>\n",
       "      <td>1.331756e+06</td>\n",
       "      <td>209684.351351</td>\n",
       "      <td>639596.317662</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>75000.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13.527830</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.031283</td>\n",
       "      <td>0.074775</td>\n",
       "      <td>0.034030</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>101000.0</td>\n",
       "      <td>0.075843</td>\n",
       "      <td>1598.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>0.858233</td>\n",
       "      <td>48</td>\n",
       "      <td>9.0</td>\n",
       "      <td>10100.000000</td>\n",
       "      <td>1.166780e+06</td>\n",
       "      <td>161224.075893</td>\n",
       "      <td>940699.962963</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7000.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13.993658</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.112620</td>\n",
       "      <td>0.074775</td>\n",
       "      <td>0.034030</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>212000.0</td>\n",
       "      <td>0.220204</td>\n",
       "      <td>1598.0</td>\n",
       "      <td>105.0</td>\n",
       "      <td>0.858233</td>\n",
       "      <td>49</td>\n",
       "      <td>13.0</td>\n",
       "      <td>15142.857143</td>\n",
       "      <td>1.166780e+06</td>\n",
       "      <td>161224.075893</td>\n",
       "      <td>791699.214286</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7000.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13.619497</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6670</th>\n",
       "      <td>0.112620</td>\n",
       "      <td>0.101785</td>\n",
       "      <td>0.029757</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2010.0</td>\n",
       "      <td>257000.0</td>\n",
       "      <td>0.357699</td>\n",
       "      <td>1248.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>0.858233</td>\n",
       "      <td>35</td>\n",
       "      <td>15.0</td>\n",
       "      <td>16062.500000</td>\n",
       "      <td>4.877578e+05</td>\n",
       "      <td>190650.376884</td>\n",
       "      <td>615934.150000</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7000.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13.017005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6671</th>\n",
       "      <td>0.385472</td>\n",
       "      <td>0.034488</td>\n",
       "      <td>0.465588</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1999.0</td>\n",
       "      <td>304000.0</td>\n",
       "      <td>0.357699</td>\n",
       "      <td>1396.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>0.118877</td>\n",
       "      <td>35</td>\n",
       "      <td>26.0</td>\n",
       "      <td>11259.259259</td>\n",
       "      <td>9.208712e+05</td>\n",
       "      <td>177728.787879</td>\n",
       "      <td>639596.317662</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7000.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12.779876</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6672</th>\n",
       "      <td>0.385472</td>\n",
       "      <td>0.081184</td>\n",
       "      <td>0.465588</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2005.0</td>\n",
       "      <td>208000.0</td>\n",
       "      <td>0.357699</td>\n",
       "      <td>1360.0</td>\n",
       "      <td>76.0</td>\n",
       "      <td>0.858233</td>\n",
       "      <td>35</td>\n",
       "      <td>20.0</td>\n",
       "      <td>9904.761905</td>\n",
       "      <td>3.051477e+05</td>\n",
       "      <td>237324.908163</td>\n",
       "      <td>946083.250000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3000.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>12.834684</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6673</th>\n",
       "      <td>0.036472</td>\n",
       "      <td>0.081184</td>\n",
       "      <td>0.465588</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2001.0</td>\n",
       "      <td>138000.0</td>\n",
       "      <td>0.357699</td>\n",
       "      <td>1587.0</td>\n",
       "      <td>109.0</td>\n",
       "      <td>0.858233</td>\n",
       "      <td>35</td>\n",
       "      <td>24.0</td>\n",
       "      <td>5520.000000</td>\n",
       "      <td>3.051477e+05</td>\n",
       "      <td>237324.908163</td>\n",
       "      <td>846367.905660</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7000.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>12.301387</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6674</th>\n",
       "      <td>0.202197</td>\n",
       "      <td>0.161911</td>\n",
       "      <td>0.037693</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>260000.0</td>\n",
       "      <td>0.357699</td>\n",
       "      <td>1461.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>0.858233</td>\n",
       "      <td>35</td>\n",
       "      <td>8.0</td>\n",
       "      <td>28888.888889</td>\n",
       "      <td>6.044230e+05</td>\n",
       "      <td>214160.637450</td>\n",
       "      <td>894998.514706</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7000.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13.554147</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>6553 rows × 49 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          City     Brand  ...  NEW_KmCategory_50-100K  Price(TRY)_log\n",
       "0     0.385472  0.074775  ...                       0       13.971660\n",
       "1     0.112620  0.074775  ...                       0       14.711599\n",
       "2     0.385472  0.074775  ...                       0       13.527830\n",
       "3     0.031283  0.074775  ...                       0       13.993658\n",
       "4     0.112620  0.074775  ...                       0       13.619497\n",
       "...        ...       ...  ...                     ...             ...\n",
       "6670  0.112620  0.101785  ...                       0       13.017005\n",
       "6671  0.385472  0.034488  ...                       0       12.779876\n",
       "6672  0.385472  0.081184  ...                       0       12.834684\n",
       "6673  0.036472  0.081184  ...                       0       12.301387\n",
       "6674  0.202197  0.161911  ...                       0       13.554147\n",
       "\n",
       "[6553 rows x 49 columns]"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_encoded"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "ec3a4ae8-404e-47f5-a22f-1c082b2e23aa",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "# 1. Scale edilecek sütunları belirle\n",
    "columns_to_scale = [\n",
    "     \"Mileage(km)\", \"EngineSize(cc)\", \"EnginePower(HP)\",\n",
    "    \"NEW_CarAge\", \"NEW_KmPerYear\", \"NEW_AvgPricePerBrandSeries\",\n",
    "    \"NEW_AvgKmPerBrandSeries\", \"NEW_DistrictAvgPrice\", \"NEW_DamageCost\"\n",
    "]\n",
    "\n",
    "# 2. Sütunlar gerçekten var mı kontrol et\n",
    "columns_to_scale = [col for col in columns_to_scale if col in df_encoded.columns]\n",
    "\n",
    "# 3. Scale işlemi\n",
    "scaler = StandardScaler()\n",
    "#df_scaled = df.select(\"*\")\n",
    "df_encoded[columns_to_scale] = scaler.fit_transform(df_encoded[columns_to_scale])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "ccfb108b-91cc-4c98-8428-2d9b2778d0d4",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>City</th>\n",
       "      <th>Brand</th>\n",
       "      <th>Series</th>\n",
       "      <th>Model</th>\n",
       "      <th>Year</th>\n",
       "      <th>Mileage(km)</th>\n",
       "      <th>Color</th>\n",
       "      <th>EngineSize(cc)</th>\n",
       "      <th>EnginePower(HP)</th>\n",
       "      <th>NEW_District</th>\n",
       "      <th>NEW_DaysSinceListing</th>\n",
       "      <th>NEW_CarAge</th>\n",
       "      <th>NEW_KmPerYear</th>\n",
       "      <th>NEW_AvgPricePerBrandSeries</th>\n",
       "      <th>NEW_AvgKmPerBrandSeries</th>\n",
       "      <th>NEW_DistrictAvgPrice</th>\n",
       "      <th>NEW_NumOriginalParts</th>\n",
       "      <th>NEW_NumLocalPaintedParts</th>\n",
       "      <th>NEW_NumPaintedParts</th>\n",
       "      <th>NEW_NumChangedParts</th>\n",
       "      <th>NEW_NumUnknownParts</th>\n",
       "      <th>NEW_HasDamage</th>\n",
       "      <th>NEW_HasHighDamage</th>\n",
       "      <th>NEW_DamageCost</th>\n",
       "      <th>TransmissionType_Manual</th>\n",
       "      <th>TransmissionType_Semi-Automatic</th>\n",
       "      <th>FuelType_Electric</th>\n",
       "      <th>FuelType_Gasoline</th>\n",
       "      <th>FuelType_Hybrid</th>\n",
       "      <th>FuelType_LPG &amp; Gasoline</th>\n",
       "      <th>BodyType_Coupe</th>\n",
       "      <th>BodyType_Hatchback/3</th>\n",
       "      <th>BodyType_Hatchback/5</th>\n",
       "      <th>BodyType_MPV</th>\n",
       "      <th>BodyType_Roadster</th>\n",
       "      <th>BodyType_SUV</th>\n",
       "      <th>BodyType_Sedan</th>\n",
       "      <th>BodyType_Station wagon</th>\n",
       "      <th>DriveTrain_FWD</th>\n",
       "      <th>DriveTrain_RWD</th>\n",
       "      <th>SellerType_Dealer</th>\n",
       "      <th>SellerType_Private Seller</th>\n",
       "      <th>SellerType_Unknown</th>\n",
       "      <th>NEW_KmCategory_100-150K</th>\n",
       "      <th>NEW_KmCategory_150-200K</th>\n",
       "      <th>NEW_KmCategory_200-300K</th>\n",
       "      <th>NEW_KmCategory_300K+</th>\n",
       "      <th>NEW_KmCategory_50-100K</th>\n",
       "      <th>Price(TRY)_log</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.385472</td>\n",
       "      <td>0.074775</td>\n",
       "      <td>0.034030</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>-0.808988</td>\n",
       "      <td>0.220204</td>\n",
       "      <td>-1.099418</td>\n",
       "      <td>0.088278</td>\n",
       "      <td>0.118877</td>\n",
       "      <td>44</td>\n",
       "      <td>-0.775457</td>\n",
       "      <td>-0.255847</td>\n",
       "      <td>0.402631</td>\n",
       "      <td>-0.948974</td>\n",
       "      <td>-0.279354</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.021390</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13.971660</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.112620</td>\n",
       "      <td>0.074775</td>\n",
       "      <td>0.465588</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2018.0</td>\n",
       "      <td>-0.653203</td>\n",
       "      <td>0.075843</td>\n",
       "      <td>1.628867</td>\n",
       "      <td>1.941039</td>\n",
       "      <td>0.858233</td>\n",
       "      <td>44</td>\n",
       "      <td>-1.035191</td>\n",
       "      <td>0.487640</td>\n",
       "      <td>1.388100</td>\n",
       "      <td>0.582264</td>\n",
       "      <td>-0.329614</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.021390</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>14.711599</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.385472</td>\n",
       "      <td>0.074775</td>\n",
       "      <td>0.465588</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2011.0</td>\n",
       "      <td>0.797550</td>\n",
       "      <td>0.220204</td>\n",
       "      <td>1.024949</td>\n",
       "      <td>1.219184</td>\n",
       "      <td>0.118877</td>\n",
       "      <td>43</td>\n",
       "      <td>-0.126121</td>\n",
       "      <td>0.785035</td>\n",
       "      <td>0.571086</td>\n",
       "      <td>0.159724</td>\n",
       "      <td>-0.279354</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.204852</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13.527830</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.031283</td>\n",
       "      <td>0.074775</td>\n",
       "      <td>0.034030</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>-0.993984</td>\n",
       "      <td>0.075843</td>\n",
       "      <td>0.314459</td>\n",
       "      <td>0.016092</td>\n",
       "      <td>0.858233</td>\n",
       "      <td>48</td>\n",
       "      <td>-0.775457</td>\n",
       "      <td>-0.538372</td>\n",
       "      <td>0.402631</td>\n",
       "      <td>-0.948974</td>\n",
       "      <td>0.360221</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.021390</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13.993658</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.112620</td>\n",
       "      <td>0.074775</td>\n",
       "      <td>0.034030</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>0.086778</td>\n",
       "      <td>0.220204</td>\n",
       "      <td>0.314459</td>\n",
       "      <td>-0.104217</td>\n",
       "      <td>0.858233</td>\n",
       "      <td>49</td>\n",
       "      <td>-0.255989</td>\n",
       "      <td>0.211488</td>\n",
       "      <td>0.402631</td>\n",
       "      <td>-0.948974</td>\n",
       "      <td>0.043728</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.021390</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13.619497</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6670</th>\n",
       "      <td>0.112620</td>\n",
       "      <td>0.101785</td>\n",
       "      <td>0.029757</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2010.0</td>\n",
       "      <td>0.524925</td>\n",
       "      <td>0.357699</td>\n",
       "      <td>-0.928900</td>\n",
       "      <td>-0.465145</td>\n",
       "      <td>0.858233</td>\n",
       "      <td>35</td>\n",
       "      <td>0.003746</td>\n",
       "      <td>0.348236</td>\n",
       "      <td>-0.290709</td>\n",
       "      <td>-0.275744</td>\n",
       "      <td>-0.329614</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.021390</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13.017005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6671</th>\n",
       "      <td>0.385472</td>\n",
       "      <td>0.034488</td>\n",
       "      <td>0.465588</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1999.0</td>\n",
       "      <td>0.982545</td>\n",
       "      <td>0.357699</td>\n",
       "      <td>-0.403137</td>\n",
       "      <td>-0.465145</td>\n",
       "      <td>0.118877</td>\n",
       "      <td>35</td>\n",
       "      <td>1.432284</td>\n",
       "      <td>-0.365993</td>\n",
       "      <td>0.151537</td>\n",
       "      <td>-0.571371</td>\n",
       "      <td>-0.279354</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.021390</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>12.779876</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6672</th>\n",
       "      <td>0.385472</td>\n",
       "      <td>0.081184</td>\n",
       "      <td>0.465588</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2005.0</td>\n",
       "      <td>0.047832</td>\n",
       "      <td>0.357699</td>\n",
       "      <td>-0.531025</td>\n",
       "      <td>-0.802010</td>\n",
       "      <td>0.858233</td>\n",
       "      <td>35</td>\n",
       "      <td>0.653081</td>\n",
       "      <td>-0.567404</td>\n",
       "      <td>-0.477169</td>\n",
       "      <td>0.792099</td>\n",
       "      <td>0.371655</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.034698</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>12.834684</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6673</th>\n",
       "      <td>0.036472</td>\n",
       "      <td>0.081184</td>\n",
       "      <td>0.465588</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2001.0</td>\n",
       "      <td>-0.633730</td>\n",
       "      <td>0.357699</td>\n",
       "      <td>0.275382</td>\n",
       "      <td>-0.007970</td>\n",
       "      <td>0.858233</td>\n",
       "      <td>35</td>\n",
       "      <td>1.172549</td>\n",
       "      <td>-1.219407</td>\n",
       "      <td>-0.477169</td>\n",
       "      <td>0.792099</td>\n",
       "      <td>0.159850</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.021390</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>12.301387</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6674</th>\n",
       "      <td>0.202197</td>\n",
       "      <td>0.161911</td>\n",
       "      <td>0.037693</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>0.554135</td>\n",
       "      <td>0.357699</td>\n",
       "      <td>-0.172228</td>\n",
       "      <td>0.016092</td>\n",
       "      <td>0.858233</td>\n",
       "      <td>35</td>\n",
       "      <td>-0.905324</td>\n",
       "      <td>2.255488</td>\n",
       "      <td>-0.171583</td>\n",
       "      <td>0.262135</td>\n",
       "      <td>0.263146</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.021390</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13.554147</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>6553 rows × 49 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          City     Brand  ...  NEW_KmCategory_50-100K  Price(TRY)_log\n",
       "0     0.385472  0.074775  ...                       0       13.971660\n",
       "1     0.112620  0.074775  ...                       0       14.711599\n",
       "2     0.385472  0.074775  ...                       0       13.527830\n",
       "3     0.031283  0.074775  ...                       0       13.993658\n",
       "4     0.112620  0.074775  ...                       0       13.619497\n",
       "...        ...       ...  ...                     ...             ...\n",
       "6670  0.112620  0.101785  ...                       0       13.017005\n",
       "6671  0.385472  0.034488  ...                       0       12.779876\n",
       "6672  0.385472  0.081184  ...                       0       12.834684\n",
       "6673  0.036472  0.081184  ...                       0       12.301387\n",
       "6674  0.202197  0.161911  ...                       0       13.554147\n",
       "\n",
       "[6553 rows x 49 columns]"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_encoded"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "0c2f59bd-ce04-48b2-95a6-d4b8b73997be",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting lightgbm\n  Obtaining dependency information for lightgbm from https://files.pythonhosted.org/packages/42/86/dabda8fbcb1b00bcfb0003c3776e8ade1aa7b413dff0a2c08f457dace22f/lightgbm-4.6.0-py3-none-manylinux_2_28_x86_64.whl.metadata\n  Downloading lightgbm-4.6.0-py3-none-manylinux_2_28_x86_64.whl.metadata (17 kB)\nRequirement already satisfied: numpy>=1.17.0 in /databricks/python3/lib/python3.11/site-packages (from lightgbm) (1.23.5)\nRequirement already satisfied: scipy in /databricks/python3/lib/python3.11/site-packages (from lightgbm) (1.11.1)\nDownloading lightgbm-4.6.0-py3-none-manylinux_2_28_x86_64.whl (3.6 MB)\n\u001B[?25l   \u001B[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m \u001B[32m0.0/3.6 MB\u001B[0m \u001B[31m?\u001B[0m eta \u001B[36m-:--:--\u001B[0m\n\u001B[2K   \u001B[91m━━\u001B[0m\u001B[90m╺\u001B[0m\u001B[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m \u001B[32m0.2/3.6 MB\u001B[0m \u001B[31m5.8 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[90m╺\u001B[0m\u001B[90m━━━━━━━━\u001B[0m \u001B[32m2.8/3.6 MB\u001B[0m \u001B[31m40.2 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m \u001B[32m3.6/3.6 MB\u001B[0m \u001B[31m46.2 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m \u001B[32m3.6/3.6 MB\u001B[0m \u001B[31m32.4 MB/s\u001B[0m eta \u001B[36m0:00:00\u001B[0m\n\u001B[?25hInstalling collected packages: lightgbm\nSuccessfully installed lightgbm-4.6.0\n\u001B[43mNote: you may need to restart the kernel using %restart_python or dbutils.library.restartPython() to use updated packages.\u001B[0m\n"
     ]
    }
   ],
   "source": [
    "%pip install lightgbm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "cd95d519-1c60-4e48-a9e7-6c75636e05bf",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting catboost\n  Obtaining dependency information for catboost from https://files.pythonhosted.org/packages/e2/47/abee19aae4b2a2a21e40e3c09db784099d189b3a0745e59c1d152700d90a/catboost-1.2.8-cp311-cp311-manylinux2014_x86_64.whl.metadata\n  Downloading catboost-1.2.8-cp311-cp311-manylinux2014_x86_64.whl.metadata (1.2 kB)\nCollecting graphviz (from catboost)\n  Obtaining dependency information for graphviz from https://files.pythonhosted.org/packages/00/be/d59db2d1d52697c6adc9eacaf50e8965b6345cc143f671e1ed068818d5cf/graphviz-0.20.3-py3-none-any.whl.metadata\n  Downloading graphviz-0.20.3-py3-none-any.whl.metadata (12 kB)\nRequirement already satisfied: matplotlib in /local_disk0/.ephemeral_nfs/cluster_libraries/python/lib/python3.11/site-packages (from catboost) (3.10.1)\nRequirement already satisfied: numpy<3.0,>=1.16.0 in /databricks/python3/lib/python3.11/site-packages (from catboost) (1.23.5)\nRequirement already satisfied: pandas>=0.24 in /databricks/python3/lib/python3.11/site-packages (from catboost) (1.5.3)\nRequirement already satisfied: scipy in /databricks/python3/lib/python3.11/site-packages (from catboost) (1.11.1)\nRequirement already satisfied: plotly in /databricks/python3/lib/python3.11/site-packages (from catboost) (5.9.0)\nRequirement already satisfied: six in /usr/lib/python3/dist-packages (from catboost) (1.16.0)\nRequirement already satisfied: python-dateutil>=2.8.1 in /databricks/python3/lib/python3.11/site-packages (from pandas>=0.24->catboost) (2.8.2)\nRequirement already satisfied: pytz>=2020.1 in /databricks/python3/lib/python3.11/site-packages (from pandas>=0.24->catboost) (2022.7)\nRequirement already satisfied: contourpy>=1.0.1 in /databricks/python3/lib/python3.11/site-packages (from matplotlib->catboost) (1.0.5)\nRequirement already satisfied: cycler>=0.10 in /databricks/python3/lib/python3.11/site-packages (from matplotlib->catboost) (0.11.0)\nRequirement already satisfied: fonttools>=4.22.0 in /databricks/python3/lib/python3.11/site-packages (from matplotlib->catboost) (4.25.0)\nRequirement already satisfied: kiwisolver>=1.3.1 in /databricks/python3/lib/python3.11/site-packages (from matplotlib->catboost) (1.4.4)\nRequirement already satisfied: packaging>=20.0 in /databricks/python3/lib/python3.11/site-packages (from matplotlib->catboost) (23.2)\nRequirement already satisfied: pillow>=8 in /databricks/python3/lib/python3.11/site-packages (from matplotlib->catboost) (9.4.0)\nRequirement already satisfied: pyparsing>=2.3.1 in /databricks/python3/lib/python3.11/site-packages (from matplotlib->catboost) (3.0.9)\nRequirement already satisfied: tenacity>=6.2.0 in /databricks/python3/lib/python3.11/site-packages (from plotly->catboost) (8.2.2)\nDownloading catboost-1.2.8-cp311-cp311-manylinux2014_x86_64.whl (99.2 MB)\n\u001B[?25l   \u001B[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m \u001B[32m0.0/99.2 MB\u001B[0m \u001B[31m?\u001B[0m eta \u001B[36m-:--:--\u001B[0m\n\u001B[2K   \u001B[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m \u001B[32m0.3/99.2 MB\u001B[0m \u001B[31m7.7 MB/s\u001B[0m eta \u001B[36m0:00:13\u001B[0m\n\u001B[2K   \u001B[91m━\u001B[0m\u001B[90m╺\u001B[0m\u001B[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m \u001B[32m3.5/99.2 MB\u001B[0m \u001B[31m50.9 MB/s\u001B[0m eta \u001B[36m0:00:02\u001B[0m\n\u001B[2K   \u001B[91m━━━\u001B[0m\u001B[90m╺\u001B[0m\u001B[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m \u001B[32m7.8/99.2 MB\u001B[0m \u001B[31m73.6 MB/s\u001B[0m eta \u001B[36m0:00:02\u001B[0m\n\u001B[2K   \u001B[91m━━━━\u001B[0m\u001B[91m╸\u001B[0m\u001B[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m \u001B[32m11.6/99.2 MB\u001B[0m \u001B[31m107.1 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━\u001B[0m\u001B[90m╺\u001B[0m\u001B[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m \u001B[32m15.5/99.2 MB\u001B[0m \u001B[31m112.0 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m\u001B[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m \u001B[32m19.3/99.2 MB\u001B[0m \u001B[31m110.0 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━\u001B[0m\u001B[90m╺\u001B[0m\u001B[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m \u001B[32m23.3/99.2 MB\u001B[0m \u001B[31m111.7 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━\u001B[0m\u001B[90m╺\u001B[0m\u001B[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m \u001B[32m27.6/99.2 MB\u001B[0m \u001B[31m116.2 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m\u001B[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m \u001B[32m31.6/99.2 MB\u001B[0m \u001B[31m115.1 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━\u001B[0m\u001B[90m╺\u001B[0m\u001B[90m━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m \u001B[32m35.3/99.2 MB\u001B[0m \u001B[31m111.5 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m\u001B[90m━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m \u001B[32m38.5/99.2 MB\u001B[0m \u001B[31m104.4 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m\u001B[90m━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m \u001B[32m42.0/99.2 MB\u001B[0m \u001B[31m99.2 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[90m╺\u001B[0m\u001B[90m━━━━━━━━━━━━━━━━━━━━━\u001B[0m \u001B[32m45.4/99.2 MB\u001B[0m \u001B[31m94.9 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m\u001B[90m━━━━━━━━━━━━━━━━━━━━\u001B[0m \u001B[32m48.9/99.2 MB\u001B[0m \u001B[31m99.5 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[90m╺\u001B[0m\u001B[90m━━━━━━━━━━━━━━━━━━\u001B[0m \u001B[32m52.2/99.2 MB\u001B[0m \u001B[31m95.4 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[90m╺\u001B[0m\u001B[90m━━━━━━━━━━━━━━━━━\u001B[0m \u001B[32m55.6/99.2 MB\u001B[0m \u001B[31m95.9 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m\u001B[90m━━━━━━━━━━━━━━━━\u001B[0m \u001B[32m59.0/99.2 MB\u001B[0m \u001B[31m95.6 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[90m╺\u001B[0m\u001B[90m━━━━━━━━━━━━━━\u001B[0m \u001B[32m62.5/99.2 MB\u001B[0m \u001B[31m98.8 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m\u001B[90m━━━━━━━━━━━━━\u001B[0m \u001B[32m65.9/99.2 MB\u001B[0m \u001B[31m98.3 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m\u001B[90m━━━━━━━━━━━━\u001B[0m \u001B[32m69.4/99.2 MB\u001B[0m \u001B[31m98.7 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[90m╺\u001B[0m\u001B[90m━━━━━━━━━━\u001B[0m \u001B[32m72.8/99.2 MB\u001B[0m \u001B[31m98.8 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m\u001B[90m━━━━━━━━━\u001B[0m \u001B[32m76.3/99.2 MB\u001B[0m \u001B[31m99.3 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[90m╺\u001B[0m\u001B[90m━━━━━━━\u001B[0m \u001B[32m79.7/99.2 MB\u001B[0m \u001B[31m98.4 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m\u001B[90m━━━━━━\u001B[0m \u001B[32m83.2/99.2 MB\u001B[0m \u001B[31m98.6 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m\u001B[90m━━━━━\u001B[0m \u001B[32m86.7/99.2 MB\u001B[0m \u001B[31m98.9 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m\u001B[90m━━━\u001B[0m \u001B[32m90.6/99.2 MB\u001B[0m \u001B[31m103.3 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m\u001B[90m━━\u001B[0m \u001B[32m94.2/99.2 MB\u001B[0m \u001B[31m105.6 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m \u001B[32m98.4/99.2 MB\u001B[0m \u001B[31m111.3 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m \u001B[32m99.2/99.2 MB\u001B[0m \u001B[31m107.5 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m \u001B[32m99.2/99.2 MB\u001B[0m \u001B[31m107.5 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m \u001B[32m99.2/99.2 MB\u001B[0m \u001B[31m107.5 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m \u001B[32m99.2/99.2 MB\u001B[0m \u001B[31m107.5 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m \u001B[32m99.2/99.2 MB\u001B[0m \u001B[31m107.5 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m \u001B[32m99.2/99.2 MB\u001B[0m \u001B[31m107.5 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m \u001B[32m99.2/99.2 MB\u001B[0m \u001B[31m107.5 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m \u001B[32m99.2/99.2 MB\u001B[0m \u001B[31m107.5 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m \u001B[32m99.2/99.2 MB\u001B[0m \u001B[31m107.5 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m \u001B[32m99.2/99.2 MB\u001B[0m \u001B[31m107.5 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m \u001B[32m99.2/99.2 MB\u001B[0m \u001B[31m107.5 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m \u001B[32m99.2/99.2 MB\u001B[0m \u001B[31m107.5 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m \u001B[32m99.2/99.2 MB\u001B[0m \u001B[31m107.5 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m \u001B[32m99.2/99.2 MB\u001B[0m \u001B[31m107.5 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m \u001B[32m99.2/99.2 MB\u001B[0m \u001B[31m107.5 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m \u001B[32m99.2/99.2 MB\u001B[0m \u001B[31m107.5 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m \u001B[32m99.2/99.2 MB\u001B[0m \u001B[31m107.5 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m \u001B[32m99.2/99.2 MB\u001B[0m \u001B[31m107.5 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m \u001B[32m99.2/99.2 MB\u001B[0m \u001B[31m107.5 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m \u001B[32m99.2/99.2 MB\u001B[0m \u001B[31m107.5 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m \u001B[32m99.2/99.2 MB\u001B[0m \u001B[31m107.5 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m \u001B[32m99.2/99.2 MB\u001B[0m \u001B[31m107.5 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m \u001B[32m99.2/99.2 MB\u001B[0m \u001B[31m107.5 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m \u001B[32m99.2/99.2 MB\u001B[0m \u001B[31m107.5 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m \u001B[32m99.2/99.2 MB\u001B[0m \u001B[31m107.5 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m \u001B[32m99.2/99.2 MB\u001B[0m \u001B[31m107.5 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m \u001B[32m99.2/99.2 MB\u001B[0m \u001B[31m107.5 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m \u001B[32m99.2/99.2 MB\u001B[0m \u001B[31m107.5 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m\u001B[91m╸\u001B[0m \u001B[32m99.2/99.2 MB\u001B[0m \u001B[31m107.5 MB/s\u001B[0m eta \u001B[36m0:00:01\u001B[0m\n\u001B[2K   \u001B[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m \u001B[32m99.2/99.2 MB\u001B[0m \u001B[31m8.6 MB/s\u001B[0m eta \u001B[36m0:00:00\u001B[0m\n\u001B[?25hDownloading graphviz-0.20.3-py3-none-any.whl (47 kB)\n\u001B[?25l   \u001B[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m \u001B[32m0.0/47.1 kB\u001B[0m \u001B[31m?\u001B[0m eta \u001B[36m-:--:--\u001B[0m\n\u001B[2K   \u001B[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001B[0m \u001B[32m47.1/47.1 kB\u001B[0m \u001B[31m3.8 MB/s\u001B[0m eta \u001B[36m0:00:00\u001B[0m\n\u001B[?25hInstalling collected packages: graphviz, catboost\nSuccessfully installed catboost-1.2.8 graphviz-0.20.3\n\u001B[43mNote: you may need to restart the kernel using %restart_python or dbutils.library.restartPython() to use updated packages.\u001B[0m\n"
     ]
    }
   ],
   "source": [
    "%pip install catboost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "33b0ae61-10dd-4ec9-a396-d69d0e16a783",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import cross_validate\n",
    "from sklearn.ensemble import GradientBoostingRegressor\n",
    "from catboost import CatBoostRegressor\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "def compare_models(X, y, random_state=42, cv=5):\n",
    "    models = {\n",
    "        \"Gradient Boosting\": GradientBoostingRegressor(n_estimators=100, random_state=random_state),\n",
    "        \"CatBoost\": CatBoostRegressor(verbose=False, random_state=random_state)\n",
    "    }\n",
    "\n",
    "    results = []\n",
    "\n",
    "    for name, model in models.items():\n",
    "        scores = cross_validate(\n",
    "            model, X, y,\n",
    "            scoring=['neg_mean_absolute_error', 'neg_mean_squared_error', 'r2'],\n",
    "            cv=cv,\n",
    "            return_train_score=False\n",
    "        )\n",
    "\n",
    "        mae = -scores['test_neg_mean_absolute_error'].mean()\n",
    "        rmse = np.sqrt(-scores['test_neg_mean_squared_error'].mean())\n",
    "        r2 = scores['test_r2'].mean()\n",
    "\n",
    "        results.append({\n",
    "            'Model': name,\n",
    "            'R2 Score': round(r2, 4),\n",
    "            'Log RMSE': round(rmse, 2),\n",
    "            'MAE': round(mae, 2)\n",
    "        })\n",
    "\n",
    "    results_df = pd.DataFrame(results).sort_values(\"R2 Score\", ascending=False).reset_index(drop=True)\n",
    "    results_df['Real RMSE'] = np.expm1(results_df['Log RMSE'])  # log dönüşümden geri dönüş\n",
    "    return results_df \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "6a3ee78a-cf6d-4627-97c3-613818bcbf8d",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "               Model  R2 Score  Log RMSE   MAE  Real RMSE\n0           CatBoost    0.9216      0.16  0.11   0.173511\n1  Gradient Boosting    0.9091      0.18  0.12   0.197217\n"
     ]
    }
   ],
   "source": [
    "# Hedef ve özellikleri tekrar hatırlatalım:\n",
    "X = df_encoded.drop([\"Price(TRY)_log\"], axis=1)\n",
    "y = df_encoded[\"Price(TRY)_log\"]\n",
    "\n",
    "results = compare_models(X, y)\n",
    "print(results)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "4595e681-d93f-48fb-856d-c14f9fc49749",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test R² Score: 0.940565299643495\nTest RMSE: 0.16207958530651964\nTest MAE: 0.09593403749224823\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from catboost import CatBoostRegressor\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n",
    "import numpy as np\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "model = CatBoostRegressor(verbose=False, random_state=42)\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "y_pred = model.predict(X_test)\n",
    "\n",
    "print(\"Test R² Score:\", r2_score(y_test, y_pred))\n",
    "print(\"Test RMSE:\", np.sqrt(mean_squared_error(y_test, y_pred)))\n",
    "print(\"Test MAE:\", mean_absolute_error(y_test, y_pred))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "3f93ac14-9373-4e8a-80a2-31dac61a3b72",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "5ed298a6-54fd-42cf-b031-018082db1c7d",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "display_data",
     "data": {
      "image/png": "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CmFKRnkOHz6MzMxMDBs2DC1atBBtffr0wcaNGwEAI0eOxO+//46pU6fi5s2b2L17t7BSR8k62VOnTsUvv/yCsWPHIiEhAbdu3cL3339f7kOERERE9M9jAk3VZu7cuSgqKpIrt7a2hrGxsWi7ePGiUN+xY0dIpVIUFxejTZs2Qnn79u1RUFAgLHdXUe3atcOFCxfQpEkTfPrpp7CxscHHH3+M69evY9myZQCAjz/+GBMmTMDYsWPRunVr/PLLL5g5c+Zb+964cSM8PDxKnabRp08fXLhwAVeuXIG5uTn27t2L/fv3o2XLlli9erUw2l0yBaNly5aIjY0Vkn07OzvMmjVLNDWEiIiIap6kWJGnrIioysyfPx9r1qzBvXv3qqzP7Ozs16txBO+GklSjyvolIqpJKQv4hleqfiV/Q7OysuQWEfg7zoEm+oesWrUKbdu2hb6+PuLj47Fo0SJOzyAiIvoAMYGmD1pcXBy6detWZn1OTs4/GE35bt26hXnz5iEjIwMNGzbEpEmTEBoaWi3nuhbm+dZPz0RERFQ5nMJBH7S8vDz8+eefZdb/11a0UOTrJyIiIvofTuGg/wx1dfX/XJJMRERENYurcBARERERKYAJNBERERGRAphAExEREREpgAk0EREREZECmEATERERESmACTQRERERkQKYQBMRERERKYAJNBERERGRAphAExEREREpgAk0EREREZECmEATERERESmACTQRERERkQKYQBMRERERKUClpgMgoqrXYvZxKEk1ajoMInrPpSzwrukQiD5IHIEmIiIiIlIAE2giIiIiIgUwgSaqhOLiYnh4eMDT01OubtWqVdDT08P9+/drIDIiIiKqbkygiSpBIpFg8+bN+PXXX7F27Vqh/O7du5gyZQpWrlyJBg0aVOk5CwoKqrQ/IiIiqhwm0ESVZGpqiuXLlyMkJAR3795FcXExhg0bhq5du8LOzg7dunWDlpYW6tWrh0GDBuGvv/4Sjj127BicnZ2hp6cHfX199OjRA8nJyUJ9SkoKJBIJdu3aBVdXV6ipqWH79u01cZlERET0N0ygid7BkCFD8NFHH2Ho0KH4+uuvce3aNaxduxadO3eGnZ0dLly4gGPHjuHhw4fo37+/cNzz588xceJEXLhwASdPnoSSkhJ8fX1RVFQk6n/atGkYP348EhMTS50ukp+fj+zsbNFGRERE1UtSXFxcXNNBEH3IHj16hObNmyMjIwP79u3DtWvXEBcXh+PHjwtt7t+/D1NTUyQlJcHKykquj7/++gsGBga4evUqWrRogZSUFJibm2PZsmUYP358meeeM2cOwsLC5MpNg3dzGTsieisuY0f0P9nZ2dDV1UVWVhZ0dHTKbcsRaKJ3ZGhoiJEjR8LGxga9evXC5cuXERMTAy0tLWFr2rQpAAjTNG7dugU/Pz9YWFhAR0cHZmZmAIDU1FRR3w4ODuWeOzQ0FFlZWcJ27969qr9AIiIiEuGLVIiqgIqKClRUXv/vlJOTAx8fHyxcuFCunbGxMQDAx8cHjRo1wvr162FiYoKioiK0aNECL1++FLXX1NQs97xSqRRSqbSKroKIiIgqggk0URWzt7fHvn37YGZmJiTVb3ry5AmSkpKwfv16dOrUCQBw+vTpfzpMIiIiqiRO4SCqYmPGjEFGRgb8/Pxw/vx5JCcn4/jx4wgKCkJhYSFq164NfX19rFu3Drdv38apU6cwceLEmg6biIiIKogJNFEVMzExQXx8PAoLC9G1a1fY2toiODgYenp6UFJSgpKSEqKjo3Hx4kW0aNECEyZMwKJFi2o6bCIiIqogrsJB9C9S8gQxV+EgoorgKhxE/8NVOIiIiIiIqgkfIiT6F7oW5vnWT89ERERUORyBJiIiIiJSABNoIiIiIiIFMIEmIiIiIlIAE2giIiIiIgUwgSYiIiIiUgATaCIiIiIiBTCBJiIiIiJSABNoIiIiIiIFMIEmIiIiIlIAE2giIiIiIgUwgSYiIiIiUgATaCIiIiIiBTCBJiIiIiJSABNoIiIiIiIFqNR0AERU9VrMPg4lqUZNh0HVKGWBd02HQET0n8URaCIiIiIiBTCBJiIiIiJSABNoqrSoqCjo6enVdBg1aubMmRgxYkSV9/vy5UuYmZnhwoULVd43ERERvRsm0P9SgYGBkEgkcpuXl1eVnWPAgAG4efNmlfUHACkpKaJ49fX10bVrV1y6dKlKz1MV0tPTsXz5cnzxxRdCWWBgIHr16iXXViaTQSKR4OnTp6L9kq1evXro06cP7ty5AwBQVVVFSEgIpk6d+k9cChERESmACfS/mJeXF9LS0kTbzp07q6x/dXV1GBoaVll/bzpx4gTS0tJw/Phx5OTkoFu3bkLyWdMKCgoAABs2bICjoyMaNWpU6b6SkpLw4MED7NmzB9evX4ePjw8KCwsBAP7+/jh9+jSuX79eJXETERFR1WAC/S8mlUphZGQk2mrXrg0AkEgk2LBhA3x9faGhoQFLS0scPHhQdPzBgwdhaWkJNTU1uLu7Y8uWLaJR1L9P4ZgzZw5at26Nbdu2wczMDLq6uhg4cCCePXsmtCkqKkJkZCTMzc2hrq6OVq1aYe/evXKx6+vrw8jICA4ODli8eDEePnyIX3/9FQCwb98+NG/eHFKpFGZmZliyZIlw3Ndff40WLVoI+wcOHIBEIsGaNWuEMg8PD8yYMUPY//7772Fvbw81NTVYWFggLCwMr169EuolEglWr16Njz/+GJqampg/fz4AIDo6Gj4+PhX+fZTG0NAQxsbGcHFxwaxZs3Djxg3cvn0bAFC7dm04OTkhOjr6nc5BREREVYsJ9H9YWFgY+vfvjytXrqB79+7w9/dHRkYGAODu3bvo27cvevXqhcuXL2PkyJGiqQplSU5OxoEDB3D48GEcPnwYsbGxWLBggVAfGRmJrVu3Ys2aNbh+/TomTJiAgIAAxMbGltmnuro6gNfzgi9evIj+/ftj4MCBuHr1KubMmYOZM2ciKioKAODq6oobN27g8ePHAIDY2FjUrVsXMpkMwOvR4zNnzsDNzQ0AEBcXh8GDB2P8+PG4ceMG1q5di6ioKCFJLjFnzhz4+vri6tWrGDp0KDIyMnDjxg04ODhU6F5XxJvXWaJdu3aIi4sr85j8/HxkZ2eLNiIiIqpeTKD/xQ4fPgwtLS3RFhERIdQHBgbCz88PTZo0QUREBHJycnDu3DkAwNq1a2FtbY1FixbB2toaAwcORGBg4FvPWVRUhKioKLRo0QKdOnXCoEGDcPLkSQCvk72IiAhs2rQJnp6esLCwQGBgIAICArB27dpS+3v69CnCw8OhpaWFdu3a4auvvsJHH32EmTNnwsrKCoGBgRg7diwWLVoEAGjRogXq1KkjJOQymQyTJk0S9s+dO4eCggI4OjoCeP0hYtq0aRgyZAgsLCzQpUsXhIeHy8XzySefICgoCBYWFmjYsCFSU1NRXFwMExOTCt33bt26lXvf0tLSsHjxYtSvXx/W1tZCuYmJCf74448yj4uMjISurq6wmZqalnseIiIiend8kcq/mLu7O1avXi0qq1OnjvBzy5YthZ81NTWho6ODR48eAXg9N7dt27aiY9u1a/fWc5qZmUFbW1vYNzY2Fvq8ffs2cnNz0aVLF9ExL1++hJ2dnajM0dERSkpKeP78OSwsLLBr1y7Uq1cPiYmJ6Nmzp6itk5MTli1bhsLCQigrK8PFxQUymQweHh64ceMGRo8ejS+//BK///47YmNj0bZtW2hovH7JyOXLlxEfHy8acS4sLMSLFy+Qm5srtPv7SHNeXh4AQE1NTe4elHbff/31VwQEBMi1bdCgAYqLi5Gbm4tWrVph3759UFVVFerV1dWRm5srd1yJ0NBQTJw4UdjPzs5mEk1ERFTNmED/i2lqaqJJkyZl1teqVUu0L5FIUFRU9E7nLK/PnJwcAMCRI0dQv359UTupVCra37VrF5o1awZ9fX2Fl8pzc3PDunXrEBcXBzs7O+jo6AhJdWxsLFxdXYW2OTk5CAsLQ+/eveX6eTM51tTUFNXVrVsXAJCZmQkDAwNRXWn3/f79+6XGGhcXBx0dHRgaGoo+eJTIyMiQ6/9NUqlU7t4RERFR9WICTaWytrbGDz/8ICo7f/78O/XZrFkzSKVSpKamipLY0piamqJx48Zy5TY2NoiPjxeVxcfHw8rKCsrKygBez4MODg7Gnj17hLnObm5uOHHiBOLj4zFp0iThWHt7eyQlJZX7QaM0jRs3ho6ODm7cuAErKyuFjn2Tubl5uR8Qrl27Jjc6T0RERDWLCfS/WH5+PtLT00VlKioqwuhpeUaOHImvvvoKU6dOxbBhw5CQkCA8qCeRSCoVj7a2NkJCQjBhwgQUFRXB2dkZWVlZiI+Ph46ODoYMGfLWPiZNmoS2bdsiPDwcAwYMwJkzZ/D1119j1apVQpuWLVuidu3a2LFjBw4fPgzgdQIdEhICiUQCJycnoe2sWbPQo0cPNGzYEH379oWSkhIuX76Ma9euYd68eWXGoaSkBA8PD5w+fbrUdZ+rSlxcHMLDw6utfyIiIlIcHyL8Fzt27BiMjY1Fm7Ozc4WONTc3x969e7F//360bNkSq1evFlbheJcpA+Hh4Zg5cyYiIyNhY2MDLy8vHDlyBObm5hU63t7eHrt370Z0dDRatGiBWbNmYe7cuaIHHCUSCTp16gSJRCJcb8uWLaGjowMHBwfRdAxPT08cPnwYP/74I9q2bYsOHTpg6dKlFVrbefjw4YiOjn7naS9lOXPmDLKystC3b99q6Z+IiIgqR1JcXFxc00HQh2H+/PlYs2YN7t27V9OhvBeKi4vRvn17TJgwAX5+flXe/4ABA9CqVStMnz69wsdkZ2e/Xo0jeDeUpBpVHhO9P1IWeNd0CERE/yolf0OzsrKgo6NTbluOQFOZVq1ahfPnz+POnTvYtm0bFi1aVKFpFv8VEokE69atE710paq8fPkStra2mDBhQpX3TURERO+GI9BUpgkTJmDXrl3IyMhAw4YNMWjQIISGhkJFhVPn31eKfHomIiKi/1HkbygTaKJ/ESbQRERElcMpHERERERE1YQJNBERERGRAphAExEREREpgAk0EREREZECmEATERERESmACTQRERERkQKYQBMRERERKYAJNBERERGRAphAExEREREpgAk0EREREZECmEATERERESmACTQRERERkQKYQBMRERERKUClpgMgoqrXYvZxKEk1ajoMeouUBd41HQIREVUCR6CJiIiIiBTABJpqnJubG4KDg4V9MzMzLFu2rMbieRsXFxfs2LFD2JdIJDhw4ECVnuPYsWNo3bo1ioqKqrRfIiIiendMoKlaBAYGQiKRYNSoUXJ1Y8aMgUQiQWBgIABg//79CA8P/4cjrJyDBw/i4cOHGDhwYLWex8vLC7Vq1cL27dur9TxERESkOCbQVG1MTU0RHR2NvLw8oezFixfYsWMHGjZsKJTVqVMH2traNRGiwlasWIGgoCAoKVX//zqBgYFYsWJFtZ+HiIiIFMMEmqqNvb09TE1NsX//fqFs//79aNiwIezs7ISyv0/h+LunT59i+PDhMDAwgI6ODjp37ozLly8L9cnJyejZsyfq1asHLS0ttG3bFidOnBD1kZaWBm9vb6irq8Pc3Bw7duyQmyrytvM8fvwYp06dgo+PT7nXPXv2bBgbG+PKlSsAXk9JmTdvHgYPHgwtLS00atQIBw8exOPHj9GzZ09oaWmhZcuWuHDhgqgfHx8fXLhwAcnJyeWej4iIiP5ZTKCpWg0dOhSbN28W9jdt2oSgoCCF+ujXrx8ePXqEo0eP4uLFi7C3t8dHH32EjIwMAEBOTg66d++OkydP4tKlS/Dy8oKPjw9SU1OFPgYPHowHDx5AJpNh3759WLduHR49eqTQeU6fPg0NDQ3Y2NiUGmdxcTE+//xzbN26FXFxcWjZsqVQt3TpUjg5OeHSpUvw9vbGoEGDMHjwYAQEBOC3335D48aNMXjwYBQXFwvHNGzYEPXq1UNcXJxC94uIiIiqFxNoqlYBAQE4ffo0/vjjD/zxxx+Ij49HQEBAhY8/ffo0zp07hz179sDBwQGWlpZYvHgx9PT0sHfvXgBAq1atMHLkSLRo0QKWlpYIDw9H48aNcfDgQQDA77//jhMnTmD9+vVo37497O3tsWHDBtHUkoqc548//kC9evVKnb7x6tUrBAQE4OTJkzh9+jSaNGkiqu/evTtGjhwJS0tLzJo1C9nZ2Wjbti369esHKysrTJ06FYmJiXj48KHoOBMTE/zxxx9l3p/8/HxkZ2eLNiIiIqpeXAeaqpWBgQG8vb0RFRWF4uJieHt7o27duhU+/vLly8jJyYG+vr6oPC8vT5jakJOTgzlz5uDIkSNIS0vDq1evkJeXJ4xAJyUlQUVFBfb29sLxTZo0Qe3atRU6T15eHtTU1EqNc8KECZBKpTh79myp1/fmaHS9evUAALa2tnJljx49gpGRkVCurq6O3Nzcsm4PIiMjERYWVmY9ERERVT0m0FTthg4dirFjxwIAvvnmG4WOzcnJgbGxMWQymVydnp4eACAkJAQ//fQTFi9ejCZNmkBdXR19+/bFy5cvq/Q8devWRWZmZqnHd+nSBTt37sTx48fh7+8vV1+rVi3hZ4lEUmbZ35ety8jIgIGBQZlxh4aGYuLEicJ+dnY2TE1Ny2xPRERE744JNFU7Ly8vvHz5EhKJBJ6engoda29vj/T0dKioqMDMzKzUNvHx8QgMDISvry+A18lwSkqKUG9tbY1Xr17h0qVLaNOmDQDg9u3bomS4Iuexs7NDeno6MjMzRaPXAPDxxx/Dx8cHn3zyCZSVlatkmbsXL14gOTlZ9MDl30mlUkil0nc+FxEREVUc50BTtVNWVkZiYiJu3LgBZWVlhY718PBAx44d0atXL/z4449ISUnBL7/8gi+++EJYtcLS0hL79+9HQkICLl++jE8++UQ0ktu0aVN4eHhgxIgROHfuHC5duoQRI0ZAXV1dGPmtyHns7OxQt25dxMfHlxqrr68vtm3bhqCgIGHe9Ls4e/YspFIpOnbs+M59ERERUdVhAk3/CB0dHejo6Ch8nEQiwQ8//AAXFxcEBQXBysoKAwcOFB7oA4CvvvoKtWvXhqOjI3x8fODp6Sma7wwAW7duRb169eDi4gJfX198+umn0NbWFuY0V+Q8ysrKCAoKKvflJn379sWWLVswaNAg0fJ9lbFz5074+/tDQ0PjnfohIiKiqiUpfnPdLKL/iPv378PU1BQnTpzARx99VOHj0tPT0bx5c/z2229o1KhRtcX3119/wdraGhcuXIC5uXmFj8vOzoauri5Mg3dDScrE+32XssC7pkMgIqL/V/I3NCsr662DfpwDTf8Jp06dQk5ODmxtbZGWloYpU6bAzMwMLi4uCvVjZGSEjRs3IjU1tVoT6JSUFKxatUqh5JmIiIj+GUyg6T+hoKAA06dPx507d6CtrQ1HR0ds375dtBJGRfXq1avqA/wbBwcHODg4VPt5iIiISHGcwkH0L6LI109ERET0P4r8DeVDhERERERECmACTURERESkACbQREREREQKYAJNRERERKQAJtBERERERApgAk1EREREpAAm0ERERERECmACTURERESkACbQREREREQKYAJNRERERKQAJtBERERERApgAk1EREREpAAm0ERERERECmACTURERESkAJWaDoCIql6L2cehJNWo6TA+SCkLvGs6BCIies9xBJqIiIiISAFMoD8gc+bMQevWrd+5n6ioKOjp6b1zP1T9qup3TkRERFXnX59ASySScrc5c+bUdIgVFhISgpMnT75zPwMGDMDNmzerIKLX5syZ89b7XJNSUlIgkUigrKyMP//8U1SXlpYGFRUVSCQSpKSk1EyARERE9EH51yfQaWlpwrZs2TLo6OiIykJCQoS2xcXFePXqVQ1GWz4tLS3o6+u/cz/q6uowNDSsgoheCwkJEd3TBg0aYO7cuaKy90H9+vWxdetWUdmWLVtQv379GoqIiIiIPkT/+gTayMhI2HR1dSGRSIT933//Hdra2jh69CjatGkDqVSK06dPIzk5GT179kS9evWgpaWFtm3b4sSJE6J+zczMEBERgaFDh0JbWxsNGzbEunXrhPqXL19i7NixMDY2hpqaGho1aoTIyEihXiKRYO3atejRowc0NDRgY2ODM2fO4Pbt23Bzc4OmpiYcHR2RnJwsHPP3r/NlMhnatWsHTU1N6OnpwcnJCX/88QcA4PLly3B3d4e2tjZ0dHTQpk0bXLhwAUDpUzhWr16Nxo0bQ1VVFdbW1ti2bZuoXiKRYMOGDfD19YWGhgYsLS1x8OBBAK8T+zfvs7KyMrS1tWFkZIR169bBw8ND7vfSunVr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BWNjY9jZ2UFJSQl79uyBkZFRlb3A5O7du1i3bh0+/vhjmJiYICkpCbdu3cLgwYORl5eHyZMno2/fvjA3N8f9+/dx/vx59OnTp9S+Jk+ejP79+8POzg4eHh44dOgQ9u/fL7fyyLsYPny4MEc7Pj5erv7ly5cYNmwYZsyYgZSUFMyePRtjx46FkpIStLW1ERISggkTJqCoqAjOzs7IyspCfHw8dHR05FbReJtPP/0U/fr1K/N3YWlpia1bt+L48eMwNzfHtm3bcP78eZibmyt0ns6dO+Prr79Gx44dUVhYiKlTp4pGrS0tLZGamoro6Gi0bdsWR44ceedvCYiIiKj6MYEuxVdffYWhQ4fC0dERdevWxdSpUxV+OEtbWxtffvklbt26BWVlZbRt2xY//PADlJSqZtaMhoYGfv/9d2zZsgVPnjyBsbExxowZg5EjR+LVq1d48uQJBg8ejIcPH6Ju3bro3bu36MG4N/Xq1QvLly/H4sWLMX78eJibm2Pz5s1wc3OrkliB18mio6MjMjIy0L59e7n6jz76CJaWlnBxcUF+fj78/PxEL7kJDw+HgYEBIiMjcefOHejp6cHe3h7Tp09XOBYVFRXUrVu3zPqRI0fi0qVLGDBgACQSCfz8/DB69GgcPXpUofMsWbIEQUFB6NSpE0xMTLB8+XJcvHhRqP/4448xYcIEjB07Fvn5+fD29sbMmTM/qJf7EBER/RdJiv8+SZOoGhQXF8PS0hKjR4/GxIkTRXWBgYF4+vSp3JrJpLjs7OzXDxMG74aSVOPtB5CclAXeNR0CERHVgJK/oVlZWdDR0Sm3LUegqdo9fvwY0dHRSE9PL3NZPiIiIqIPBRNoqnaGhoaoW7cu1q1bh9q1a1d5/6NGjcK3335bal1AQADWrFlT5ed8310L83zrp2ciIiKqHE7hoA/eo0ePypyjrqOjA0NDw384opqjyNdPRERE9D+cwkH/KYaGhv+pJJmIiIhqFl+kQkRERESkACbQREREREQKYAJNRERERKQAJtBERERERApgAk1EREREpAAm0ERERERECmACTURERESkACbQREREREQKYAJNRERERKQAJtBERERERApgAk1EREREpAAm0ERERERECmACTURERESkAJWaDoCIql6L2cehJNWo6TAqJGWBd02HQEREpBCOQBMRERERKYAJNFWKTCaDRCLB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PQpra+tq9WdjY4OioiIsWrQInTt3RkpKCr7//vsqHWtlZYXdu3cjPT0dRkZGMDAwwKJFi2BmZobmzZtDKpXi559/hqmpqcrL+xEREdHrwxHolzR9+vRy1/S1t7eHmZmZ0nb8+HGx3sPDA3K5HIIgoGXLlmK5m5sbioqKxOXuXkZMTEyZJD4wMBARERGYOHEiWrVqhYcPH2LAgAEvdZ5S8+fPx3fffYe1a9eiWbNmcHFxwW+//YbNmzdj9OjRKvc3b948eHh4oFOnTggICICXlxcaN25c5WX9yvPpp5+ie/fu6N27N9zc3HD37l2MGDGi2v05OTlh3rx5iImJQbNmzbBmzZoqLzs3dOhQ2Nvbw8XFBSYmJkhJSYGenh6++eYbuLi4oFWrVsjIyMAvv/wCqZT/qRIREb0tJIIqT34R1aD8/HzUq1cPsbGxGDx4cE2H81bKzc19thpH2HpI5ar9wEzG7KDXFBUREdHbr/Tf0JycnEqfKeIUDnprnThxAufPn4erqytycnIwffp0AECXLl1qODIiIiL6kDGBfgckJyejQ4cOFdY//6t375u5c+ciPT0dGhoaaNmyJZKTk2FsbFzTYb31zkQFckUOIiKi14RTON4BBQUFuHHjRoX1NjY2bzAaepup8ucnIiIi+huncLxntLS0mCQTERERvSX4aD8RERERkQqYQBMRERERqYAJNBERERGRCphAExERERGpgAk0EREREZEKmEATEREREamACTQRERERkQqYQBMRERERqYAJNBERERGRCphAExERERGpgAk0EREREZEKmEATEREREamACTQRERERkQrUajoAInr1mkXuhlSuXaW2GbODXnM0RERE7xeOQBMRERERqYAJNNFbTCKRYPPmzTUdBhERET2HCTTR/wsNDYVEIhE3IyMjtG/fHqdOnarp0IiIiOgtwgSa6Dnt27dHVlYWsrKykJiYCDU1NXTq1KnC9kVFRW8wOiIiInobMIEmeo5cLoepqSlMTU3h7OyML7/8EteuXcOdO3eQkZEBiUSCdevWwdfXF5qamlizZg3u3r2Lvn37ol69etDW1oaDgwPWrl2r1K+fnx/GjBmDiRMnonbt2jA1NcW0adOU2ly4cAE+Pj7Q1NREkyZNsGfPnjd45URERFRVXIWDqAJ5eXn48ccfYWNjAyMjI+Tn5wMAvvzyS8TGxqJ58+bQ1NTE48eP0bJlS0yaNAn6+vrYsWMH+vfvj4YNG8LV1VXsLz4+HuPGjcPhw4dx8OBBhIaGwsvLC+3atUNJSQm6d++OunXr4vDhw8jJyUFYWFilMT558gRPnjwR93Nzc1/5fSAiIiJlTKCJnrN9+3bo6uoCAPLz82FmZobt27dDKv37jzVhYWHo3r270nETJkwQX48ePRq7d+/G+vXrlRJoR0dHREZGAgBsbW3xn//8B4mJiWjXrh327t2L8+fPY/fu3TA3NwcAzJo1Cx06dHhhvNHR0YiKinq5iyYiIiKVcAoH0XP8/f2RmpqK1NRUHDlyBIGBgejQoQOuXr0qtnFxcVE6pri4GF9//TUcHBxQu3Zt6OrqYvfu3cjMzFRq5+joqLRvZmaG27dvAwDS0tJgYWEhJs8A4OHhUWm84eHhyMnJEbdr166pfM1ERESkGo5AEz1HR0cHNjY24v6KFStgYGCA5cuXY8iQIWKb582ZMwcLFizA/Pnz4eDgAB0dHYSFhaGwsFCpnbq6utK+RCJBSUnJS8Url8shl8tfqg8iIiJSDRNooheQSCSQSqUoKCiosE1KSgq6dOmCfv36AQBKSkrw559/okmTJlU+T+PGjXHt2jVkZWXBzMwMAHDo0KGXC56IiIheC07hIHrOkydPkJ2djezsbKSlpWH06NHIy8tD586dKzzG1tYWe/bswYEDB5CWloZPP/0Ut27dUum8AQEBsLOzQ0hICE6ePInk5GRMnjz5ZS+HiIiIXgMm0ETP2bVrF8zMzGBmZgY3NzccPXoUP//8M/z8/Co8ZsqUKWjRogUCAwPh5+cHU1NTdO3aVaXzSqVSbNq0CQUFBXB1dcWQIUMwc+bMl7sYIiIiei0kgiAINR0EEb0aubm5MDAwgEXYekjl2lU6JmN20GuOioiI6O1X+m9oTk4O9PX1X9iWI9BERERERCrgQ4RE76EzUYGVfnsmIiKi6uEINBERERGRCphAExERERGpgAk0EREREZEKmEATEREREamACTQRERERkQqYQBMRERERqYAJNBERERGRCphAExERERGpgAk0EREREZEKmEATEREREamACTQRERERkQqYQBMRERERqYAJNBERERGRCphAExERERGpQK2mAyCiV69Z5G5I5dpVapsxO+g1R0NERPR+4Qg0EREREZEKmEATEREREamACTS9UEZGBiQSCVJTU19531ZWVpg/f/4r7/dt8TrvHREREdUcJtCvUWhoKCQSCWbPnq1UvnnzZkgkEgCAQqGARCIpd8vOzsauXbvE188zMzODlZWVUllpwpaYmFhpbH5+fuJ55HI56tWrh86dO2Pjxo1K7SwsLJCVlYVmzZpV2qeqCePRo0cxbNiwKrVduXIlDA0NK6xfu3YtZDIZRo4cWaX+VGVlZSXeLx0dHbRo0QI///zzC49R5d4RERHRu4MJ9GumqamJmJgY3L9//4Xt0tPTkZWVpbTVqVMH3t7eUFNTg0KhENumpaWhoKAA9+/fR0ZGhlielJQEuVwOLy+vKsU2dOhQZGVl4dKlS9iwYQOaNGmCPn36KCW1MpkMpqamUFN7dc+bFhYWAgBMTEygrV21B90q88MPP2DixIlYu3YtHj9+/Er6/Kfp06cjKysLJ06cQKtWrdC7d28cOHCg3LaFhYWv5d4RERFRzWMC/ZoFBATA1NQU0dHRL2xXp04dmJqaKm1SqRS6urpo1aqVUgKtUCjg7e0NLy+vMuXu7u7Q1NSsUmza2towNTVF/fr14e7ujpiYGCxduhTLly/H3r17AZQdVb5//z6Cg4NhYmICLS0t2NraIi4uDgBgbW0NAGjevDkkEgn8/PwAPBuJ79q1K2bOnAlzc3PY29sDKDuF48GDB/j0009Rt25daGpqolmzZti+fTsUCgUGDhyInJwccRR42rRp4nFXrlzBgQMH8OWXX8LOzk5pFN3T0xOTJk1Suu47d+5AXV0dv/32GwAgKysLQUFB0NLSgrW1NX766adyp5fo6enB1NQUdnZ2WLx4MbS0tLBt2zbxWr7++msMGDAA+vr6GDZsWLkj8mfPnkWnTp2gr68PPT09tG7dGpcuXRLrV6xYgcaNG0NTUxONGjXCd999V6X3koiIiN4cJtCvmUwmw6xZs7Bo0SJcv369Wn34+/sjKSlJ3E9KSoKfnx98fX2VyhUKBfz9/V8q3pCQENSqVavMVI5SEREROHfuHHbu3Im0tDQsWbIExsbGAIAjR44AAPbu3YusrCylPhITE5Geno49e/Zg+/btZfotKSlBhw4dkJKSgh9//BHnzp3D7NmzIZPJ4Onpifnz50NfX18cnZ8wYYJ4bFxcHIKCgmBgYIB+/frhhx9+EOuCg4ORkJAAQRDEsnXr1sHc3BytW7cGAAwYMAA3b96EQqHAhg0bsGzZMty+ffuF90lNTQ3q6uriaDoAzJ07F05OTjhx4gQiIiLKHHPjxg34+PhALpdj3759OH78OAYNGoSnT58CANasWYOpU6di5syZSEtLw6xZsxAREYH4+PgK43jy5Alyc3OVNiIiInq9+LflN6Bbt25wdnZGZGSkUnL3vPr16yvtW1pa4uzZswCeJdCzZs1CVlYWzMzMsH//fnzxxRd4+vQplixZAgC4fPkyMjMzXzqBlkqlsLOzU5oa8rzMzEw0b94cLi4uAKA0D9vExAQAYGRkBFNTU6XjdHR0sGLFCmhoaJTb7969e3HkyBGkpaXBzs4OANCgQQOx3sDAABKJpEy/JSUlWLlyJRYtWgQA6NOnD8aPH48rV67A2toavXr1QlhYGH7//XcxYf7pp5/Qt29fSCQSnD9/Hnv37sXRo0fFa1qxYgVsbW0rvEeFhYWIjY1FTk4O2rRpI5a3adMG48ePF/f/eQ8XL14MAwMDJCQkQF1dHQDEawWAyMhIxMbGonv37gCejeifO3cOS5cuRUhISLmxREdHIyoqqsJYiYiI6NXjCPQbEhMTg/j4eKSlpZVbn5ycjNTUVHH75ZdfxDpPT09oaGhAoVDg3LlzKCgoQIsWLeDi4oI7d+7gypUrUCgU0NLSgru7+0vHKgiC+JDjPw0fPhwJCQlwdnbGxIkTK5wD/E8ODg4VJs8AkJqaivr16ysllFWxZ88e5Ofno2PHjgAAY2NjtGvXDv/9738BPEvqP/74Y6xZswbAs+keBw8eRHBwMIBnc8/V1NTQokULsU8bGxvUqlWrzLkmTZoEXV1daGtrIyYmBrNnz0ZQ0N8/QlKagL/oGlu3bi0mz8/Lz8/HpUuXMHjwYOjq6orbjBkzlKZ4/FN4eDhycnLE7dq1ay+MgYiIiF4eR6DfEB8fHwQGBiI8PByhoaFl6q2trStcZUJbWxuurq5ISkrCvXv34O3tDZlMJk5vSEpKQlJSEry8vF6YpFZFcXExLly4gFatWpVb36FDB1y9ehW//PIL9uzZg7Zt22LkyJGYO3fuC/vV0dF5Yb2Wlla14v3hhx9w7949peNLSkpw6tQpREVFQSqVIjg4GGPGjMGiRYvw008/wcHBAQ4ODiqf64svvkBoaCh0dXVRt27dMl8yXuYa8/LyAADLly+Hm5ubUp1MJqvwOLlcDrlcXlnoRERE9ApxBPoNmj17NrZt24aDBw+qfKy/vz8UCgUUCoX4cB7wLDFXKBTYv3//S0/fAID4+Hjcv38fPXr0qLCNiYkJQkJC8OOPP2L+/PlYtmwZAIjJe3FxscrndXR0xPXr1/Hnn3+WW6+hoVGm37t372LLli1ISEhQGr0/ceIE7t+/j19//RUA0KVLFzx+/Bi7du3CTz/9JI4+A4C9vT2ePn2KEydOiGUXL14sd9UUY2Nj2NjYwNTUtMIR+squMTk5GUVFRWXq6tatC3Nzc1y+fBk2NjZKW+nDmURERPR24Aj0G+Tg4IDg4GAsXLiwTN3t27fLLL9mZGQk/rnf398fX3/9NbKzs5UeoPP19cWcOXPw8OFDlRPoR48eITs7G0+fPsX169exadMmfPvttxg+fHiFfU2dOhUtW7ZE06ZN8eTJE2zfvh2NGzcG8GwlES0tLezatQv169eHpqYmDAwMqhSLr68vfHx80KNHD8ybNw82NjY4f/48JBIJ2rdvDysrK+Tl5SExMRFOTk7Q1tbG6tWrYWRkhF69epVJaDt27IgffvgB7du3h46ODrp27YqIiAikpaWhb9++YrtGjRohICAAw4YNw5IlS6Curo7x48dDS0urWknyi4waNQqLFi1Cnz59EB4eDgMDAxw6dAiurq6wt7dHVFQUxowZAwMDA7Rv3x5PnjzBsWPHcP/+fYwbN+6VxkJERETVxxHoN2z69OkoKSkpU25vbw8zMzOl7fjx42K9h4cH5HI5BEFAy5YtxXI3NzcUFRWJy92pYvny5TAzM0PDhg3RvXt3nDt3DuvWrXvh0mkaGhoIDw+Ho6MjfHx8IJPJkJCQAODZyhQLFy7E0qVLYW5uji5duqgUz4YNG9CqVSv07dsXTZo0wcSJE8VRZ09PT3z22Wfo3bs3TExM8M033+C///0vunXrVm6i26NHD2zduhV//fUXgGercZw8eRKtW7fGRx99pNR21apVqFu3Lnx8fNCtWzcMHToUenp6VV4OsKqMjIywb98+5OXlwdfXFy1btsTy5cvFL0lDhgzBihUrEBcXBwcHB/j6+mLlypUcgSYiInrLSITn1/ciIly/fh0WFhbYu3cv2rZtW9PhqCQ3NxcGBgawCFsPqbxqP1KTMTuo8kZERETvudJ/Q3NycqCvr//CtpzCQR+80lFhBwcHZGVlYeLEibCysoKPj09Nh0ZERERvISbQ76Hk5GR06NChwvrSFR/omaKiInz11Ve4fPky9PT04OnpiTVr1pS73Ny74kxUYKXfnomIiKh6OIXjPVRQUIAbN25UWG9jY/MGo6E3SZU/PxEREdHfOIXjA6elpcUkmYiIiOg14SocREREREQqYAJNRERERKQCJtBERERERCpgAk1EREREpAIm0EREREREKmACTURERESkAibQREREREQqYAJNRERERKQCJtBERERERCpgAk1EREREpAIm0EREREREKmACTURERESkArWaDoCIXr1mkbshlWtXWJ8xO+gNRkNERPR+4Qg0EREREZEKmEATEREREamACTQRERERkQo+iAQ6NDQUEokEs2fPVirfvHkzJBIJAEChUEAikZS7ZWdnY9euXeLr55mZmcHKykqpLCMjAxKJBImJiZXG5ufnh7CwMKWyBQsWQC6XIyEhQfWLfY4gCFi2bBnc3Nygq6sLQ0NDuLi4YP78+Xj06FGV+5FIJNi8efNLxfI22bhxI1xcXGBoaAgdHR04Oztj9erVSm0EQcDUqVNhZmYGLS0tBAQE4MKFC0pt7t27h+DgYOjr68PQ0BCDBw9GXl6eWF/6mXrw4IFYdvPmTTg4OMDHxwc5OTmv9TqJiIjo9fggEmgA0NTURExMDO7fv//Cdunp6cjKylLa6tSpA29vb6ipqUGhUIht09LSUFBQgPv37yMjI0MsT0pKglwuh5eXl8pxRkZG4quvvsKWLVvQp08flY9/Xv/+/REWFoYuXbogKSkJqampiIiIwJYtW/Drr7++VN81pbCw8KX7qF27NiZPnoyDBw/i1KlTGDhwIAYOHIjdu3eLbb755hssXLgQ33//PQ4fPgwdHR0EBgbi8ePHYpvg4GCcPXsWe/bswfbt2/Hbb79h2LBhFZ730qVL8Pb2hqWlJXbv3g0DA4MybVauXAk/P7+XvkYiIiJ6fT6YBDogIACmpqaIjo5+Ybs6derA1NRUaZNKpdDV1UWrVq2UEmiFQgFvb294eXmVKXd3d4empmaV4xMEAaNHj8bChQuxZ88etG/fXqyzsrLCjBkzMGDAAOjq6sLS0hJbt27FnTt30KVLF+jq6sLR0RHHjh0Tj1m/fj3WrFmDtWvX4quvvkKrVq1gZWWFLl26YN++ffD39wcAHD16FO3atYOxsTEM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e/Ys0tLSkJCQgClTpgB4tuKKnZ0dQkJCcPLkSSQnJ2Py5MkqxWFra4s9e/bgwIEDSEtLw6effopbt25V6VgrKyskJiYiOzsb9+/fR0FBAUaNGgWFQoGrV68iJSUFR48eRePGjVWKiYiIiF4vJtCVmD59ernTBuzt7WFmZqa0HT9+XKz38PCAXC6HIAhK81/d3NxQVFQkLnf3MmJiYvD48WOlssDAQERERGDixIlo1aoVHj58iAEDBrzUeZ4/308//YTDhw8jMDAQTZs2xbhx4+Do6FhmGbuKSKVSJCQk4Pjx42jWrBk+//xzzJkzR+VYvLy88P3332PevHlwcnLCrl278PnnnytNzQgMDMT27dvx66+/olWrVnB3d8e3334rTreRSqXYtGkTCgoK4OrqiiFDhpRZyaMyU6ZMQYsWLRAYGAg/Pz+YmpqWWUawIrGxsdizZw8sLCzQvHlzyGQy3L17FwMGDICdnR169eqFDh06cI4zERHRW0YiqPJ0GNFbbOjQoTh//jySk5NrOpQak5ubCwMDA1iErYdUrl1um4zZQW84KiIiordf6b+hOTk5lU6J5Coc9M6aO3cu2rVrBx0dHezcuRPx8fEVztEmIiIielWYQL8FkpOT0aFDhwrr8/Ly3mA0744jR47gm2++wcOHD9GgQQMsXLgQQ4YMqemw3gpnogL5QCEREdFrwgT6LeDi4vJKVsr40Kxfv76mQyAiIqIPEBPot4CWlhZsbGxqOgwiIiIiqgKuwkFEREREpAIm0EREREREKmACTURERESkAibQREREREQqYAJNRERERKQCJtBERERERCpgAk1EREREpAIm0EREREREKmACTURERESkAibQREREREQqYAJNRERERKQCJtBERERERCpgAk1EREREpAK1mg6AiF69ZpG7IZVrlynPmB1UA9EQERG9XzgCTURERESkAibQ9MasXLkShoaGNR0GERER0UthAg0gNDQUEokEs2fPVirfvHkzJBIJAEChUEAikZS7ZWdnY9euXeLr55mZmcHKykqpLCMjAxKJBImJiZXG5ufnB4lEgoSEBKXy+fPnl+n3dSi97gcPHpSps7Kywvz58197DDWt9D2QSCTQ1NREkyZN8N13372SfsPCwl4+QCIiInqjmED/P01NTcTExOD+/fsvbJeeno6srCylrU6dOvD29oaamhoU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",
      "text/plain": [
       "<Figure size 600x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "feat_importances = model.get_feature_importance(prettified=True)\n",
    "feat_importances[:20].plot(kind='barh', x='Feature Id', y='Importances', figsize=(6,8), title=\"En Önemli 20 Özellik\")\n",
    "plt.gca().invert_yaxis()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "d24d2f41-65ce-4773-a35d-94305ccba89a",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gerçek Fiyat (log)</th>\n",
       "      <th>Tahmin (log)</th>\n",
       "      <th>Gerçek Fiyat (TRY)</th>\n",
       "      <th>Tahmin (TRY)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1194</th>\n",
       "      <td>13.208543</td>\n",
       "      <td>13.260629</td>\n",
       "      <td>545000.0</td>\n",
       "      <td>5.741393e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>762</th>\n",
       "      <td>13.017005</td>\n",
       "      <td>12.818679</td>\n",
       "      <td>450000.0</td>\n",
       "      <td>3.690458e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3896</th>\n",
       "      <td>12.847929</td>\n",
       "      <td>12.930124</td>\n",
       "      <td>380000.0</td>\n",
       "      <td>4.125536e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>770</th>\n",
       "      <td>14.085538</td>\n",
       "      <td>14.060481</td>\n",
       "      <td>1310000.0</td>\n",
       "      <td>1.277582e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5912</th>\n",
       "      <td>13.661778</td>\n",
       "      <td>13.820541</td>\n",
       "      <td>857500.0</td>\n",
       "      <td>1.005042e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3331</th>\n",
       "      <td>13.407544</td>\n",
       "      <td>13.375775</td>\n",
       "      <td>665000.0</td>\n",
       "      <td>6.442055e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3249</th>\n",
       "      <td>12.793862</td>\n",
       "      <td>12.701889</td>\n",
       "      <td>360000.0</td>\n",
       "      <td>3.283665e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1957</th>\n",
       "      <td>12.367345</td>\n",
       "      <td>12.425591</td>\n",
       "      <td>235000.0</td>\n",
       "      <td>2.490944e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3765</th>\n",
       "      <td>12.301387</td>\n",
       "      <td>12.224812</td>\n",
       "      <td>220000.0</td>\n",
       "      <td>2.037823e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3708</th>\n",
       "      <td>14.159101</td>\n",
       "      <td>14.037624</td>\n",
       "      <td>1410000.0</td>\n",
       "      <td>1.248712e+06</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1311 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Gerçek Fiyat (log)  Tahmin (log)  Gerçek Fiyat (TRY)  Tahmin (TRY)\n",
       "1194           13.208543     13.260629            545000.0  5.741393e+05\n",
       "762            13.017005     12.818679            450000.0  3.690458e+05\n",
       "3896           12.847929     12.930124            380000.0  4.125536e+05\n",
       "770            14.085538     14.060481           1310000.0  1.277582e+06\n",
       "5912           13.661778     13.820541            857500.0  1.005042e+06\n",
       "...                  ...           ...                 ...           ...\n",
       "3331           13.407544     13.375775            665000.0  6.442055e+05\n",
       "3249           12.793862     12.701889            360000.0  3.283665e+05\n",
       "1957           12.367345     12.425591            235000.0  2.490944e+05\n",
       "3765           12.301387     12.224812            220000.0  2.037823e+05\n",
       "3708           14.159101     14.037624           1410000.0  1.248712e+06\n",
       "\n",
       "[1311 rows x 4 columns]"
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "comparison = pd.DataFrame({\n",
    "    \"Gerçek Fiyat (log)\": y_test,\n",
    "    \"Tahmin (log)\": y_pred,\n",
    "    \"Gerçek Fiyat (TRY)\": np.expm1(y_test),\n",
    "    \"Tahmin (TRY)\": np.expm1(y_pred),\n",
    "})\n",
    "comparison"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "d9b86a52-f35e-4aab-bb0d-c2f3b6e1cf86",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "display_data",
     "data": {
      "text/plain": [
       "\u001B[0;31m---------------------------------------------------------------------------\u001B[0m\n",
       "\u001B[0;31mKeyError\u001B[0m                                  Traceback (most recent call last)\n",
       "File \u001B[0;32m<command-5752074750107847>, line 5\u001B[0m\n",
       "\u001B[1;32m      1\u001B[0m \u001B[38;5;66;03m# Oransal hata segment analizi (Power BI'de kategoriye çevirebilirsin)\u001B[39;00m\n",
       "\u001B[1;32m      2\u001B[0m comparison[\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mSegment\u001B[39m\u001B[38;5;124m\"\u001B[39m] \u001B[38;5;241m=\u001B[39m pd\u001B[38;5;241m.\u001B[39mcut(comparison[\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mGerçek Fiyat (TRY)\u001B[39m\u001B[38;5;124m\"\u001B[39m],\n",
       "\u001B[1;32m      3\u001B[0m                                bins\u001B[38;5;241m=\u001B[39m[\u001B[38;5;241m0\u001B[39m, \u001B[38;5;241m200000\u001B[39m, \u001B[38;5;241m500000\u001B[39m, \u001B[38;5;241m1000000\u001B[39m, \u001B[38;5;241m2000000\u001B[39m],\n",
       "\u001B[1;32m      4\u001B[0m                                labels\u001B[38;5;241m=\u001B[39m[\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124m0–200K\u001B[39m\u001B[38;5;124m\"\u001B[39m, \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124m200–500K\u001B[39m\u001B[38;5;124m\"\u001B[39m, \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124m500–1M\u001B[39m\u001B[38;5;124m\"\u001B[39m, \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124m1M+\u001B[39m\u001B[38;5;124m\"\u001B[39m])\n",
       "\u001B[0;32m----> 5\u001B[0m segment_error \u001B[38;5;241m=\u001B[39m comparison\u001B[38;5;241m.\u001B[39mgroupby(\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mSegment\u001B[39m\u001B[38;5;124m\"\u001B[39m)[\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mOransal Hata (\u001B[39m\u001B[38;5;124m%\u001B[39m\u001B[38;5;124m)\u001B[39m\u001B[38;5;124m\"\u001B[39m]\u001B[38;5;241m.\u001B[39mmean()\n",
       "\n",
       "File \u001B[0;32m/databricks/python/lib/python3.11/site-packages/pandas/core/groupby/generic.py:1416\u001B[0m, in \u001B[0;36mDataFrameGroupBy.__getitem__\u001B[0;34m(self, key)\u001B[0m\n",
       "\u001B[1;32m   1407\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;28misinstance\u001B[39m(key, \u001B[38;5;28mtuple\u001B[39m) \u001B[38;5;129;01mand\u001B[39;00m \u001B[38;5;28mlen\u001B[39m(key) \u001B[38;5;241m>\u001B[39m \u001B[38;5;241m1\u001B[39m:\n",
       "\u001B[1;32m   1408\u001B[0m     \u001B[38;5;66;03m# if len == 1, then it becomes a SeriesGroupBy and this is actually\u001B[39;00m\n",
       "\u001B[1;32m   1409\u001B[0m     \u001B[38;5;66;03m# valid syntax, so don't raise warning\u001B[39;00m\n",
       "\u001B[1;32m   1410\u001B[0m     warnings\u001B[38;5;241m.\u001B[39mwarn(\n",
       "\u001B[1;32m   1411\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mIndexing with multiple keys (implicitly converted to a tuple \u001B[39m\u001B[38;5;124m\"\u001B[39m\n",
       "\u001B[1;32m   1412\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mof keys) will be deprecated, use a list instead.\u001B[39m\u001B[38;5;124m\"\u001B[39m,\n",
       "\u001B[1;32m   1413\u001B[0m         \u001B[38;5;167;01mFutureWarning\u001B[39;00m,\n",
       "\u001B[1;32m   1414\u001B[0m         stacklevel\u001B[38;5;241m=\u001B[39mfind_stack_level(),\n",
       "\u001B[1;32m   1415\u001B[0m     )\n",
       "\u001B[0;32m-> 1416\u001B[0m \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[38;5;28msuper\u001B[39m()\u001B[38;5;241m.\u001B[39m\u001B[38;5;21m__getitem__\u001B[39m(key)\n",
       "\n",
       "File \u001B[0;32m/databricks/python/lib/python3.11/site-packages/pandas/core/base.py:248\u001B[0m, in \u001B[0;36mSelectionMixin.__getitem__\u001B[0;34m(self, key)\u001B[0m\n",
       "\u001B[1;32m    246\u001B[0m \u001B[38;5;28;01melse\u001B[39;00m:\n",
       "\u001B[1;32m    247\u001B[0m     \u001B[38;5;28;01mif\u001B[39;00m key \u001B[38;5;129;01mnot\u001B[39;00m \u001B[38;5;129;01min\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mobj:\n",
       "\u001B[0;32m--> 248\u001B[0m         \u001B[38;5;28;01mraise\u001B[39;00m \u001B[38;5;167;01mKeyError\u001B[39;00m(\u001B[38;5;124mf\u001B[39m\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mColumn not found: \u001B[39m\u001B[38;5;132;01m{\u001B[39;00mkey\u001B[38;5;132;01m}\u001B[39;00m\u001B[38;5;124m\"\u001B[39m)\n",
       "\u001B[1;32m    249\u001B[0m     subset \u001B[38;5;241m=\u001B[39m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mobj[key]\n",
       "\u001B[1;32m    250\u001B[0m     ndim \u001B[38;5;241m=\u001B[39m subset\u001B[38;5;241m.\u001B[39mndim\n",
       "\n",
       "\u001B[0;31mKeyError\u001B[0m: 'Column not found: Oransal Hata (%)'"
      ]
     },
     "metadata": {
      "application/vnd.databricks.v1+output": {
       "addedWidgets": {},
       "arguments": {},
       "datasetInfos": [],
       "jupyterProps": {
        "ename": "KeyError",
        "evalue": "'Column not found: Oransal Hata (%)'"
       },
       "metadata": {
        "errorSummary": "Command skipped"
       },
       "removedWidgets": [],
       "sqlProps": null,
       "stackFrames": [
        "\u001B[0;31m---------------------------------------------------------------------------\u001B[0m",
        "\u001B[0;31mKeyError\u001B[0m                                  Traceback (most recent call last)",
        "File \u001B[0;32m<command-5752074750107847>, line 5\u001B[0m\n\u001B[1;32m      1\u001B[0m \u001B[38;5;66;03m# Oransal hata segment analizi (Power BI'de kategoriye çevirebilirsin)\u001B[39;00m\n\u001B[1;32m      2\u001B[0m comparison[\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mSegment\u001B[39m\u001B[38;5;124m\"\u001B[39m] \u001B[38;5;241m=\u001B[39m pd\u001B[38;5;241m.\u001B[39mcut(comparison[\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mGerçek Fiyat (TRY)\u001B[39m\u001B[38;5;124m\"\u001B[39m],\n\u001B[1;32m      3\u001B[0m                                bins\u001B[38;5;241m=\u001B[39m[\u001B[38;5;241m0\u001B[39m, \u001B[38;5;241m200000\u001B[39m, \u001B[38;5;241m500000\u001B[39m, \u001B[38;5;241m1000000\u001B[39m, \u001B[38;5;241m2000000\u001B[39m],\n\u001B[1;32m      4\u001B[0m                                labels\u001B[38;5;241m=\u001B[39m[\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124m0–200K\u001B[39m\u001B[38;5;124m\"\u001B[39m, \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124m200–500K\u001B[39m\u001B[38;5;124m\"\u001B[39m, \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124m500–1M\u001B[39m\u001B[38;5;124m\"\u001B[39m, \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124m1M+\u001B[39m\u001B[38;5;124m\"\u001B[39m])\n\u001B[0;32m----> 5\u001B[0m segment_error \u001B[38;5;241m=\u001B[39m comparison\u001B[38;5;241m.\u001B[39mgroupby(\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mSegment\u001B[39m\u001B[38;5;124m\"\u001B[39m)[\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mOransal Hata (\u001B[39m\u001B[38;5;124m%\u001B[39m\u001B[38;5;124m)\u001B[39m\u001B[38;5;124m\"\u001B[39m]\u001B[38;5;241m.\u001B[39mmean()\n",
        "File \u001B[0;32m/databricks/python/lib/python3.11/site-packages/pandas/core/groupby/generic.py:1416\u001B[0m, in \u001B[0;36mDataFrameGroupBy.__getitem__\u001B[0;34m(self, key)\u001B[0m\n\u001B[1;32m   1407\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;28misinstance\u001B[39m(key, \u001B[38;5;28mtuple\u001B[39m) \u001B[38;5;129;01mand\u001B[39;00m \u001B[38;5;28mlen\u001B[39m(key) \u001B[38;5;241m>\u001B[39m \u001B[38;5;241m1\u001B[39m:\n\u001B[1;32m   1408\u001B[0m     \u001B[38;5;66;03m# if len == 1, then it becomes a SeriesGroupBy and this is actually\u001B[39;00m\n\u001B[1;32m   1409\u001B[0m     \u001B[38;5;66;03m# valid syntax, so don't raise warning\u001B[39;00m\n\u001B[1;32m   1410\u001B[0m     warnings\u001B[38;5;241m.\u001B[39mwarn(\n\u001B[1;32m   1411\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mIndexing with multiple keys (implicitly converted to a tuple \u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[1;32m   1412\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mof keys) will be deprecated, use a list instead.\u001B[39m\u001B[38;5;124m\"\u001B[39m,\n\u001B[1;32m   1413\u001B[0m         \u001B[38;5;167;01mFutureWarning\u001B[39;00m,\n\u001B[1;32m   1414\u001B[0m         stacklevel\u001B[38;5;241m=\u001B[39mfind_stack_level(),\n\u001B[1;32m   1415\u001B[0m     )\n\u001B[0;32m-> 1416\u001B[0m \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[38;5;28msuper\u001B[39m()\u001B[38;5;241m.\u001B[39m\u001B[38;5;21m__getitem__\u001B[39m(key)\n",
        "File \u001B[0;32m/databricks/python/lib/python3.11/site-packages/pandas/core/base.py:248\u001B[0m, in \u001B[0;36mSelectionMixin.__getitem__\u001B[0;34m(self, key)\u001B[0m\n\u001B[1;32m    246\u001B[0m \u001B[38;5;28;01melse\u001B[39;00m:\n\u001B[1;32m    247\u001B[0m     \u001B[38;5;28;01mif\u001B[39;00m key \u001B[38;5;129;01mnot\u001B[39;00m \u001B[38;5;129;01min\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mobj:\n\u001B[0;32m--> 248\u001B[0m         \u001B[38;5;28;01mraise\u001B[39;00m \u001B[38;5;167;01mKeyError\u001B[39;00m(\u001B[38;5;124mf\u001B[39m\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mColumn not found: \u001B[39m\u001B[38;5;132;01m{\u001B[39;00mkey\u001B[38;5;132;01m}\u001B[39;00m\u001B[38;5;124m\"\u001B[39m)\n\u001B[1;32m    249\u001B[0m     subset \u001B[38;5;241m=\u001B[39m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mobj[key]\n\u001B[1;32m    250\u001B[0m     ndim \u001B[38;5;241m=\u001B[39m subset\u001B[38;5;241m.\u001B[39mndim\n",
        "\u001B[0;31mKeyError\u001B[0m: 'Column not found: Oransal Hata (%)'"
       ],
       "type": "baseError"
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import joblib\n",
    "joblib.dump(model, \"final_price_model_catboost.pkl\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "483f6c26-d7f8-49bc-ac09-5ff38a3ddcd2",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "display_data",
     "data": {
      "text/plain": [
       "\u001B[0;31m---------------------------------------------------------------------------\u001B[0m\n",
       "\u001B[0;31mKeyError\u001B[0m                                  Traceback (most recent call last)\n",
       "File \u001B[0;32m<command-5752074750107847>, line 5\u001B[0m\n",
       "\u001B[1;32m      1\u001B[0m \u001B[38;5;66;03m# Oransal hata segment analizi (Power BI'de kategoriye çevirebilirsin)\u001B[39;00m\n",
       "\u001B[1;32m      2\u001B[0m comparison[\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mSegment\u001B[39m\u001B[38;5;124m\"\u001B[39m] \u001B[38;5;241m=\u001B[39m pd\u001B[38;5;241m.\u001B[39mcut(comparison[\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mGerçek Fiyat (TRY)\u001B[39m\u001B[38;5;124m\"\u001B[39m],\n",
       "\u001B[1;32m      3\u001B[0m                                bins\u001B[38;5;241m=\u001B[39m[\u001B[38;5;241m0\u001B[39m, \u001B[38;5;241m200000\u001B[39m, \u001B[38;5;241m500000\u001B[39m, \u001B[38;5;241m1000000\u001B[39m, \u001B[38;5;241m2000000\u001B[39m],\n",
       "\u001B[1;32m      4\u001B[0m                                labels\u001B[38;5;241m=\u001B[39m[\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124m0–200K\u001B[39m\u001B[38;5;124m\"\u001B[39m, \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124m200–500K\u001B[39m\u001B[38;5;124m\"\u001B[39m, \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124m500–1M\u001B[39m\u001B[38;5;124m\"\u001B[39m, \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124m1M+\u001B[39m\u001B[38;5;124m\"\u001B[39m])\n",
       "\u001B[0;32m----> 5\u001B[0m segment_error \u001B[38;5;241m=\u001B[39m comparison\u001B[38;5;241m.\u001B[39mgroupby(\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mSegment\u001B[39m\u001B[38;5;124m\"\u001B[39m)[\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mOransal Hata (\u001B[39m\u001B[38;5;124m%\u001B[39m\u001B[38;5;124m)\u001B[39m\u001B[38;5;124m\"\u001B[39m]\u001B[38;5;241m.\u001B[39mmean()\n",
       "\n",
       "File \u001B[0;32m/databricks/python/lib/python3.11/site-packages/pandas/core/groupby/generic.py:1416\u001B[0m, in \u001B[0;36mDataFrameGroupBy.__getitem__\u001B[0;34m(self, key)\u001B[0m\n",
       "\u001B[1;32m   1407\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;28misinstance\u001B[39m(key, \u001B[38;5;28mtuple\u001B[39m) \u001B[38;5;129;01mand\u001B[39;00m \u001B[38;5;28mlen\u001B[39m(key) \u001B[38;5;241m>\u001B[39m \u001B[38;5;241m1\u001B[39m:\n",
       "\u001B[1;32m   1408\u001B[0m     \u001B[38;5;66;03m# if len == 1, then it becomes a SeriesGroupBy and this is actually\u001B[39;00m\n",
       "\u001B[1;32m   1409\u001B[0m     \u001B[38;5;66;03m# valid syntax, so don't raise warning\u001B[39;00m\n",
       "\u001B[1;32m   1410\u001B[0m     warnings\u001B[38;5;241m.\u001B[39mwarn(\n",
       "\u001B[1;32m   1411\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mIndexing with multiple keys (implicitly converted to a tuple \u001B[39m\u001B[38;5;124m\"\u001B[39m\n",
       "\u001B[1;32m   1412\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mof keys) will be deprecated, use a list instead.\u001B[39m\u001B[38;5;124m\"\u001B[39m,\n",
       "\u001B[1;32m   1413\u001B[0m         \u001B[38;5;167;01mFutureWarning\u001B[39;00m,\n",
       "\u001B[1;32m   1414\u001B[0m         stacklevel\u001B[38;5;241m=\u001B[39mfind_stack_level(),\n",
       "\u001B[1;32m   1415\u001B[0m     )\n",
       "\u001B[0;32m-> 1416\u001B[0m \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[38;5;28msuper\u001B[39m()\u001B[38;5;241m.\u001B[39m\u001B[38;5;21m__getitem__\u001B[39m(key)\n",
       "\n",
       "File \u001B[0;32m/databricks/python/lib/python3.11/site-packages/pandas/core/base.py:248\u001B[0m, in \u001B[0;36mSelectionMixin.__getitem__\u001B[0;34m(self, key)\u001B[0m\n",
       "\u001B[1;32m    246\u001B[0m \u001B[38;5;28;01melse\u001B[39;00m:\n",
       "\u001B[1;32m    247\u001B[0m     \u001B[38;5;28;01mif\u001B[39;00m key \u001B[38;5;129;01mnot\u001B[39;00m \u001B[38;5;129;01min\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mobj:\n",
       "\u001B[0;32m--> 248\u001B[0m         \u001B[38;5;28;01mraise\u001B[39;00m \u001B[38;5;167;01mKeyError\u001B[39;00m(\u001B[38;5;124mf\u001B[39m\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mColumn not found: \u001B[39m\u001B[38;5;132;01m{\u001B[39;00mkey\u001B[38;5;132;01m}\u001B[39;00m\u001B[38;5;124m\"\u001B[39m)\n",
       "\u001B[1;32m    249\u001B[0m     subset \u001B[38;5;241m=\u001B[39m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mobj[key]\n",
       "\u001B[1;32m    250\u001B[0m     ndim \u001B[38;5;241m=\u001B[39m subset\u001B[38;5;241m.\u001B[39mndim\n",
       "\n",
       "\u001B[0;31mKeyError\u001B[0m: 'Column not found: Oransal Hata (%)'"
      ]
     },
     "metadata": {
      "application/vnd.databricks.v1+output": {
       "addedWidgets": {},
       "arguments": {},
       "datasetInfos": [],
       "jupyterProps": {
        "ename": "KeyError",
        "evalue": "'Column not found: Oransal Hata (%)'"
       },
       "metadata": {
        "errorSummary": "Command skipped"
       },
       "removedWidgets": [],
       "sqlProps": null,
       "stackFrames": [
        "\u001B[0;31m---------------------------------------------------------------------------\u001B[0m",
        "\u001B[0;31mKeyError\u001B[0m                                  Traceback (most recent call last)",
        "File \u001B[0;32m<command-5752074750107847>, line 5\u001B[0m\n\u001B[1;32m      1\u001B[0m \u001B[38;5;66;03m# Oransal hata segment analizi (Power BI'de kategoriye çevirebilirsin)\u001B[39;00m\n\u001B[1;32m      2\u001B[0m comparison[\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mSegment\u001B[39m\u001B[38;5;124m\"\u001B[39m] \u001B[38;5;241m=\u001B[39m pd\u001B[38;5;241m.\u001B[39mcut(comparison[\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mGerçek Fiyat (TRY)\u001B[39m\u001B[38;5;124m\"\u001B[39m],\n\u001B[1;32m      3\u001B[0m                                bins\u001B[38;5;241m=\u001B[39m[\u001B[38;5;241m0\u001B[39m, \u001B[38;5;241m200000\u001B[39m, \u001B[38;5;241m500000\u001B[39m, \u001B[38;5;241m1000000\u001B[39m, \u001B[38;5;241m2000000\u001B[39m],\n\u001B[1;32m      4\u001B[0m                                labels\u001B[38;5;241m=\u001B[39m[\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124m0–200K\u001B[39m\u001B[38;5;124m\"\u001B[39m, \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124m200–500K\u001B[39m\u001B[38;5;124m\"\u001B[39m, \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124m500–1M\u001B[39m\u001B[38;5;124m\"\u001B[39m, \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124m1M+\u001B[39m\u001B[38;5;124m\"\u001B[39m])\n\u001B[0;32m----> 5\u001B[0m segment_error \u001B[38;5;241m=\u001B[39m comparison\u001B[38;5;241m.\u001B[39mgroupby(\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mSegment\u001B[39m\u001B[38;5;124m\"\u001B[39m)[\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mOransal Hata (\u001B[39m\u001B[38;5;124m%\u001B[39m\u001B[38;5;124m)\u001B[39m\u001B[38;5;124m\"\u001B[39m]\u001B[38;5;241m.\u001B[39mmean()\n",
        "File \u001B[0;32m/databricks/python/lib/python3.11/site-packages/pandas/core/groupby/generic.py:1416\u001B[0m, in \u001B[0;36mDataFrameGroupBy.__getitem__\u001B[0;34m(self, key)\u001B[0m\n\u001B[1;32m   1407\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;28misinstance\u001B[39m(key, \u001B[38;5;28mtuple\u001B[39m) \u001B[38;5;129;01mand\u001B[39;00m \u001B[38;5;28mlen\u001B[39m(key) \u001B[38;5;241m>\u001B[39m \u001B[38;5;241m1\u001B[39m:\n\u001B[1;32m   1408\u001B[0m     \u001B[38;5;66;03m# if len == 1, then it becomes a SeriesGroupBy and this is actually\u001B[39;00m\n\u001B[1;32m   1409\u001B[0m     \u001B[38;5;66;03m# valid syntax, so don't raise warning\u001B[39;00m\n\u001B[1;32m   1410\u001B[0m     warnings\u001B[38;5;241m.\u001B[39mwarn(\n\u001B[1;32m   1411\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mIndexing with multiple keys (implicitly converted to a tuple \u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[1;32m   1412\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mof keys) will be deprecated, use a list instead.\u001B[39m\u001B[38;5;124m\"\u001B[39m,\n\u001B[1;32m   1413\u001B[0m         \u001B[38;5;167;01mFutureWarning\u001B[39;00m,\n\u001B[1;32m   1414\u001B[0m         stacklevel\u001B[38;5;241m=\u001B[39mfind_stack_level(),\n\u001B[1;32m   1415\u001B[0m     )\n\u001B[0;32m-> 1416\u001B[0m \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[38;5;28msuper\u001B[39m()\u001B[38;5;241m.\u001B[39m\u001B[38;5;21m__getitem__\u001B[39m(key)\n",
        "File \u001B[0;32m/databricks/python/lib/python3.11/site-packages/pandas/core/base.py:248\u001B[0m, in \u001B[0;36mSelectionMixin.__getitem__\u001B[0;34m(self, key)\u001B[0m\n\u001B[1;32m    246\u001B[0m \u001B[38;5;28;01melse\u001B[39;00m:\n\u001B[1;32m    247\u001B[0m     \u001B[38;5;28;01mif\u001B[39;00m key \u001B[38;5;129;01mnot\u001B[39;00m \u001B[38;5;129;01min\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mobj:\n\u001B[0;32m--> 248\u001B[0m         \u001B[38;5;28;01mraise\u001B[39;00m \u001B[38;5;167;01mKeyError\u001B[39;00m(\u001B[38;5;124mf\u001B[39m\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mColumn not found: \u001B[39m\u001B[38;5;132;01m{\u001B[39;00mkey\u001B[38;5;132;01m}\u001B[39;00m\u001B[38;5;124m\"\u001B[39m)\n\u001B[1;32m    249\u001B[0m     subset \u001B[38;5;241m=\u001B[39m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mobj[key]\n\u001B[1;32m    250\u001B[0m     ndim \u001B[38;5;241m=\u001B[39m subset\u001B[38;5;241m.\u001B[39mndim\n",
        "\u001B[0;31mKeyError\u001B[0m: 'Column not found: Oransal Hata (%)'"
       ],
       "type": "baseError"
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "comparison[\"Hata (TRY)\"] = comparison[\"Gerçek Fiyat (TRY)\"] - comparison[\"Tahmin (TRY)\"]\n",
    "comparison[\"Mutlak Hata\"] = comparison[\"Hata (TRY)\"].abs()\n",
    "comparison[\"Oransal Hata (%)\"] = 100 * comparison[\"Mutlak Hata\"] / comparison[\"Gerçek Fiyat (TRY)\"]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {
      "byteLimit": 2048000,
      "rowLimit": 10000
     },
     "inputWidgets": {},
     "nuid": "cb7010a5-15f1-4da3-8d36-ea0b5a9de722",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "outputs": [
    {
     "output_type": "display_data",
     "data": {
      "text/plain": [
       "\u001B[0;31m---------------------------------------------------------------------------\u001B[0m\n",
       "\u001B[0;31mKeyError\u001B[0m                                  Traceback (most recent call last)\n",
       "File \u001B[0;32m<command-5752074750107847>, line 5\u001B[0m\n",
       "\u001B[1;32m      1\u001B[0m \u001B[38;5;66;03m# Oransal hata segment analizi (Power BI'de kategoriye çevirebilirsin)\u001B[39;00m\n",
       "\u001B[1;32m      2\u001B[0m comparison[\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mSegment\u001B[39m\u001B[38;5;124m\"\u001B[39m] \u001B[38;5;241m=\u001B[39m pd\u001B[38;5;241m.\u001B[39mcut(comparison[\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mGerçek Fiyat (TRY)\u001B[39m\u001B[38;5;124m\"\u001B[39m],\n",
       "\u001B[1;32m      3\u001B[0m                                bins\u001B[38;5;241m=\u001B[39m[\u001B[38;5;241m0\u001B[39m, \u001B[38;5;241m200000\u001B[39m, \u001B[38;5;241m500000\u001B[39m, \u001B[38;5;241m1000000\u001B[39m, \u001B[38;5;241m2000000\u001B[39m],\n",
       "\u001B[1;32m      4\u001B[0m                                labels\u001B[38;5;241m=\u001B[39m[\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124m0–200K\u001B[39m\u001B[38;5;124m\"\u001B[39m, \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124m200–500K\u001B[39m\u001B[38;5;124m\"\u001B[39m, \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124m500–1M\u001B[39m\u001B[38;5;124m\"\u001B[39m, \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124m1M+\u001B[39m\u001B[38;5;124m\"\u001B[39m])\n",
       "\u001B[0;32m----> 5\u001B[0m segment_error \u001B[38;5;241m=\u001B[39m comparison\u001B[38;5;241m.\u001B[39mgroupby(\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mSegment\u001B[39m\u001B[38;5;124m\"\u001B[39m)[\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mOransal Hata (\u001B[39m\u001B[38;5;124m%\u001B[39m\u001B[38;5;124m)\u001B[39m\u001B[38;5;124m\"\u001B[39m]\u001B[38;5;241m.\u001B[39mmean()\n",
       "\n",
       "File \u001B[0;32m/databricks/python/lib/python3.11/site-packages/pandas/core/groupby/generic.py:1416\u001B[0m, in \u001B[0;36mDataFrameGroupBy.__getitem__\u001B[0;34m(self, key)\u001B[0m\n",
       "\u001B[1;32m   1407\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;28misinstance\u001B[39m(key, \u001B[38;5;28mtuple\u001B[39m) \u001B[38;5;129;01mand\u001B[39;00m \u001B[38;5;28mlen\u001B[39m(key) \u001B[38;5;241m>\u001B[39m \u001B[38;5;241m1\u001B[39m:\n",
       "\u001B[1;32m   1408\u001B[0m     \u001B[38;5;66;03m# if len == 1, then it becomes a SeriesGroupBy and this is actually\u001B[39;00m\n",
       "\u001B[1;32m   1409\u001B[0m     \u001B[38;5;66;03m# valid syntax, so don't raise warning\u001B[39;00m\n",
       "\u001B[1;32m   1410\u001B[0m     warnings\u001B[38;5;241m.\u001B[39mwarn(\n",
       "\u001B[1;32m   1411\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mIndexing with multiple keys (implicitly converted to a tuple \u001B[39m\u001B[38;5;124m\"\u001B[39m\n",
       "\u001B[1;32m   1412\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mof keys) will be deprecated, use a list instead.\u001B[39m\u001B[38;5;124m\"\u001B[39m,\n",
       "\u001B[1;32m   1413\u001B[0m         \u001B[38;5;167;01mFutureWarning\u001B[39;00m,\n",
       "\u001B[1;32m   1414\u001B[0m         stacklevel\u001B[38;5;241m=\u001B[39mfind_stack_level(),\n",
       "\u001B[1;32m   1415\u001B[0m     )\n",
       "\u001B[0;32m-> 1416\u001B[0m \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[38;5;28msuper\u001B[39m()\u001B[38;5;241m.\u001B[39m\u001B[38;5;21m__getitem__\u001B[39m(key)\n",
       "\n",
       "File \u001B[0;32m/databricks/python/lib/python3.11/site-packages/pandas/core/base.py:248\u001B[0m, in \u001B[0;36mSelectionMixin.__getitem__\u001B[0;34m(self, key)\u001B[0m\n",
       "\u001B[1;32m    246\u001B[0m \u001B[38;5;28;01melse\u001B[39;00m:\n",
       "\u001B[1;32m    247\u001B[0m     \u001B[38;5;28;01mif\u001B[39;00m key \u001B[38;5;129;01mnot\u001B[39;00m \u001B[38;5;129;01min\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mobj:\n",
       "\u001B[0;32m--> 248\u001B[0m         \u001B[38;5;28;01mraise\u001B[39;00m \u001B[38;5;167;01mKeyError\u001B[39;00m(\u001B[38;5;124mf\u001B[39m\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mColumn not found: \u001B[39m\u001B[38;5;132;01m{\u001B[39;00mkey\u001B[38;5;132;01m}\u001B[39;00m\u001B[38;5;124m\"\u001B[39m)\n",
       "\u001B[1;32m    249\u001B[0m     subset \u001B[38;5;241m=\u001B[39m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mobj[key]\n",
       "\u001B[1;32m    250\u001B[0m     ndim \u001B[38;5;241m=\u001B[39m subset\u001B[38;5;241m.\u001B[39mndim\n",
       "\n",
       "\u001B[0;31mKeyError\u001B[0m: 'Column not found: Oransal Hata (%)'"
      ]
     },
     "metadata": {
      "application/vnd.databricks.v1+output": {
       "addedWidgets": {},
       "arguments": {},
       "datasetInfos": [],
       "jupyterProps": {
        "ename": "KeyError",
        "evalue": "'Column not found: Oransal Hata (%)'"
       },
       "metadata": {
        "errorSummary": "Command skipped"
       },
       "removedWidgets": [],
       "sqlProps": null,
       "stackFrames": [
        "\u001B[0;31m---------------------------------------------------------------------------\u001B[0m",
        "\u001B[0;31mKeyError\u001B[0m                                  Traceback (most recent call last)",
        "File \u001B[0;32m<command-5752074750107847>, line 5\u001B[0m\n\u001B[1;32m      1\u001B[0m \u001B[38;5;66;03m# Oransal hata segment analizi (Power BI'de kategoriye çevirebilirsin)\u001B[39;00m\n\u001B[1;32m      2\u001B[0m comparison[\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mSegment\u001B[39m\u001B[38;5;124m\"\u001B[39m] \u001B[38;5;241m=\u001B[39m pd\u001B[38;5;241m.\u001B[39mcut(comparison[\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mGerçek Fiyat (TRY)\u001B[39m\u001B[38;5;124m\"\u001B[39m],\n\u001B[1;32m      3\u001B[0m                                bins\u001B[38;5;241m=\u001B[39m[\u001B[38;5;241m0\u001B[39m, \u001B[38;5;241m200000\u001B[39m, \u001B[38;5;241m500000\u001B[39m, \u001B[38;5;241m1000000\u001B[39m, \u001B[38;5;241m2000000\u001B[39m],\n\u001B[1;32m      4\u001B[0m                                labels\u001B[38;5;241m=\u001B[39m[\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124m0–200K\u001B[39m\u001B[38;5;124m\"\u001B[39m, \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124m200–500K\u001B[39m\u001B[38;5;124m\"\u001B[39m, \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124m500–1M\u001B[39m\u001B[38;5;124m\"\u001B[39m, \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124m1M+\u001B[39m\u001B[38;5;124m\"\u001B[39m])\n\u001B[0;32m----> 5\u001B[0m segment_error \u001B[38;5;241m=\u001B[39m comparison\u001B[38;5;241m.\u001B[39mgroupby(\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mSegment\u001B[39m\u001B[38;5;124m\"\u001B[39m)[\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mOransal Hata (\u001B[39m\u001B[38;5;124m%\u001B[39m\u001B[38;5;124m)\u001B[39m\u001B[38;5;124m\"\u001B[39m]\u001B[38;5;241m.\u001B[39mmean()\n",
        "File \u001B[0;32m/databricks/python/lib/python3.11/site-packages/pandas/core/groupby/generic.py:1416\u001B[0m, in \u001B[0;36mDataFrameGroupBy.__getitem__\u001B[0;34m(self, key)\u001B[0m\n\u001B[1;32m   1407\u001B[0m \u001B[38;5;28;01mif\u001B[39;00m \u001B[38;5;28misinstance\u001B[39m(key, \u001B[38;5;28mtuple\u001B[39m) \u001B[38;5;129;01mand\u001B[39;00m \u001B[38;5;28mlen\u001B[39m(key) \u001B[38;5;241m>\u001B[39m \u001B[38;5;241m1\u001B[39m:\n\u001B[1;32m   1408\u001B[0m     \u001B[38;5;66;03m# if len == 1, then it becomes a SeriesGroupBy and this is actually\u001B[39;00m\n\u001B[1;32m   1409\u001B[0m     \u001B[38;5;66;03m# valid syntax, so don't raise warning\u001B[39;00m\n\u001B[1;32m   1410\u001B[0m     warnings\u001B[38;5;241m.\u001B[39mwarn(\n\u001B[1;32m   1411\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mIndexing with multiple keys (implicitly converted to a tuple \u001B[39m\u001B[38;5;124m\"\u001B[39m\n\u001B[1;32m   1412\u001B[0m         \u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mof keys) will be deprecated, use a list instead.\u001B[39m\u001B[38;5;124m\"\u001B[39m,\n\u001B[1;32m   1413\u001B[0m         \u001B[38;5;167;01mFutureWarning\u001B[39;00m,\n\u001B[1;32m   1414\u001B[0m         stacklevel\u001B[38;5;241m=\u001B[39mfind_stack_level(),\n\u001B[1;32m   1415\u001B[0m     )\n\u001B[0;32m-> 1416\u001B[0m \u001B[38;5;28;01mreturn\u001B[39;00m \u001B[38;5;28msuper\u001B[39m()\u001B[38;5;241m.\u001B[39m\u001B[38;5;21m__getitem__\u001B[39m(key)\n",
        "File \u001B[0;32m/databricks/python/lib/python3.11/site-packages/pandas/core/base.py:248\u001B[0m, in \u001B[0;36mSelectionMixin.__getitem__\u001B[0;34m(self, key)\u001B[0m\n\u001B[1;32m    246\u001B[0m \u001B[38;5;28;01melse\u001B[39;00m:\n\u001B[1;32m    247\u001B[0m     \u001B[38;5;28;01mif\u001B[39;00m key \u001B[38;5;129;01mnot\u001B[39;00m \u001B[38;5;129;01min\u001B[39;00m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mobj:\n\u001B[0;32m--> 248\u001B[0m         \u001B[38;5;28;01mraise\u001B[39;00m \u001B[38;5;167;01mKeyError\u001B[39;00m(\u001B[38;5;124mf\u001B[39m\u001B[38;5;124m\"\u001B[39m\u001B[38;5;124mColumn not found: \u001B[39m\u001B[38;5;132;01m{\u001B[39;00mkey\u001B[38;5;132;01m}\u001B[39;00m\u001B[38;5;124m\"\u001B[39m)\n\u001B[1;32m    249\u001B[0m     subset \u001B[38;5;241m=\u001B[39m \u001B[38;5;28mself\u001B[39m\u001B[38;5;241m.\u001B[39mobj[key]\n\u001B[1;32m    250\u001B[0m     ndim \u001B[38;5;241m=\u001B[39m subset\u001B[38;5;241m.\u001B[39mndim\n",
        "\u001B[0;31mKeyError\u001B[0m: 'Column not found: Oransal Hata (%)'"
       ],
       "type": "baseError"
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "comparison.to_excel(\"comparison_prices.xlsx\", index=False)"
   ]
  }
 ],
 "metadata": {
  "application/vnd.databricks.v1+notebook": {
   "computePreferences": null,
   "dashboards": [],
   "environmentMetadata": {
    "base_environment": "",
    "environment_version": "2"
   },
   "inputWidgetPreferences": null,
   "language": "python",
   "notebookMetadata": {
    "mostRecentlyExecutedCommandWithImplicitDF": {
     "commandId": -1,
     "dataframes": [
      "_sqldf"
     ]
    },
    "pythonIndentUnit": 4
   },
   "notebookName": "(Clone) Notebook",
   "widgets": {}
  },
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
